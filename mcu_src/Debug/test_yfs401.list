
test_yfs401.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000250  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b804  08000250  08000250  00001250  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008f9  0800ba58  0800ba58  0000ca58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c354  0800c354  0000d354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c35c  0800c35c  0000d35c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800c360  0800c360  0000d360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001dc  20000000  0800c364  0000e000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000360  200001dc  0800c540  0000e1dc  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2000053c  0800c540  0000e53c  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  0000e1dc  2**0
                  CONTENTS, READONLY
 10 .debug_info   00014916  00000000  00000000  0000e212  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000285f  00000000  00000000  00022b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000010e0  00000000  00000000  00025388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000ce8  00000000  00000000  00026468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00036d21  00000000  00000000  00027150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00014434  00000000  00000000  0005de71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00153a1a  00000000  00000000  000722a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001c5cbf  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000056b8  00000000  00000000  001c5d04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000068  00000000  00000000  001cb3bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000250 <__do_global_dtors_aux>:
 8000250:	b510      	push	{r4, lr}
 8000252:	4c05      	ldr	r4, [pc, #20]	@ (8000268 <__do_global_dtors_aux+0x18>)
 8000254:	7823      	ldrb	r3, [r4, #0]
 8000256:	b933      	cbnz	r3, 8000266 <__do_global_dtors_aux+0x16>
 8000258:	4b04      	ldr	r3, [pc, #16]	@ (800026c <__do_global_dtors_aux+0x1c>)
 800025a:	b113      	cbz	r3, 8000262 <__do_global_dtors_aux+0x12>
 800025c:	4804      	ldr	r0, [pc, #16]	@ (8000270 <__do_global_dtors_aux+0x20>)
 800025e:	f3af 8000 	nop.w
 8000262:	2301      	movs	r3, #1
 8000264:	7023      	strb	r3, [r4, #0]
 8000266:	bd10      	pop	{r4, pc}
 8000268:	200001dc 	.word	0x200001dc
 800026c:	00000000 	.word	0x00000000
 8000270:	0800ba3c 	.word	0x0800ba3c

08000274 <frame_dummy>:
 8000274:	b508      	push	{r3, lr}
 8000276:	4b03      	ldr	r3, [pc, #12]	@ (8000284 <frame_dummy+0x10>)
 8000278:	b11b      	cbz	r3, 8000282 <frame_dummy+0xe>
 800027a:	4903      	ldr	r1, [pc, #12]	@ (8000288 <frame_dummy+0x14>)
 800027c:	4803      	ldr	r0, [pc, #12]	@ (800028c <frame_dummy+0x18>)
 800027e:	f3af 8000 	nop.w
 8000282:	bd08      	pop	{r3, pc}
 8000284:	00000000 	.word	0x00000000
 8000288:	200001e0 	.word	0x200001e0
 800028c:	0800ba3c 	.word	0x0800ba3c

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b9b0 	b.w	8000f40 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000bfc:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000bfe:	4688      	mov	r8, r1
 8000c00:	4604      	mov	r4, r0
 8000c02:	468e      	mov	lr, r1
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d14a      	bne.n	8000c9e <__udivmoddi4+0xa6>
 8000c08:	428a      	cmp	r2, r1
 8000c0a:	4617      	mov	r7, r2
 8000c0c:	d95f      	bls.n	8000cce <__udivmoddi4+0xd6>
 8000c0e:	fab2 f682 	clz	r6, r2
 8000c12:	b14e      	cbz	r6, 8000c28 <__udivmoddi4+0x30>
 8000c14:	f1c6 0320 	rsb	r3, r6, #32
 8000c18:	fa01 fe06 	lsl.w	lr, r1, r6
 8000c1c:	40b7      	lsls	r7, r6
 8000c1e:	40b4      	lsls	r4, r6
 8000c20:	fa20 f303 	lsr.w	r3, r0, r3
 8000c24:	ea43 0e0e 	orr.w	lr, r3, lr
 8000c28:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c2c:	fa1f fc87 	uxth.w	ip, r7
 8000c30:	0c23      	lsrs	r3, r4, #16
 8000c32:	fbbe f1f8 	udiv	r1, lr, r8
 8000c36:	fb08 ee11 	mls	lr, r8, r1, lr
 8000c3a:	fb01 f20c 	mul.w	r2, r1, ip
 8000c3e:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000c42:	429a      	cmp	r2, r3
 8000c44:	d907      	bls.n	8000c56 <__udivmoddi4+0x5e>
 8000c46:	18fb      	adds	r3, r7, r3
 8000c48:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c4c:	d202      	bcs.n	8000c54 <__udivmoddi4+0x5c>
 8000c4e:	429a      	cmp	r2, r3
 8000c50:	f200 8154 	bhi.w	8000efc <__udivmoddi4+0x304>
 8000c54:	4601      	mov	r1, r0
 8000c56:	1a9b      	subs	r3, r3, r2
 8000c58:	b2a2      	uxth	r2, r4
 8000c5a:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c5e:	fb08 3310 	mls	r3, r8, r0, r3
 8000c62:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c66:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8000c6a:	4594      	cmp	ip, r2
 8000c6c:	d90b      	bls.n	8000c86 <__udivmoddi4+0x8e>
 8000c6e:	18ba      	adds	r2, r7, r2
 8000c70:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c74:	bf2c      	ite	cs
 8000c76:	2401      	movcs	r4, #1
 8000c78:	2400      	movcc	r4, #0
 8000c7a:	4594      	cmp	ip, r2
 8000c7c:	d902      	bls.n	8000c84 <__udivmoddi4+0x8c>
 8000c7e:	2c00      	cmp	r4, #0
 8000c80:	f000 813f 	beq.w	8000f02 <__udivmoddi4+0x30a>
 8000c84:	4618      	mov	r0, r3
 8000c86:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c8a:	eba2 020c 	sub.w	r2, r2, ip
 8000c8e:	2100      	movs	r1, #0
 8000c90:	b11d      	cbz	r5, 8000c9a <__udivmoddi4+0xa2>
 8000c92:	40f2      	lsrs	r2, r6
 8000c94:	2300      	movs	r3, #0
 8000c96:	e9c5 2300 	strd	r2, r3, [r5]
 8000c9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d905      	bls.n	8000cae <__udivmoddi4+0xb6>
 8000ca2:	b10d      	cbz	r5, 8000ca8 <__udivmoddi4+0xb0>
 8000ca4:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca8:	2100      	movs	r1, #0
 8000caa:	4608      	mov	r0, r1
 8000cac:	e7f5      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000cae:	fab3 f183 	clz	r1, r3
 8000cb2:	2900      	cmp	r1, #0
 8000cb4:	d14e      	bne.n	8000d54 <__udivmoddi4+0x15c>
 8000cb6:	4543      	cmp	r3, r8
 8000cb8:	f0c0 8112 	bcc.w	8000ee0 <__udivmoddi4+0x2e8>
 8000cbc:	4282      	cmp	r2, r0
 8000cbe:	f240 810f 	bls.w	8000ee0 <__udivmoddi4+0x2e8>
 8000cc2:	4608      	mov	r0, r1
 8000cc4:	2d00      	cmp	r5, #0
 8000cc6:	d0e8      	beq.n	8000c9a <__udivmoddi4+0xa2>
 8000cc8:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ccc:	e7e5      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000cce:	2a00      	cmp	r2, #0
 8000cd0:	f000 80ac 	beq.w	8000e2c <__udivmoddi4+0x234>
 8000cd4:	fab2 f682 	clz	r6, r2
 8000cd8:	2e00      	cmp	r6, #0
 8000cda:	f040 80bb 	bne.w	8000e54 <__udivmoddi4+0x25c>
 8000cde:	1a8b      	subs	r3, r1, r2
 8000ce0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000ce4:	b2bc      	uxth	r4, r7
 8000ce6:	2101      	movs	r1, #1
 8000ce8:	0c02      	lsrs	r2, r0, #16
 8000cea:	b280      	uxth	r0, r0
 8000cec:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cf0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000cf4:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8000cf8:	fb04 f20c 	mul.w	r2, r4, ip
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	d90e      	bls.n	8000d1e <__udivmoddi4+0x126>
 8000d00:	18fb      	adds	r3, r7, r3
 8000d02:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d06:	bf2c      	ite	cs
 8000d08:	f04f 0901 	movcs.w	r9, #1
 8000d0c:	f04f 0900 	movcc.w	r9, #0
 8000d10:	429a      	cmp	r2, r3
 8000d12:	d903      	bls.n	8000d1c <__udivmoddi4+0x124>
 8000d14:	f1b9 0f00 	cmp.w	r9, #0
 8000d18:	f000 80ec 	beq.w	8000ef4 <__udivmoddi4+0x2fc>
 8000d1c:	46c4      	mov	ip, r8
 8000d1e:	1a9b      	subs	r3, r3, r2
 8000d20:	fbb3 f8fe 	udiv	r8, r3, lr
 8000d24:	fb0e 3318 	mls	r3, lr, r8, r3
 8000d28:	fb04 f408 	mul.w	r4, r4, r8
 8000d2c:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
 8000d30:	4294      	cmp	r4, r2
 8000d32:	d90b      	bls.n	8000d4c <__udivmoddi4+0x154>
 8000d34:	18ba      	adds	r2, r7, r2
 8000d36:	f108 33ff 	add.w	r3, r8, #4294967295
 8000d3a:	bf2c      	ite	cs
 8000d3c:	2001      	movcs	r0, #1
 8000d3e:	2000      	movcc	r0, #0
 8000d40:	4294      	cmp	r4, r2
 8000d42:	d902      	bls.n	8000d4a <__udivmoddi4+0x152>
 8000d44:	2800      	cmp	r0, #0
 8000d46:	f000 80d1 	beq.w	8000eec <__udivmoddi4+0x2f4>
 8000d4a:	4698      	mov	r8, r3
 8000d4c:	1b12      	subs	r2, r2, r4
 8000d4e:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
 8000d52:	e79d      	b.n	8000c90 <__udivmoddi4+0x98>
 8000d54:	f1c1 0620 	rsb	r6, r1, #32
 8000d58:	408b      	lsls	r3, r1
 8000d5a:	fa08 f401 	lsl.w	r4, r8, r1
 8000d5e:	fa00 f901 	lsl.w	r9, r0, r1
 8000d62:	fa22 f706 	lsr.w	r7, r2, r6
 8000d66:	fa28 f806 	lsr.w	r8, r8, r6
 8000d6a:	408a      	lsls	r2, r1
 8000d6c:	431f      	orrs	r7, r3
 8000d6e:	fa20 f306 	lsr.w	r3, r0, r6
 8000d72:	0c38      	lsrs	r0, r7, #16
 8000d74:	4323      	orrs	r3, r4
 8000d76:	fa1f fc87 	uxth.w	ip, r7
 8000d7a:	0c1c      	lsrs	r4, r3, #16
 8000d7c:	fbb8 fef0 	udiv	lr, r8, r0
 8000d80:	fb00 881e 	mls	r8, r0, lr, r8
 8000d84:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8000d88:	fb0e f80c 	mul.w	r8, lr, ip
 8000d8c:	45a0      	cmp	r8, r4
 8000d8e:	d90e      	bls.n	8000dae <__udivmoddi4+0x1b6>
 8000d90:	193c      	adds	r4, r7, r4
 8000d92:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d96:	bf2c      	ite	cs
 8000d98:	f04f 0b01 	movcs.w	fp, #1
 8000d9c:	f04f 0b00 	movcc.w	fp, #0
 8000da0:	45a0      	cmp	r8, r4
 8000da2:	d903      	bls.n	8000dac <__udivmoddi4+0x1b4>
 8000da4:	f1bb 0f00 	cmp.w	fp, #0
 8000da8:	f000 80b8 	beq.w	8000f1c <__udivmoddi4+0x324>
 8000dac:	46d6      	mov	lr, sl
 8000dae:	eba4 0408 	sub.w	r4, r4, r8
 8000db2:	fa1f f883 	uxth.w	r8, r3
 8000db6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dba:	fb00 4413 	mls	r4, r0, r3, r4
 8000dbe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dc2:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8000dc6:	45a4      	cmp	ip, r4
 8000dc8:	d90e      	bls.n	8000de8 <__udivmoddi4+0x1f0>
 8000dca:	193c      	adds	r4, r7, r4
 8000dcc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dd0:	bf2c      	ite	cs
 8000dd2:	f04f 0801 	movcs.w	r8, #1
 8000dd6:	f04f 0800 	movcc.w	r8, #0
 8000dda:	45a4      	cmp	ip, r4
 8000ddc:	d903      	bls.n	8000de6 <__udivmoddi4+0x1ee>
 8000dde:	f1b8 0f00 	cmp.w	r8, #0
 8000de2:	f000 809f 	beq.w	8000f24 <__udivmoddi4+0x32c>
 8000de6:	4603      	mov	r3, r0
 8000de8:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dec:	eba4 040c 	sub.w	r4, r4, ip
 8000df0:	fba0 ec02 	umull	lr, ip, r0, r2
 8000df4:	4564      	cmp	r4, ip
 8000df6:	4673      	mov	r3, lr
 8000df8:	46e0      	mov	r8, ip
 8000dfa:	d302      	bcc.n	8000e02 <__udivmoddi4+0x20a>
 8000dfc:	d107      	bne.n	8000e0e <__udivmoddi4+0x216>
 8000dfe:	45f1      	cmp	r9, lr
 8000e00:	d205      	bcs.n	8000e0e <__udivmoddi4+0x216>
 8000e02:	ebbe 0302 	subs.w	r3, lr, r2
 8000e06:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e0a:	3801      	subs	r0, #1
 8000e0c:	46e0      	mov	r8, ip
 8000e0e:	b15d      	cbz	r5, 8000e28 <__udivmoddi4+0x230>
 8000e10:	ebb9 0203 	subs.w	r2, r9, r3
 8000e14:	eb64 0408 	sbc.w	r4, r4, r8
 8000e18:	fa04 f606 	lsl.w	r6, r4, r6
 8000e1c:	fa22 f301 	lsr.w	r3, r2, r1
 8000e20:	40cc      	lsrs	r4, r1
 8000e22:	431e      	orrs	r6, r3
 8000e24:	e9c5 6400 	strd	r6, r4, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	e736      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000e2c:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e30:	0c01      	lsrs	r1, r0, #16
 8000e32:	4614      	mov	r4, r2
 8000e34:	b280      	uxth	r0, r0
 8000e36:	4696      	mov	lr, r2
 8000e38:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000e3c:	2620      	movs	r6, #32
 8000e3e:	4690      	mov	r8, r2
 8000e40:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
 8000e44:	4610      	mov	r0, r2
 8000e46:	fbb1 f1f2 	udiv	r1, r1, r2
 8000e4a:	eba3 0308 	sub.w	r3, r3, r8
 8000e4e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e52:	e74b      	b.n	8000cec <__udivmoddi4+0xf4>
 8000e54:	40b7      	lsls	r7, r6
 8000e56:	f1c6 0320 	rsb	r3, r6, #32
 8000e5a:	fa01 f206 	lsl.w	r2, r1, r6
 8000e5e:	fa21 f803 	lsr.w	r8, r1, r3
 8000e62:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e66:	fa20 f303 	lsr.w	r3, r0, r3
 8000e6a:	b2bc      	uxth	r4, r7
 8000e6c:	40b0      	lsls	r0, r6
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	0c02      	lsrs	r2, r0, #16
 8000e72:	0c19      	lsrs	r1, r3, #16
 8000e74:	b280      	uxth	r0, r0
 8000e76:	fbb8 f9fe 	udiv	r9, r8, lr
 8000e7a:	fb0e 8819 	mls	r8, lr, r9, r8
 8000e7e:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8000e82:	fb09 f804 	mul.w	r8, r9, r4
 8000e86:	4588      	cmp	r8, r1
 8000e88:	d951      	bls.n	8000f2e <__udivmoddi4+0x336>
 8000e8a:	1879      	adds	r1, r7, r1
 8000e8c:	f109 3cff 	add.w	ip, r9, #4294967295
 8000e90:	bf2c      	ite	cs
 8000e92:	f04f 0a01 	movcs.w	sl, #1
 8000e96:	f04f 0a00 	movcc.w	sl, #0
 8000e9a:	4588      	cmp	r8, r1
 8000e9c:	d902      	bls.n	8000ea4 <__udivmoddi4+0x2ac>
 8000e9e:	f1ba 0f00 	cmp.w	sl, #0
 8000ea2:	d031      	beq.n	8000f08 <__udivmoddi4+0x310>
 8000ea4:	eba1 0108 	sub.w	r1, r1, r8
 8000ea8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eac:	fb09 f804 	mul.w	r8, r9, r4
 8000eb0:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eb4:	b29b      	uxth	r3, r3
 8000eb6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eba:	4543      	cmp	r3, r8
 8000ebc:	d235      	bcs.n	8000f2a <__udivmoddi4+0x332>
 8000ebe:	18fb      	adds	r3, r7, r3
 8000ec0:	f109 31ff 	add.w	r1, r9, #4294967295
 8000ec4:	bf2c      	ite	cs
 8000ec6:	f04f 0a01 	movcs.w	sl, #1
 8000eca:	f04f 0a00 	movcc.w	sl, #0
 8000ece:	4543      	cmp	r3, r8
 8000ed0:	d2bb      	bcs.n	8000e4a <__udivmoddi4+0x252>
 8000ed2:	f1ba 0f00 	cmp.w	sl, #0
 8000ed6:	d1b8      	bne.n	8000e4a <__udivmoddi4+0x252>
 8000ed8:	f1a9 0102 	sub.w	r1, r9, #2
 8000edc:	443b      	add	r3, r7
 8000ede:	e7b4      	b.n	8000e4a <__udivmoddi4+0x252>
 8000ee0:	1a84      	subs	r4, r0, r2
 8000ee2:	eb68 0203 	sbc.w	r2, r8, r3
 8000ee6:	2001      	movs	r0, #1
 8000ee8:	4696      	mov	lr, r2
 8000eea:	e6eb      	b.n	8000cc4 <__udivmoddi4+0xcc>
 8000eec:	443a      	add	r2, r7
 8000eee:	f1a8 0802 	sub.w	r8, r8, #2
 8000ef2:	e72b      	b.n	8000d4c <__udivmoddi4+0x154>
 8000ef4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ef8:	443b      	add	r3, r7
 8000efa:	e710      	b.n	8000d1e <__udivmoddi4+0x126>
 8000efc:	3902      	subs	r1, #2
 8000efe:	443b      	add	r3, r7
 8000f00:	e6a9      	b.n	8000c56 <__udivmoddi4+0x5e>
 8000f02:	443a      	add	r2, r7
 8000f04:	3802      	subs	r0, #2
 8000f06:	e6be      	b.n	8000c86 <__udivmoddi4+0x8e>
 8000f08:	eba7 0808 	sub.w	r8, r7, r8
 8000f0c:	f1a9 0c02 	sub.w	ip, r9, #2
 8000f10:	4441      	add	r1, r8
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fb09 f804 	mul.w	r8, r9, r4
 8000f1a:	e7c9      	b.n	8000eb0 <__udivmoddi4+0x2b8>
 8000f1c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f20:	443c      	add	r4, r7
 8000f22:	e744      	b.n	8000dae <__udivmoddi4+0x1b6>
 8000f24:	3b02      	subs	r3, #2
 8000f26:	443c      	add	r4, r7
 8000f28:	e75e      	b.n	8000de8 <__udivmoddi4+0x1f0>
 8000f2a:	4649      	mov	r1, r9
 8000f2c:	e78d      	b.n	8000e4a <__udivmoddi4+0x252>
 8000f2e:	eba1 0108 	sub.w	r1, r1, r8
 8000f32:	46cc      	mov	ip, r9
 8000f34:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f38:	fb09 f804 	mul.w	r8, r9, r4
 8000f3c:	e7b8      	b.n	8000eb0 <__udivmoddi4+0x2b8>
 8000f3e:	bf00      	nop

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b085      	sub	sp, #20
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 8000f50:	4b0b      	ldr	r3, [pc, #44]	@ (8000f80 <NRF24_DelayMicroSeconds+0x3c>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a0b      	ldr	r2, [pc, #44]	@ (8000f84 <NRF24_DelayMicroSeconds+0x40>)
 8000f56:	fba2 2303 	umull	r2, r3, r2, r3
 8000f5a:	0c9a      	lsrs	r2, r3, #18
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	fb02 f303 	mul.w	r3, r2, r3
 8000f62:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 8000f64:	bf00      	nop
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	1e5a      	subs	r2, r3, #1
 8000f6a:	60fa      	str	r2, [r7, #12]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d1fa      	bne.n	8000f66 <NRF24_DelayMicroSeconds+0x22>
}
 8000f70:	bf00      	nop
 8000f72:	bf00      	nop
 8000f74:	3714      	adds	r7, #20
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	20000008 	.word	0x20000008
 8000f84:	165e9f81 	.word	0x165e9f81

08000f88 <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_CSN_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d008      	beq.n	8000fa8 <NRF24_csn+0x20>
 8000f96:	4b0a      	ldr	r3, [pc, #40]	@ (8000fc0 <NRF24_csn+0x38>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4a0a      	ldr	r2, [pc, #40]	@ (8000fc4 <NRF24_csn+0x3c>)
 8000f9c:	8811      	ldrh	r1, [r2, #0]
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f002 f87b 	bl	800309c <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_CSN_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 8000fa6:	e007      	b.n	8000fb8 <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_CSN_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 8000fa8:	4b05      	ldr	r3, [pc, #20]	@ (8000fc0 <NRF24_csn+0x38>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a05      	ldr	r2, [pc, #20]	@ (8000fc4 <NRF24_csn+0x3c>)
 8000fae:	8811      	ldrh	r1, [r2, #0]
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f002 f872 	bl	800309c <HAL_GPIO_WritePin>
}
 8000fb8:	bf00      	nop
 8000fba:	3708      	adds	r7, #8
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	20000200 	.word	0x20000200
 8000fc4:	20000208 	.word	0x20000208

08000fc8 <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_CE_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d008      	beq.n	8000fe8 <NRF24_ce+0x20>
 8000fd6:	4b0a      	ldr	r3, [pc, #40]	@ (8001000 <NRF24_ce+0x38>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4a0a      	ldr	r2, [pc, #40]	@ (8001004 <NRF24_ce+0x3c>)
 8000fdc:	8811      	ldrh	r1, [r2, #0]
 8000fde:	2201      	movs	r2, #1
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f002 f85b 	bl	800309c <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_CE_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 8000fe6:	e007      	b.n	8000ff8 <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_CE_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 8000fe8:	4b05      	ldr	r3, [pc, #20]	@ (8001000 <NRF24_ce+0x38>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a05      	ldr	r2, [pc, #20]	@ (8001004 <NRF24_ce+0x3c>)
 8000fee:	8811      	ldrh	r1, [r2, #0]
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f002 f852 	bl	800309c <HAL_GPIO_WritePin>
}
 8000ff8:	bf00      	nop
 8000ffa:	3708      	adds	r7, #8
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	20000204 	.word	0x20000204
 8001004:	2000020a 	.word	0x2000020a

08001008 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 8001012:	2000      	movs	r0, #0
 8001014:	f7ff ffb8 	bl	8000f88 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8001018:	79fb      	ldrb	r3, [r7, #7]
 800101a:	f003 031f 	and.w	r3, r3, #31
 800101e:	b2db      	uxtb	r3, r3
 8001020:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8001022:	f107 010c 	add.w	r1, r7, #12
 8001026:	2364      	movs	r3, #100	@ 0x64
 8001028:	2201      	movs	r2, #1
 800102a:	480a      	ldr	r0, [pc, #40]	@ (8001054 <NRF24_read_register+0x4c>)
 800102c:	f006 fc26 	bl	800787c <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 8001030:	f107 030c 	add.w	r3, r7, #12
 8001034:	1c59      	adds	r1, r3, #1
 8001036:	2364      	movs	r3, #100	@ 0x64
 8001038:	2201      	movs	r2, #1
 800103a:	4806      	ldr	r0, [pc, #24]	@ (8001054 <NRF24_read_register+0x4c>)
 800103c:	f006 fe32 	bl	8007ca4 <HAL_SPI_Receive>
	retData = spiBuf[1];
 8001040:	7b7b      	ldrb	r3, [r7, #13]
 8001042:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 8001044:	2001      	movs	r0, #1
 8001046:	f7ff ff9f 	bl	8000f88 <NRF24_csn>
	return retData;
 800104a:	7bfb      	ldrb	r3, [r7, #15]
}
 800104c:	4618      	mov	r0, r3
 800104e:	3710      	adds	r7, #16
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	2000020c 	.word	0x2000020c

08001058 <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	6039      	str	r1, [r7, #0]
 8001062:	71fb      	strb	r3, [r7, #7]
 8001064:	4613      	mov	r3, r2
 8001066:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8001068:	2000      	movs	r0, #0
 800106a:	f7ff ff8d 	bl	8000f88 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 800106e:	79fb      	ldrb	r3, [r7, #7]
 8001070:	f003 031f 	and.w	r3, r3, #31
 8001074:	b2db      	uxtb	r3, r3
 8001076:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8001078:	f107 010c 	add.w	r1, r7, #12
 800107c:	2364      	movs	r3, #100	@ 0x64
 800107e:	2201      	movs	r2, #1
 8001080:	4808      	ldr	r0, [pc, #32]	@ (80010a4 <NRF24_read_registerN+0x4c>)
 8001082:	f006 fbfb 	bl	800787c <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 8001086:	79bb      	ldrb	r3, [r7, #6]
 8001088:	b29a      	uxth	r2, r3
 800108a:	2364      	movs	r3, #100	@ 0x64
 800108c:	6839      	ldr	r1, [r7, #0]
 800108e:	4805      	ldr	r0, [pc, #20]	@ (80010a4 <NRF24_read_registerN+0x4c>)
 8001090:	f006 fe08 	bl	8007ca4 <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 8001094:	2001      	movs	r0, #1
 8001096:	f7ff ff77 	bl	8000f88 <NRF24_csn>
}
 800109a:	bf00      	nop
 800109c:	3710      	adds	r7, #16
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	2000020c 	.word	0x2000020c

080010a8 <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4603      	mov	r3, r0
 80010b0:	460a      	mov	r2, r1
 80010b2:	71fb      	strb	r3, [r7, #7]
 80010b4:	4613      	mov	r3, r2
 80010b6:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80010b8:	2000      	movs	r0, #0
 80010ba:	f7ff ff65 	bl	8000f88 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	f043 0320 	orr.w	r3, r3, #32
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 80010c8:	79bb      	ldrb	r3, [r7, #6]
 80010ca:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 80010cc:	f107 010c 	add.w	r1, r7, #12
 80010d0:	2364      	movs	r3, #100	@ 0x64
 80010d2:	2202      	movs	r2, #2
 80010d4:	4804      	ldr	r0, [pc, #16]	@ (80010e8 <NRF24_write_register+0x40>)
 80010d6:	f006 fbd1 	bl	800787c <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 80010da:	2001      	movs	r0, #1
 80010dc:	f7ff ff54 	bl	8000f88 <NRF24_csn>
}
 80010e0:	bf00      	nop
 80010e2:	3710      	adds	r7, #16
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	2000020c 	.word	0x2000020c

080010ec <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4603      	mov	r3, r0
 80010f4:	6039      	str	r1, [r7, #0]
 80010f6:	71fb      	strb	r3, [r7, #7]
 80010f8:	4613      	mov	r3, r2
 80010fa:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80010fc:	2000      	movs	r0, #0
 80010fe:	f7ff ff43 	bl	8000f88 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8001102:	79fb      	ldrb	r3, [r7, #7]
 8001104:	f043 0320 	orr.w	r3, r3, #32
 8001108:	b2db      	uxtb	r3, r3
 800110a:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 800110c:	f107 010c 	add.w	r1, r7, #12
 8001110:	2364      	movs	r3, #100	@ 0x64
 8001112:	2201      	movs	r2, #1
 8001114:	4808      	ldr	r0, [pc, #32]	@ (8001138 <NRF24_write_registerN+0x4c>)
 8001116:	f006 fbb1 	bl	800787c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 800111a:	79bb      	ldrb	r3, [r7, #6]
 800111c:	b29a      	uxth	r2, r3
 800111e:	2364      	movs	r3, #100	@ 0x64
 8001120:	6839      	ldr	r1, [r7, #0]
 8001122:	4805      	ldr	r0, [pc, #20]	@ (8001138 <NRF24_write_registerN+0x4c>)
 8001124:	f006 fbaa 	bl	800787c <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8001128:	2001      	movs	r0, #1
 800112a:	f7ff ff2d 	bl	8000f88 <NRF24_csn>
}
 800112e:	bf00      	nop
 8001130:	3710      	adds	r7, #16
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	2000020c 	.word	0x2000020c

0800113c <NRF24_write_payload>:
//7. Write transmit payload
void NRF24_write_payload(const void* buf, uint8_t len)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	460b      	mov	r3, r1
 8001146:	70fb      	strb	r3, [r7, #3]
	uint8_t wrPayloadCmd;
	//Bring CSN low
	NRF24_csn(0);
 8001148:	2000      	movs	r0, #0
 800114a:	f7ff ff1d 	bl	8000f88 <NRF24_csn>
	//Send Write Tx payload command followed by pbuf data
	wrPayloadCmd = CMD_W_TX_PAYLOAD;
 800114e:	23a0      	movs	r3, #160	@ 0xa0
 8001150:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&nrf24_hspi, &wrPayloadCmd, 1, 100);
 8001152:	f107 010f 	add.w	r1, r7, #15
 8001156:	2364      	movs	r3, #100	@ 0x64
 8001158:	2201      	movs	r2, #1
 800115a:	4808      	ldr	r0, [pc, #32]	@ (800117c <NRF24_write_payload+0x40>)
 800115c:	f006 fb8e 	bl	800787c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t *)buf, len, 100);
 8001160:	78fb      	ldrb	r3, [r7, #3]
 8001162:	b29a      	uxth	r2, r3
 8001164:	2364      	movs	r3, #100	@ 0x64
 8001166:	6879      	ldr	r1, [r7, #4]
 8001168:	4804      	ldr	r0, [pc, #16]	@ (800117c <NRF24_write_payload+0x40>)
 800116a:	f006 fb87 	bl	800787c <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 800116e:	2001      	movs	r0, #1
 8001170:	f7ff ff0a 	bl	8000f88 <NRF24_csn>
}
 8001174:	bf00      	nop
 8001176:	3710      	adds	r7, #16
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	2000020c 	.word	0x2000020c

08001180 <NRF24_flush_tx>:
	NRF24_csn(1);
}

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8001184:	21ff      	movs	r1, #255	@ 0xff
 8001186:	20e1      	movs	r0, #225	@ 0xe1
 8001188:	f7ff ff8e 	bl	80010a8 <NRF24_write_register>
}
 800118c:	bf00      	nop
 800118e:	bd80      	pop	{r7, pc}

08001190 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8001194:	21ff      	movs	r1, #255	@ 0xff
 8001196:	20e2      	movs	r0, #226	@ 0xe2
 8001198:	f7ff ff86 	bl	80010a8 <NRF24_write_register>
}
 800119c:	bf00      	nop
 800119e:	bd80      	pop	{r7, pc}

080011a0 <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 80011a6:	2007      	movs	r0, #7
 80011a8:	f7ff ff2e 	bl	8001008 <NRF24_read_register>
 80011ac:	4603      	mov	r3, r0
 80011ae:	71fb      	strb	r3, [r7, #7]
	return statReg;
 80011b0:	79fb      	ldrb	r3, [r7, #7]
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
	...

080011bc <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORTcsn, GPIO_TypeDef *nrf24PORTce, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b086      	sub	sp, #24
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	60f8      	str	r0, [r7, #12]
 80011c4:	60b9      	str	r1, [r7, #8]
 80011c6:	4611      	mov	r1, r2
 80011c8:	461a      	mov	r2, r3
 80011ca:	460b      	mov	r3, r1
 80011cc:	80fb      	strh	r3, [r7, #6]
 80011ce:	4613      	mov	r3, r2
 80011d0:	80bb      	strh	r3, [r7, #4]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 80011d2:	4b64      	ldr	r3, [pc, #400]	@ (8001364 <NRF24_begin+0x1a8>)
 80011d4:	4618      	mov	r0, r3
 80011d6:	f107 0320 	add.w	r3, r7, #32
 80011da:	2290      	movs	r2, #144	@ 0x90
 80011dc:	4619      	mov	r1, r3
 80011de:	f008 fe0a 	bl	8009df6 <memcpy>
	//Copy Pins and Port variables
	nrf24_CSN_PORT = nrf24PORTcsn;
 80011e2:	4a61      	ldr	r2, [pc, #388]	@ (8001368 <NRF24_begin+0x1ac>)
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	6013      	str	r3, [r2, #0]
	nrf24_CE_PORT = nrf24PORTce;
 80011e8:	4a60      	ldr	r2, [pc, #384]	@ (800136c <NRF24_begin+0x1b0>)
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 80011ee:	4a60      	ldr	r2, [pc, #384]	@ (8001370 <NRF24_begin+0x1b4>)
 80011f0:	88fb      	ldrh	r3, [r7, #6]
 80011f2:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 80011f4:	4a5f      	ldr	r2, [pc, #380]	@ (8001374 <NRF24_begin+0x1b8>)
 80011f6:	88bb      	ldrh	r3, [r7, #4]
 80011f8:	8013      	strh	r3, [r2, #0]

	//Put pins to idle state
	NRF24_csn(1);
 80011fa:	2001      	movs	r0, #1
 80011fc:	f7ff fec4 	bl	8000f88 <NRF24_csn>
	NRF24_ce(0);
 8001200:	2000      	movs	r0, #0
 8001202:	f7ff fee1 	bl	8000fc8 <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 8001206:	2005      	movs	r0, #5
 8001208:	f001 fbb0 	bl	800296c <HAL_Delay>

	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 800120c:	2108      	movs	r1, #8
 800120e:	2000      	movs	r0, #0
 8001210:	f7ff ff4a 	bl	80010a8 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 8001214:	213f      	movs	r1, #63	@ 0x3f
 8001216:	2001      	movs	r0, #1
 8001218:	f7ff ff46 	bl	80010a8 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 800121c:	2103      	movs	r1, #3
 800121e:	2002      	movs	r0, #2
 8001220:	f7ff ff42 	bl	80010a8 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 8001224:	2103      	movs	r1, #3
 8001226:	2003      	movs	r0, #3
 8001228:	f7ff ff3e 	bl	80010a8 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 800122c:	2103      	movs	r1, #3
 800122e:	2004      	movs	r0, #4
 8001230:	f7ff ff3a 	bl	80010a8 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 8001234:	2102      	movs	r1, #2
 8001236:	2005      	movs	r0, #5
 8001238:	f7ff ff36 	bl	80010a8 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 800123c:	210f      	movs	r1, #15
 800123e:	2006      	movs	r0, #6
 8001240:	f7ff ff32 	bl	80010a8 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 8001244:	210e      	movs	r1, #14
 8001246:	2007      	movs	r0, #7
 8001248:	f7ff ff2e 	bl	80010a8 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 800124c:	2100      	movs	r1, #0
 800124e:	2008      	movs	r0, #8
 8001250:	f7ff ff2a 	bl	80010a8 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 8001254:	2100      	movs	r1, #0
 8001256:	2009      	movs	r0, #9
 8001258:	f7ff ff26 	bl	80010a8 <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 800125c:	23e7      	movs	r3, #231	@ 0xe7
 800125e:	753b      	strb	r3, [r7, #20]
 8001260:	23e7      	movs	r3, #231	@ 0xe7
 8001262:	74fb      	strb	r3, [r7, #19]
 8001264:	23e7      	movs	r3, #231	@ 0xe7
 8001266:	74bb      	strb	r3, [r7, #18]
 8001268:	23e7      	movs	r3, #231	@ 0xe7
 800126a:	747b      	strb	r3, [r7, #17]
 800126c:	23e7      	movs	r3, #231	@ 0xe7
 800126e:	743b      	strb	r3, [r7, #16]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 8001270:	f107 0310 	add.w	r3, r7, #16
 8001274:	2205      	movs	r2, #5
 8001276:	4619      	mov	r1, r3
 8001278:	200a      	movs	r0, #10
 800127a:	f7ff ff37 	bl	80010ec <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2;
 800127e:	23c2      	movs	r3, #194	@ 0xc2
 8001280:	753b      	strb	r3, [r7, #20]
 8001282:	23c2      	movs	r3, #194	@ 0xc2
 8001284:	74fb      	strb	r3, [r7, #19]
 8001286:	23c2      	movs	r3, #194	@ 0xc2
 8001288:	74bb      	strb	r3, [r7, #18]
 800128a:	23c2      	movs	r3, #194	@ 0xc2
 800128c:	747b      	strb	r3, [r7, #17]
 800128e:	23c2      	movs	r3, #194	@ 0xc2
 8001290:	743b      	strb	r3, [r7, #16]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 8001292:	f107 0310 	add.w	r3, r7, #16
 8001296:	2205      	movs	r2, #5
 8001298:	4619      	mov	r1, r3
 800129a:	200b      	movs	r0, #11
 800129c:	f7ff ff26 	bl	80010ec <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 80012a0:	21c3      	movs	r1, #195	@ 0xc3
 80012a2:	200c      	movs	r0, #12
 80012a4:	f7ff ff00 	bl	80010a8 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 80012a8:	21c4      	movs	r1, #196	@ 0xc4
 80012aa:	200d      	movs	r0, #13
 80012ac:	f7ff fefc 	bl	80010a8 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 80012b0:	21c5      	movs	r1, #197	@ 0xc5
 80012b2:	200e      	movs	r0, #14
 80012b4:	f7ff fef8 	bl	80010a8 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 80012b8:	21c6      	movs	r1, #198	@ 0xc6
 80012ba:	200f      	movs	r0, #15
 80012bc:	f7ff fef4 	bl	80010a8 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7;
 80012c0:	23e7      	movs	r3, #231	@ 0xe7
 80012c2:	753b      	strb	r3, [r7, #20]
 80012c4:	23e7      	movs	r3, #231	@ 0xe7
 80012c6:	74fb      	strb	r3, [r7, #19]
 80012c8:	23e7      	movs	r3, #231	@ 0xe7
 80012ca:	74bb      	strb	r3, [r7, #18]
 80012cc:	23e7      	movs	r3, #231	@ 0xe7
 80012ce:	747b      	strb	r3, [r7, #17]
 80012d0:	23e7      	movs	r3, #231	@ 0xe7
 80012d2:	743b      	strb	r3, [r7, #16]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 80012d4:	f107 0310 	add.w	r3, r7, #16
 80012d8:	2205      	movs	r2, #5
 80012da:	4619      	mov	r1, r3
 80012dc:	2010      	movs	r0, #16
 80012de:	f7ff ff05 	bl	80010ec <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 80012e2:	2100      	movs	r1, #0
 80012e4:	2011      	movs	r0, #17
 80012e6:	f7ff fedf 	bl	80010a8 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 80012ea:	2100      	movs	r1, #0
 80012ec:	2012      	movs	r0, #18
 80012ee:	f7ff fedb 	bl	80010a8 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 80012f2:	2100      	movs	r1, #0
 80012f4:	2013      	movs	r0, #19
 80012f6:	f7ff fed7 	bl	80010a8 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 80012fa:	2100      	movs	r1, #0
 80012fc:	2014      	movs	r0, #20
 80012fe:	f7ff fed3 	bl	80010a8 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 8001302:	2100      	movs	r1, #0
 8001304:	2015      	movs	r0, #21
 8001306:	f7ff fecf 	bl	80010a8 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 800130a:	2100      	movs	r1, #0
 800130c:	2016      	movs	r0, #22
 800130e:	f7ff fecb 	bl	80010a8 <NRF24_write_register>

	//NRF24_ACTIVATE_cmd();
	NRF24_write_register(0x1c, 0);
 8001312:	2100      	movs	r1, #0
 8001314:	201c      	movs	r0, #28
 8001316:	f7ff fec7 	bl	80010a8 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 800131a:	2100      	movs	r1, #0
 800131c:	201d      	movs	r0, #29
 800131e:	f7ff fec3 	bl	80010a8 <NRF24_write_register>
	//printRadioSettings();
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 8001322:	210f      	movs	r1, #15
 8001324:	200f      	movs	r0, #15
 8001326:	f000 f8ab 	bl	8001480 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 800132a:	2003      	movs	r0, #3
 800132c:	f000 f987 	bl	800163e <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_250KBPS);
 8001330:	2002      	movs	r0, #2
 8001332:	f000 f9bd 	bl	80016b0 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 8001336:	2002      	movs	r0, #2
 8001338:	f000 fa00 	bl	800173c <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 800133c:	f000 f952 	bl	80015e4 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 8001340:	2020      	movs	r0, #32
 8001342:	f000 f8cf 	bl	80014e4 <NRF24_setPayloadSize>

	//Reset status register
	NRF24_resetStatus();
 8001346:	f000 fac2 	bl	80018ce <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 800134a:	204c      	movs	r0, #76	@ 0x4c
 800134c:	f000 f8b4 	bl	80014b8 <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 8001350:	f7ff ff16 	bl	8001180 <NRF24_flush_tx>
	NRF24_flush_rx();
 8001354:	f7ff ff1c 	bl	8001190 <NRF24_flush_rx>

	NRF24_powerDown();
 8001358:	f000 fa18 	bl	800178c <NRF24_powerDown>

}
 800135c:	bf00      	nop
 800135e:	3718      	adds	r7, #24
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	2000020c 	.word	0x2000020c
 8001368:	20000200 	.word	0x20000200
 800136c:	20000204 	.word	0x20000204
 8001370:	20000208 	.word	0x20000208
 8001374:	2000020a 	.word	0x2000020a

08001378 <NRF24_stopListening>:
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
}
//14. Stop listening (essential before any write operation)
void NRF24_stopListening(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
	NRF24_ce(0);
 800137c:	2000      	movs	r0, #0
 800137e:	f7ff fe23 	bl	8000fc8 <NRF24_ce>
	NRF24_flush_tx();
 8001382:	f7ff fefd 	bl	8001180 <NRF24_flush_tx>
	NRF24_flush_rx();
 8001386:	f7ff ff03 	bl	8001190 <NRF24_flush_rx>
}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
	...

08001390 <NRF24_write>:
//15. Write(Transmit data), returns true if successfully sent
bool NRF24_write( const void* buf, uint8_t len )
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b086      	sub	sp, #24
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	460b      	mov	r3, r1
 800139a:	70fb      	strb	r3, [r7, #3]
	bool retStatus;
	//Start writing
	NRF24_resetStatus();
 800139c:	f000 fa97 	bl	80018ce <NRF24_resetStatus>
	NRF24_startWrite(buf,len);
 80013a0:	78fb      	ldrb	r3, [r7, #3]
 80013a2:	4619      	mov	r1, r3
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	f000 fa30 	bl	800180a <NRF24_startWrite>
	//Data monitor
  uint8_t observe_tx;
  uint8_t status;
  uint32_t sent_at = HAL_GetTick();
 80013aa:	f001 fad3 	bl	8002954 <HAL_GetTick>
 80013ae:	6178      	str	r0, [r7, #20]
	const uint32_t timeout = 10; //ms to wait for timeout
 80013b0:	230a      	movs	r3, #10
 80013b2:	613b      	str	r3, [r7, #16]
	do
  {
    NRF24_read_registerN(REG_OBSERVE_TX,&observe_tx,1);
 80013b4:	f107 030d 	add.w	r3, r7, #13
 80013b8:	2201      	movs	r2, #1
 80013ba:	4619      	mov	r1, r3
 80013bc:	2008      	movs	r0, #8
 80013be:	f7ff fe4b 	bl	8001058 <NRF24_read_registerN>
		//Get status register
		status = NRF24_get_status();
 80013c2:	f7ff feed 	bl	80011a0 <NRF24_get_status>
 80013c6:	4603      	mov	r3, r0
 80013c8:	73fb      	strb	r3, [r7, #15]
  }
  while( ! ( status & ( _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) ) ) && ( HAL_GetTick() - sent_at < timeout ) );
 80013ca:	7bfb      	ldrb	r3, [r7, #15]
 80013cc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d107      	bne.n	80013e4 <NRF24_write+0x54>
 80013d4:	f001 fabe 	bl	8002954 <HAL_GetTick>
 80013d8:	4602      	mov	r2, r0
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	693a      	ldr	r2, [r7, #16]
 80013e0:	429a      	cmp	r2, r3
 80013e2:	d8e7      	bhi.n	80013b4 <NRF24_write+0x24>

//	printConfigReg();
//	printStatusReg();

	bool tx_ok, tx_fail;
  NRF24_whatHappened(&tx_ok,&tx_fail, &ack_payload_available);
 80013e4:	f107 010b 	add.w	r1, r7, #11
 80013e8:	f107 030c 	add.w	r3, r7, #12
 80013ec:	4a0c      	ldr	r2, [pc, #48]	@ (8001420 <NRF24_write+0x90>)
 80013ee:	4618      	mov	r0, r3
 80013f0:	f000 fa3a 	bl	8001868 <NRF24_whatHappened>
	retStatus = tx_ok;
 80013f4:	7b3b      	ldrb	r3, [r7, #12]
 80013f6:	73bb      	strb	r3, [r7, #14]
	if ( ack_payload_available )
 80013f8:	4b09      	ldr	r3, [pc, #36]	@ (8001420 <NRF24_write+0x90>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d005      	beq.n	800140c <NRF24_write+0x7c>
  {
    ack_payload_length = NRF24_getDynamicPayloadSize();
 8001400:	f000 f888 	bl	8001514 <NRF24_getDynamicPayloadSize>
 8001404:	4603      	mov	r3, r0
 8001406:	461a      	mov	r2, r3
 8001408:	4b06      	ldr	r3, [pc, #24]	@ (8001424 <NRF24_write+0x94>)
 800140a:	701a      	strb	r2, [r3, #0]
	}

	//Power down
	NRF24_available();
 800140c:	f000 f80c 	bl	8001428 <NRF24_available>
	NRF24_flush_tx();
 8001410:	f7ff feb6 	bl	8001180 <NRF24_flush_tx>
	return retStatus;
 8001414:	7bbb      	ldrb	r3, [r7, #14]
}
 8001416:	4618      	mov	r0, r3
 8001418:	3718      	adds	r7, #24
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	200001f8 	.word	0x200001f8
 8001424:	200001f9 	.word	0x200001f9

08001428 <NRF24_available>:
//16. Check for available data to read
bool NRF24_available(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 800142c:	2000      	movs	r0, #0
 800142e:	f000 f9bc 	bl	80017aa <NRF24_availablePipe>
 8001432:	4603      	mov	r3, r0
}
 8001434:	4618      	mov	r0, r3
 8001436:	bd80      	pop	{r7, pc}

08001438 <NRF24_openWritingPipe>:
	NRF24_getDynamicPayloadSize();
	return rxStatus;
}
//18. Open Tx pipe for writing (Cannot perform this while Listenning, has to call NRF24_stopListening)
void NRF24_openWritingPipe(uint64_t address)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
 800143e:	e9c7 0100 	strd	r0, r1, [r7]
	NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&address), 5);
 8001442:	463b      	mov	r3, r7
 8001444:	2205      	movs	r2, #5
 8001446:	4619      	mov	r1, r3
 8001448:	200a      	movs	r0, #10
 800144a:	f7ff fe4f 	bl	80010ec <NRF24_write_registerN>
  NRF24_write_registerN(REG_TX_ADDR, (uint8_t *)(&address), 5);
 800144e:	463b      	mov	r3, r7
 8001450:	2205      	movs	r2, #5
 8001452:	4619      	mov	r1, r3
 8001454:	2010      	movs	r0, #16
 8001456:	f7ff fe49 	bl	80010ec <NRF24_write_registerN>

	const uint8_t max_payload_size = 32;
 800145a:	2320      	movs	r3, #32
 800145c:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
 800145e:	4b07      	ldr	r3, [pc, #28]	@ (800147c <NRF24_openWritingPipe+0x44>)
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	7bfa      	ldrb	r2, [r7, #15]
 8001464:	4293      	cmp	r3, r2
 8001466:	bf28      	it	cs
 8001468:	4613      	movcs	r3, r2
 800146a:	b2db      	uxtb	r3, r3
 800146c:	4619      	mov	r1, r3
 800146e:	2011      	movs	r0, #17
 8001470:	f7ff fe1a 	bl	80010a8 <NRF24_write_register>
}
 8001474:	bf00      	nop
 8001476:	3710      	adds	r7, #16
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	200001fa 	.word	0x200001fa

08001480 <NRF24_setRetries>:
	}

}
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	4603      	mov	r3, r0
 8001488:	460a      	mov	r2, r1
 800148a:	71fb      	strb	r3, [r7, #7]
 800148c:	4613      	mov	r3, r2
 800148e:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8001490:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001494:	011b      	lsls	r3, r3, #4
 8001496:	b25a      	sxtb	r2, r3
 8001498:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800149c:	f003 030f 	and.w	r3, r3, #15
 80014a0:	b25b      	sxtb	r3, r3
 80014a2:	4313      	orrs	r3, r2
 80014a4:	b25b      	sxtb	r3, r3
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	4619      	mov	r1, r3
 80014aa:	2004      	movs	r0, #4
 80014ac:	f7ff fdfc 	bl	80010a8 <NRF24_write_register>
}
 80014b0:	bf00      	nop
 80014b2:	3708      	adds	r7, #8
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
 80014be:	4603      	mov	r3, r0
 80014c0:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 80014c2:	237f      	movs	r3, #127	@ 0x7f
 80014c4:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 80014c6:	7bfa      	ldrb	r2, [r7, #15]
 80014c8:	79fb      	ldrb	r3, [r7, #7]
 80014ca:	4293      	cmp	r3, r2
 80014cc:	bf28      	it	cs
 80014ce:	4613      	movcs	r3, r2
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	4619      	mov	r1, r3
 80014d4:	2005      	movs	r0, #5
 80014d6:	f7ff fde7 	bl	80010a8 <NRF24_write_register>
}
 80014da:	bf00      	nop
 80014dc:	3710      	adds	r7, #16
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
	...

080014e4 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b085      	sub	sp, #20
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	4603      	mov	r3, r0
 80014ec:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 80014ee:	2320      	movs	r3, #32
 80014f0:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 80014f2:	7bfa      	ldrb	r2, [r7, #15]
 80014f4:	79fb      	ldrb	r3, [r7, #7]
 80014f6:	4293      	cmp	r3, r2
 80014f8:	bf28      	it	cs
 80014fa:	4613      	movcs	r3, r2
 80014fc:	b2da      	uxtb	r2, r3
 80014fe:	4b04      	ldr	r3, [pc, #16]	@ (8001510 <NRF24_setPayloadSize+0x2c>)
 8001500:	701a      	strb	r2, [r3, #0]
}
 8001502:	bf00      	nop
 8001504:	3714      	adds	r7, #20
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	200001fa 	.word	0x200001fa

08001514 <NRF24_getDynamicPayloadSize>:
{
	return payload_size;
}
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 8001518:	2060      	movs	r0, #96	@ 0x60
 800151a:	f7ff fd75 	bl	8001008 <NRF24_read_register>
 800151e:	4603      	mov	r3, r0
}
 8001520:	4618      	mov	r0, r3
 8001522:	bd80      	pop	{r7, pc}

08001524 <NRF24_enableAckPayload>:
//25. Enable payload on Ackknowledge packet
void NRF24_enableAckPayload(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
	//Need to enable dynamic payload and Ack payload together
	 NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 8001528:	201d      	movs	r0, #29
 800152a:	f7ff fd6d 	bl	8001008 <NRF24_read_register>
 800152e:	4603      	mov	r3, r0
 8001530:	f043 0306 	orr.w	r3, r3, #6
 8001534:	b2db      	uxtb	r3, r3
 8001536:	4619      	mov	r1, r3
 8001538:	201d      	movs	r0, #29
 800153a:	f7ff fdb5 	bl	80010a8 <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 800153e:	201d      	movs	r0, #29
 8001540:	f7ff fd62 	bl	8001008 <NRF24_read_register>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d10c      	bne.n	8001564 <NRF24_enableAckPayload+0x40>
	{
		NRF24_ACTIVATE_cmd();
 800154a:	f000 f9c9 	bl	80018e0 <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 800154e:	201d      	movs	r0, #29
 8001550:	f7ff fd5a 	bl	8001008 <NRF24_read_register>
 8001554:	4603      	mov	r3, r0
 8001556:	f043 0306 	orr.w	r3, r3, #6
 800155a:	b2db      	uxtb	r3, r3
 800155c:	4619      	mov	r1, r3
 800155e:	201d      	movs	r0, #29
 8001560:	f7ff fda2 	bl	80010a8 <NRF24_write_register>
	}
	// Enable dynamic payload on pipes 0 & 1
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 8001564:	201c      	movs	r0, #28
 8001566:	f7ff fd4f 	bl	8001008 <NRF24_read_register>
 800156a:	4603      	mov	r3, r0
 800156c:	f043 0303 	orr.w	r3, r3, #3
 8001570:	b2db      	uxtb	r3, r3
 8001572:	4619      	mov	r1, r3
 8001574:	201c      	movs	r0, #28
 8001576:	f7ff fd97 	bl	80010a8 <NRF24_write_register>
}
 800157a:	bf00      	nop
 800157c:	bd80      	pop	{r7, pc}
	...

08001580 <NRF24_enableDynamicPayloads>:
//26. Enable dynamic payloads
void NRF24_enableDynamicPayloads(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
	//Enable dynamic payload through FEATURE register
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 8001584:	201d      	movs	r0, #29
 8001586:	f7ff fd3f 	bl	8001008 <NRF24_read_register>
 800158a:	4603      	mov	r3, r0
 800158c:	f043 0304 	orr.w	r3, r3, #4
 8001590:	b2db      	uxtb	r3, r3
 8001592:	4619      	mov	r1, r3
 8001594:	201d      	movs	r0, #29
 8001596:	f7ff fd87 	bl	80010a8 <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 800159a:	201d      	movs	r0, #29
 800159c:	f7ff fd34 	bl	8001008 <NRF24_read_register>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d10c      	bne.n	80015c0 <NRF24_enableDynamicPayloads+0x40>
	{
		NRF24_ACTIVATE_cmd();
 80015a6:	f000 f99b 	bl	80018e0 <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 80015aa:	201d      	movs	r0, #29
 80015ac:	f7ff fd2c 	bl	8001008 <NRF24_read_register>
 80015b0:	4603      	mov	r3, r0
 80015b2:	f043 0304 	orr.w	r3, r3, #4
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	4619      	mov	r1, r3
 80015ba:	201d      	movs	r0, #29
 80015bc:	f7ff fd74 	bl	80010a8 <NRF24_write_register>
	}
	//Enable Dynamic payload on all pipes
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 80015c0:	201c      	movs	r0, #28
 80015c2:	f7ff fd21 	bl	8001008 <NRF24_read_register>
 80015c6:	4603      	mov	r3, r0
 80015c8:	f043 033f 	orr.w	r3, r3, #63	@ 0x3f
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	4619      	mov	r1, r3
 80015d0:	201c      	movs	r0, #28
 80015d2:	f7ff fd69 	bl	80010a8 <NRF24_write_register>
  dynamic_payloads_enabled = true;
 80015d6:	4b02      	ldr	r3, [pc, #8]	@ (80015e0 <NRF24_enableDynamicPayloads+0x60>)
 80015d8:	2201      	movs	r2, #1
 80015da:	701a      	strb	r2, [r3, #0]

}
 80015dc:	bf00      	nop
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	200001fb 	.word	0x200001fb

080015e4 <NRF24_disableDynamicPayloads>:
void NRF24_disableDynamicPayloads(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 80015e8:	201d      	movs	r0, #29
 80015ea:	f7ff fd0d 	bl	8001008 <NRF24_read_register>
 80015ee:	4603      	mov	r3, r0
 80015f0:	f023 0304 	bic.w	r3, r3, #4
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	4619      	mov	r1, r3
 80015f8:	201d      	movs	r0, #29
 80015fa:	f7ff fd55 	bl	80010a8 <NRF24_write_register>
	//Disable for all pipes
	NRF24_write_register(REG_DYNPD,0);
 80015fe:	2100      	movs	r1, #0
 8001600:	201c      	movs	r0, #28
 8001602:	f7ff fd51 	bl	80010a8 <NRF24_write_register>
	dynamic_payloads_enabled = false;
 8001606:	4b02      	ldr	r3, [pc, #8]	@ (8001610 <NRF24_disableDynamicPayloads+0x2c>)
 8001608:	2200      	movs	r2, #0
 800160a:	701a      	strb	r2, [r3, #0]
}
 800160c:	bf00      	nop
 800160e:	bd80      	pop	{r7, pc}
 8001610:	200001fb 	.word	0x200001fb

08001614 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	4603      	mov	r3, r0
 800161c:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 800161e:	79fb      	ldrb	r3, [r7, #7]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d004      	beq.n	800162e <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8001624:	213f      	movs	r1, #63	@ 0x3f
 8001626:	2001      	movs	r0, #1
 8001628:	f7ff fd3e 	bl	80010a8 <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 800162c:	e003      	b.n	8001636 <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 800162e:	2100      	movs	r1, #0
 8001630:	2001      	movs	r0, #1
 8001632:	f7ff fd39 	bl	80010a8 <NRF24_write_register>
}
 8001636:	bf00      	nop
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}

0800163e <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 800163e:	b580      	push	{r7, lr}
 8001640:	b084      	sub	sp, #16
 8001642:	af00      	add	r7, sp, #0
 8001644:	4603      	mov	r3, r0
 8001646:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8001648:	2006      	movs	r0, #6
 800164a:	f7ff fcdd 	bl	8001008 <NRF24_read_register>
 800164e:	4603      	mov	r3, r0
 8001650:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8001652:	7bfb      	ldrb	r3, [r7, #15]
 8001654:	f023 0306 	bic.w	r3, r3, #6
 8001658:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 800165a:	79fb      	ldrb	r3, [r7, #7]
 800165c:	2b03      	cmp	r3, #3
 800165e:	d104      	bne.n	800166a <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8001660:	7bfb      	ldrb	r3, [r7, #15]
 8001662:	f043 0306 	orr.w	r3, r3, #6
 8001666:	73fb      	strb	r3, [r7, #15]
 8001668:	e019      	b.n	800169e <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 800166a:	79fb      	ldrb	r3, [r7, #7]
 800166c:	2b02      	cmp	r3, #2
 800166e:	d104      	bne.n	800167a <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 8001670:	7bfb      	ldrb	r3, [r7, #15]
 8001672:	f043 0304 	orr.w	r3, r3, #4
 8001676:	73fb      	strb	r3, [r7, #15]
 8001678:	e011      	b.n	800169e <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 800167a:	79fb      	ldrb	r3, [r7, #7]
 800167c:	2b01      	cmp	r3, #1
 800167e:	d104      	bne.n	800168a <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 8001680:	7bfb      	ldrb	r3, [r7, #15]
 8001682:	f043 0302 	orr.w	r3, r3, #2
 8001686:	73fb      	strb	r3, [r7, #15]
 8001688:	e009      	b.n	800169e <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 800168a:	79fb      	ldrb	r3, [r7, #7]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d006      	beq.n	800169e <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 8001690:	79fb      	ldrb	r3, [r7, #7]
 8001692:	2b04      	cmp	r3, #4
 8001694:	d103      	bne.n	800169e <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8001696:	7bfb      	ldrb	r3, [r7, #15]
 8001698:	f043 0306 	orr.w	r3, r3, #6
 800169c:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 800169e:	7bfb      	ldrb	r3, [r7, #15]
 80016a0:	4619      	mov	r1, r3
 80016a2:	2006      	movs	r0, #6
 80016a4:	f7ff fd00 	bl	80010a8 <NRF24_write_register>
}
 80016a8:	bf00      	nop
 80016aa:	3710      	adds	r7, #16
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	4603      	mov	r3, r0
 80016b8:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 80016ba:	2300      	movs	r3, #0
 80016bc:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 80016be:	2006      	movs	r0, #6
 80016c0:	f7ff fca2 	bl	8001008 <NRF24_read_register>
 80016c4:	4603      	mov	r3, r0
 80016c6:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 80016c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001738 <NRF24_setDataRate+0x88>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 80016ce:	7bbb      	ldrb	r3, [r7, #14]
 80016d0:	f023 0328 	bic.w	r3, r3, #40	@ 0x28
 80016d4:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 80016d6:	79fb      	ldrb	r3, [r7, #7]
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d107      	bne.n	80016ec <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 80016dc:	4b16      	ldr	r3, [pc, #88]	@ (8001738 <NRF24_setDataRate+0x88>)
 80016de:	2200      	movs	r2, #0
 80016e0:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 80016e2:	7bbb      	ldrb	r3, [r7, #14]
 80016e4:	f043 0320 	orr.w	r3, r3, #32
 80016e8:	73bb      	strb	r3, [r7, #14]
 80016ea:	e00d      	b.n	8001708 <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 80016ec:	79fb      	ldrb	r3, [r7, #7]
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d107      	bne.n	8001702 <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 80016f2:	4b11      	ldr	r3, [pc, #68]	@ (8001738 <NRF24_setDataRate+0x88>)
 80016f4:	2201      	movs	r2, #1
 80016f6:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 80016f8:	7bbb      	ldrb	r3, [r7, #14]
 80016fa:	f043 0308 	orr.w	r3, r3, #8
 80016fe:	73bb      	strb	r3, [r7, #14]
 8001700:	e002      	b.n	8001708 <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 8001702:	4b0d      	ldr	r3, [pc, #52]	@ (8001738 <NRF24_setDataRate+0x88>)
 8001704:	2200      	movs	r2, #0
 8001706:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8001708:	7bbb      	ldrb	r3, [r7, #14]
 800170a:	4619      	mov	r1, r3
 800170c:	2006      	movs	r0, #6
 800170e:	f7ff fccb 	bl	80010a8 <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8001712:	2006      	movs	r0, #6
 8001714:	f7ff fc78 	bl	8001008 <NRF24_read_register>
 8001718:	4603      	mov	r3, r0
 800171a:	461a      	mov	r2, r3
 800171c:	7bbb      	ldrb	r3, [r7, #14]
 800171e:	4293      	cmp	r3, r2
 8001720:	d102      	bne.n	8001728 <NRF24_setDataRate+0x78>
  {
    result = true;
 8001722:	2301      	movs	r3, #1
 8001724:	73fb      	strb	r3, [r7, #15]
 8001726:	e002      	b.n	800172e <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 8001728:	4b03      	ldr	r3, [pc, #12]	@ (8001738 <NRF24_setDataRate+0x88>)
 800172a:	2200      	movs	r2, #0
 800172c:	701a      	strb	r2, [r3, #0]
  }

  return result;
 800172e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001730:	4618      	mov	r0, r3
 8001732:	3710      	adds	r7, #16
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	200001fc 	.word	0x200001fc

0800173c <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	4603      	mov	r3, r0
 8001744:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8001746:	2000      	movs	r0, #0
 8001748:	f7ff fc5e 	bl	8001008 <NRF24_read_register>
 800174c:	4603      	mov	r3, r0
 800174e:	f023 030c 	bic.w	r3, r3, #12
 8001752:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8001754:	79fb      	ldrb	r3, [r7, #7]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d00f      	beq.n	800177a <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above.
  }
  else if ( length == RF24_CRC_8 )
 800175a:	79fb      	ldrb	r3, [r7, #7]
 800175c:	2b01      	cmp	r3, #1
 800175e:	d104      	bne.n	800176a <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 8001760:	7bfb      	ldrb	r3, [r7, #15]
 8001762:	f043 0308 	orr.w	r3, r3, #8
 8001766:	73fb      	strb	r3, [r7, #15]
 8001768:	e007      	b.n	800177a <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 800176a:	7bfb      	ldrb	r3, [r7, #15]
 800176c:	f043 0308 	orr.w	r3, r3, #8
 8001770:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 8001772:	7bfb      	ldrb	r3, [r7, #15]
 8001774:	f043 0304 	orr.w	r3, r3, #4
 8001778:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 800177a:	7bfb      	ldrb	r3, [r7, #15]
 800177c:	4619      	mov	r1, r3
 800177e:	2000      	movs	r0, #0
 8001780:	f7ff fc92 	bl	80010a8 <NRF24_write_register>
}
 8001784:	bf00      	nop
 8001786:	3710      	adds	r7, #16
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}

0800178c <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8001790:	2000      	movs	r0, #0
 8001792:	f7ff fc39 	bl	8001008 <NRF24_read_register>
 8001796:	4603      	mov	r3, r0
 8001798:	f023 0302 	bic.w	r3, r3, #2
 800179c:	b2db      	uxtb	r3, r3
 800179e:	4619      	mov	r1, r3
 80017a0:	2000      	movs	r0, #0
 80017a2:	f7ff fc81 	bl	80010a8 <NRF24_write_register>
}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}

080017aa <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 80017aa:	b580      	push	{r7, lr}
 80017ac:	b084      	sub	sp, #16
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 80017b2:	f7ff fcf5 	bl	80011a0 <NRF24_get_status>
 80017b6:	4603      	mov	r3, r0
 80017b8:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 80017ba:	7bfb      	ldrb	r3, [r7, #15]
 80017bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	bf14      	ite	ne
 80017c4:	2301      	movne	r3, #1
 80017c6:	2300      	moveq	r3, #0
 80017c8:	73bb      	strb	r3, [r7, #14]

  if (result)
 80017ca:	7bbb      	ldrb	r3, [r7, #14]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d017      	beq.n	8001800 <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d007      	beq.n	80017e6 <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 80017d6:	7bfb      	ldrb	r3, [r7, #15]
 80017d8:	085b      	lsrs	r3, r3, #1
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	f003 0307 	and.w	r3, r3, #7
 80017e0:	b2da      	uxtb	r2, r3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 80017e6:	2140      	movs	r1, #64	@ 0x40
 80017e8:	2007      	movs	r0, #7
 80017ea:	f7ff fc5d 	bl	80010a8 <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 80017ee:	7bfb      	ldrb	r3, [r7, #15]
 80017f0:	f003 0320 	and.w	r3, r3, #32
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d003      	beq.n	8001800 <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 80017f8:	2120      	movs	r1, #32
 80017fa:	2007      	movs	r0, #7
 80017fc:	f7ff fc54 	bl	80010a8 <NRF24_write_register>
    }
  }
  return result;
 8001800:	7bbb      	ldrb	r3, [r7, #14]
}
 8001802:	4618      	mov	r0, r3
 8001804:	3710      	adds	r7, #16
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}

0800180a <NRF24_startWrite>:
//40. Start write (for IRQ mode)
void NRF24_startWrite( const void* buf, uint8_t len )
{
 800180a:	b580      	push	{r7, lr}
 800180c:	b082      	sub	sp, #8
 800180e:	af00      	add	r7, sp, #0
 8001810:	6078      	str	r0, [r7, #4]
 8001812:	460b      	mov	r3, r1
 8001814:	70fb      	strb	r3, [r7, #3]
  // Transmitter power-up
  NRF24_ce(0);
 8001816:	2000      	movs	r0, #0
 8001818:	f7ff fbd6 	bl	8000fc8 <NRF24_ce>
  NRF24_write_register(REG_CONFIG, ( NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP) ) & ~_BV(BIT_PRIM_RX) );
 800181c:	2000      	movs	r0, #0
 800181e:	f7ff fbf3 	bl	8001008 <NRF24_read_register>
 8001822:	4603      	mov	r3, r0
 8001824:	f043 0302 	orr.w	r3, r3, #2
 8001828:	b2db      	uxtb	r3, r3
 800182a:	f023 0301 	bic.w	r3, r3, #1
 800182e:	b2db      	uxtb	r3, r3
 8001830:	4619      	mov	r1, r3
 8001832:	2000      	movs	r0, #0
 8001834:	f7ff fc38 	bl	80010a8 <NRF24_write_register>
  NRF24_ce(1);
 8001838:	2001      	movs	r0, #1
 800183a:	f7ff fbc5 	bl	8000fc8 <NRF24_ce>
  NRF24_DelayMicroSeconds(150);
 800183e:	2096      	movs	r0, #150	@ 0x96
 8001840:	f7ff fb80 	bl	8000f44 <NRF24_DelayMicroSeconds>

  // Send the payload
  NRF24_write_payload( buf, len );
 8001844:	78fb      	ldrb	r3, [r7, #3]
 8001846:	4619      	mov	r1, r3
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f7ff fc77 	bl	800113c <NRF24_write_payload>

  // Enable Tx for 15usec
  NRF24_ce(1);
 800184e:	2001      	movs	r0, #1
 8001850:	f7ff fbba 	bl	8000fc8 <NRF24_ce>
  NRF24_DelayMicroSeconds(15);
 8001854:	200f      	movs	r0, #15
 8001856:	f7ff fb75 	bl	8000f44 <NRF24_DelayMicroSeconds>
  NRF24_ce(0);
 800185a:	2000      	movs	r0, #0
 800185c:	f7ff fbb4 	bl	8000fc8 <NRF24_ce>
}
 8001860:	bf00      	nop
 8001862:	3708      	adds	r7, #8
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}

08001868 <NRF24_whatHappened>:
  ack_payload_available = false;
  return result;
}
//43. Check interrupt flags
void NRF24_whatHappened(bool *tx_ok,bool *tx_fail,bool *rx_ready)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b086      	sub	sp, #24
 800186c:	af00      	add	r7, sp, #0
 800186e:	60f8      	str	r0, [r7, #12]
 8001870:	60b9      	str	r1, [r7, #8]
 8001872:	607a      	str	r2, [r7, #4]
	uint8_t status = NRF24_get_status();
 8001874:	f7ff fc94 	bl	80011a0 <NRF24_get_status>
 8001878:	4603      	mov	r3, r0
 800187a:	75fb      	strb	r3, [r7, #23]
	*tx_ok = 0;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	2200      	movs	r2, #0
 8001880:	701a      	strb	r2, [r3, #0]
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8001882:	2170      	movs	r1, #112	@ 0x70
 8001884:	2007      	movs	r0, #7
 8001886:	f7ff fc0f 	bl	80010a8 <NRF24_write_register>
  // Report to the user what happened
  *tx_ok = status & _BV(BIT_TX_DS);
 800188a:	7dfb      	ldrb	r3, [r7, #23]
 800188c:	f003 0320 	and.w	r3, r3, #32
 8001890:	2b00      	cmp	r3, #0
 8001892:	bf14      	ite	ne
 8001894:	2301      	movne	r3, #1
 8001896:	2300      	moveq	r3, #0
 8001898:	b2da      	uxtb	r2, r3
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	701a      	strb	r2, [r3, #0]
  *tx_fail = status & _BV(BIT_MAX_RT);
 800189e:	7dfb      	ldrb	r3, [r7, #23]
 80018a0:	f003 0310 	and.w	r3, r3, #16
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	bf14      	ite	ne
 80018a8:	2301      	movne	r3, #1
 80018aa:	2300      	moveq	r3, #0
 80018ac:	b2da      	uxtb	r2, r3
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	701a      	strb	r2, [r3, #0]
  *rx_ready = status & _BV(BIT_RX_DR);
 80018b2:	7dfb      	ldrb	r3, [r7, #23]
 80018b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	bf14      	ite	ne
 80018bc:	2301      	movne	r3, #1
 80018be:	2300      	moveq	r3, #0
 80018c0:	b2da      	uxtb	r2, r3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	701a      	strb	r2, [r3, #0]
}
 80018c6:	bf00      	nop
 80018c8:	3718      	adds	r7, #24
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}

080018ce <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 80018ce:	b580      	push	{r7, lr}
 80018d0:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 80018d2:	2170      	movs	r1, #112	@ 0x70
 80018d4:	2007      	movs	r0, #7
 80018d6:	f7ff fbe7 	bl	80010a8 <NRF24_write_register>
}
 80018da:	bf00      	nop
 80018dc:	bd80      	pop	{r7, pc}
	...

080018e0 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 80018e6:	2000      	movs	r0, #0
 80018e8:	f7ff fb4e 	bl	8000f88 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 80018ec:	2350      	movs	r3, #80	@ 0x50
 80018ee:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 80018f0:	2373      	movs	r3, #115	@ 0x73
 80018f2:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 80018f4:	1d39      	adds	r1, r7, #4
 80018f6:	2364      	movs	r3, #100	@ 0x64
 80018f8:	2202      	movs	r2, #2
 80018fa:	4805      	ldr	r0, [pc, #20]	@ (8001910 <NRF24_ACTIVATE_cmd+0x30>)
 80018fc:	f005 ffbe 	bl	800787c <HAL_SPI_Transmit>
	NRF24_csn(1);
 8001900:	2001      	movs	r0, #1
 8001902:	f7ff fb41 	bl	8000f88 <NRF24_csn>
}
 8001906:	bf00      	nop
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	2000020c 	.word	0x2000020c

08001914 <printRadioSettings>:
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
}
*/

void printRadioSettings(void)
{
 8001914:	b5b0      	push	{r4, r5, r7, lr}
 8001916:	b08c      	sub	sp, #48	@ 0x30
 8001918:	af04      	add	r7, sp, #16
    uint8_t reg8Val;
    uint8_t pipeAddrs[6];

    printf("\r\n**********************************************\r\n");
 800191a:	48a0      	ldr	r0, [pc, #640]	@ (8001b9c <printRadioSettings+0x288>)
 800191c:	f008 f8fe 	bl	8009b1c <puts>

    // a) CRC settings - Config Register
    reg8Val = NRF24_read_register(0x00);
 8001920:	2000      	movs	r0, #0
 8001922:	f7ff fb71 	bl	8001008 <NRF24_read_register>
 8001926:	4603      	mov	r3, r0
 8001928:	75fb      	strb	r3, [r7, #23]
    if (reg8Val & (1 << 3)) {
 800192a:	7dfb      	ldrb	r3, [r7, #23]
 800192c:	f003 0308 	and.w	r3, r3, #8
 8001930:	2b00      	cmp	r3, #0
 8001932:	d00c      	beq.n	800194e <printRadioSettings+0x3a>
        if (reg8Val & (1 << 2)) printf("CRC:\r\n\t\tEnabled, 2 Bytes\r\n");
 8001934:	7dfb      	ldrb	r3, [r7, #23]
 8001936:	f003 0304 	and.w	r3, r3, #4
 800193a:	2b00      	cmp	r3, #0
 800193c:	d003      	beq.n	8001946 <printRadioSettings+0x32>
 800193e:	4898      	ldr	r0, [pc, #608]	@ (8001ba0 <printRadioSettings+0x28c>)
 8001940:	f008 f8ec 	bl	8009b1c <puts>
 8001944:	e006      	b.n	8001954 <printRadioSettings+0x40>
        else printf("CRC:\r\n\t\tEnabled, 1 Byte\r\n");
 8001946:	4897      	ldr	r0, [pc, #604]	@ (8001ba4 <printRadioSettings+0x290>)
 8001948:	f008 f8e8 	bl	8009b1c <puts>
 800194c:	e002      	b.n	8001954 <printRadioSettings+0x40>
    } else {
        printf("CRC:\r\n\t\tDisabled\r\n");
 800194e:	4896      	ldr	r0, [pc, #600]	@ (8001ba8 <printRadioSettings+0x294>)
 8001950:	f008 f8e4 	bl	8009b1c <puts>
    }

    // b) AutoAck on pipes
    reg8Val = NRF24_read_register(0x01);
 8001954:	2001      	movs	r0, #1
 8001956:	f7ff fb57 	bl	8001008 <NRF24_read_register>
 800195a:	4603      	mov	r3, r0
 800195c:	75fb      	strb	r3, [r7, #23]
    printf("ENAA:\r\n\t\tP0: %d\r\n\t\tP1: %d\r\n\t\tP2: %d\r\n\t\tP3: %d\r\n\t\tP4: %d\r\n\t\tP5: %d\r\n",
           _BOOL(reg8Val & (1 << 0)), _BOOL(reg8Val & (1 << 1)), _BOOL(reg8Val & (1 << 2)),
 800195e:	7dfb      	ldrb	r3, [r7, #23]
 8001960:	f003 0301 	and.w	r3, r3, #1
    printf("ENAA:\r\n\t\tP0: %d\r\n\t\tP1: %d\r\n\t\tP2: %d\r\n\t\tP3: %d\r\n\t\tP4: %d\r\n\t\tP5: %d\r\n",
 8001964:	2b00      	cmp	r3, #0
 8001966:	bfcc      	ite	gt
 8001968:	2301      	movgt	r3, #1
 800196a:	2300      	movle	r3, #0
 800196c:	b2db      	uxtb	r3, r3
 800196e:	4618      	mov	r0, r3
           _BOOL(reg8Val & (1 << 0)), _BOOL(reg8Val & (1 << 1)), _BOOL(reg8Val & (1 << 2)),
 8001970:	7dfb      	ldrb	r3, [r7, #23]
 8001972:	f003 0302 	and.w	r3, r3, #2
    printf("ENAA:\r\n\t\tP0: %d\r\n\t\tP1: %d\r\n\t\tP2: %d\r\n\t\tP3: %d\r\n\t\tP4: %d\r\n\t\tP5: %d\r\n",
 8001976:	2b00      	cmp	r3, #0
 8001978:	bfcc      	ite	gt
 800197a:	2301      	movgt	r3, #1
 800197c:	2300      	movle	r3, #0
 800197e:	b2db      	uxtb	r3, r3
 8001980:	461c      	mov	r4, r3
           _BOOL(reg8Val & (1 << 0)), _BOOL(reg8Val & (1 << 1)), _BOOL(reg8Val & (1 << 2)),
 8001982:	7dfb      	ldrb	r3, [r7, #23]
 8001984:	f003 0304 	and.w	r3, r3, #4
    printf("ENAA:\r\n\t\tP0: %d\r\n\t\tP1: %d\r\n\t\tP2: %d\r\n\t\tP3: %d\r\n\t\tP4: %d\r\n\t\tP5: %d\r\n",
 8001988:	2b00      	cmp	r3, #0
 800198a:	bfcc      	ite	gt
 800198c:	2301      	movgt	r3, #1
 800198e:	2300      	movle	r3, #0
 8001990:	b2db      	uxtb	r3, r3
 8001992:	461d      	mov	r5, r3
           _BOOL(reg8Val & (1 << 3)), _BOOL(reg8Val & (1 << 4)), _BOOL(reg8Val & (1 << 5)));
 8001994:	7dfb      	ldrb	r3, [r7, #23]
 8001996:	f003 0308 	and.w	r3, r3, #8
    printf("ENAA:\r\n\t\tP0: %d\r\n\t\tP1: %d\r\n\t\tP2: %d\r\n\t\tP3: %d\r\n\t\tP4: %d\r\n\t\tP5: %d\r\n",
 800199a:	2b00      	cmp	r3, #0
 800199c:	bfcc      	ite	gt
 800199e:	2301      	movgt	r3, #1
 80019a0:	2300      	movle	r3, #0
 80019a2:	b2db      	uxtb	r3, r3
 80019a4:	461a      	mov	r2, r3
           _BOOL(reg8Val & (1 << 3)), _BOOL(reg8Val & (1 << 4)), _BOOL(reg8Val & (1 << 5)));
 80019a6:	7dfb      	ldrb	r3, [r7, #23]
 80019a8:	f003 0310 	and.w	r3, r3, #16
    printf("ENAA:\r\n\t\tP0: %d\r\n\t\tP1: %d\r\n\t\tP2: %d\r\n\t\tP3: %d\r\n\t\tP4: %d\r\n\t\tP5: %d\r\n",
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	bfcc      	ite	gt
 80019b0:	2301      	movgt	r3, #1
 80019b2:	2300      	movle	r3, #0
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	4619      	mov	r1, r3
           _BOOL(reg8Val & (1 << 3)), _BOOL(reg8Val & (1 << 4)), _BOOL(reg8Val & (1 << 5)));
 80019b8:	7dfb      	ldrb	r3, [r7, #23]
 80019ba:	f003 0320 	and.w	r3, r3, #32
    printf("ENAA:\r\n\t\tP0: %d\r\n\t\tP1: %d\r\n\t\tP2: %d\r\n\t\tP3: %d\r\n\t\tP4: %d\r\n\t\tP5: %d\r\n",
 80019be:	2b00      	cmp	r3, #0
 80019c0:	bfcc      	ite	gt
 80019c2:	2301      	movgt	r3, #1
 80019c4:	2300      	movle	r3, #0
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	9302      	str	r3, [sp, #8]
 80019ca:	9101      	str	r1, [sp, #4]
 80019cc:	9200      	str	r2, [sp, #0]
 80019ce:	462b      	mov	r3, r5
 80019d0:	4622      	mov	r2, r4
 80019d2:	4601      	mov	r1, r0
 80019d4:	4875      	ldr	r0, [pc, #468]	@ (8001bac <printRadioSettings+0x298>)
 80019d6:	f008 f839 	bl	8009a4c <iprintf>

    // c) Enabled Rx addresses
    reg8Val = NRF24_read_register(0x02);
 80019da:	2002      	movs	r0, #2
 80019dc:	f7ff fb14 	bl	8001008 <NRF24_read_register>
 80019e0:	4603      	mov	r3, r0
 80019e2:	75fb      	strb	r3, [r7, #23]
    printf("EN_RXADDR:\r\n\t\tP0: %d\r\n\t\tP1: %d\r\n\t\tP2: %d\r\n\t\tP3: %d\r\n\t\tP4: %d\r\n\t\tP5: %d\r\n",
           _BOOL(reg8Val & (1 << 0)), _BOOL(reg8Val & (1 << 1)), _BOOL(reg8Val & (1 << 2)),
 80019e4:	7dfb      	ldrb	r3, [r7, #23]
 80019e6:	f003 0301 	and.w	r3, r3, #1
    printf("EN_RXADDR:\r\n\t\tP0: %d\r\n\t\tP1: %d\r\n\t\tP2: %d\r\n\t\tP3: %d\r\n\t\tP4: %d\r\n\t\tP5: %d\r\n",
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	bfcc      	ite	gt
 80019ee:	2301      	movgt	r3, #1
 80019f0:	2300      	movle	r3, #0
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	4618      	mov	r0, r3
           _BOOL(reg8Val & (1 << 0)), _BOOL(reg8Val & (1 << 1)), _BOOL(reg8Val & (1 << 2)),
 80019f6:	7dfb      	ldrb	r3, [r7, #23]
 80019f8:	f003 0302 	and.w	r3, r3, #2
    printf("EN_RXADDR:\r\n\t\tP0: %d\r\n\t\tP1: %d\r\n\t\tP2: %d\r\n\t\tP3: %d\r\n\t\tP4: %d\r\n\t\tP5: %d\r\n",
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	bfcc      	ite	gt
 8001a00:	2301      	movgt	r3, #1
 8001a02:	2300      	movle	r3, #0
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	461c      	mov	r4, r3
           _BOOL(reg8Val & (1 << 0)), _BOOL(reg8Val & (1 << 1)), _BOOL(reg8Val & (1 << 2)),
 8001a08:	7dfb      	ldrb	r3, [r7, #23]
 8001a0a:	f003 0304 	and.w	r3, r3, #4
    printf("EN_RXADDR:\r\n\t\tP0: %d\r\n\t\tP1: %d\r\n\t\tP2: %d\r\n\t\tP3: %d\r\n\t\tP4: %d\r\n\t\tP5: %d\r\n",
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	bfcc      	ite	gt
 8001a12:	2301      	movgt	r3, #1
 8001a14:	2300      	movle	r3, #0
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	461d      	mov	r5, r3
           _BOOL(reg8Val & (1 << 3)), _BOOL(reg8Val & (1 << 4)), _BOOL(reg8Val & (1 << 5)));
 8001a1a:	7dfb      	ldrb	r3, [r7, #23]
 8001a1c:	f003 0308 	and.w	r3, r3, #8
    printf("EN_RXADDR:\r\n\t\tP0: %d\r\n\t\tP1: %d\r\n\t\tP2: %d\r\n\t\tP3: %d\r\n\t\tP4: %d\r\n\t\tP5: %d\r\n",
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	bfcc      	ite	gt
 8001a24:	2301      	movgt	r3, #1
 8001a26:	2300      	movle	r3, #0
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	461a      	mov	r2, r3
           _BOOL(reg8Val & (1 << 3)), _BOOL(reg8Val & (1 << 4)), _BOOL(reg8Val & (1 << 5)));
 8001a2c:	7dfb      	ldrb	r3, [r7, #23]
 8001a2e:	f003 0310 	and.w	r3, r3, #16
    printf("EN_RXADDR:\r\n\t\tP0: %d\r\n\t\tP1: %d\r\n\t\tP2: %d\r\n\t\tP3: %d\r\n\t\tP4: %d\r\n\t\tP5: %d\r\n",
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	bfcc      	ite	gt
 8001a36:	2301      	movgt	r3, #1
 8001a38:	2300      	movle	r3, #0
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	4619      	mov	r1, r3
           _BOOL(reg8Val & (1 << 3)), _BOOL(reg8Val & (1 << 4)), _BOOL(reg8Val & (1 << 5)));
 8001a3e:	7dfb      	ldrb	r3, [r7, #23]
 8001a40:	f003 0320 	and.w	r3, r3, #32
    printf("EN_RXADDR:\r\n\t\tP0: %d\r\n\t\tP1: %d\r\n\t\tP2: %d\r\n\t\tP3: %d\r\n\t\tP4: %d\r\n\t\tP5: %d\r\n",
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	bfcc      	ite	gt
 8001a48:	2301      	movgt	r3, #1
 8001a4a:	2300      	movle	r3, #0
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	9302      	str	r3, [sp, #8]
 8001a50:	9101      	str	r1, [sp, #4]
 8001a52:	9200      	str	r2, [sp, #0]
 8001a54:	462b      	mov	r3, r5
 8001a56:	4622      	mov	r2, r4
 8001a58:	4601      	mov	r1, r0
 8001a5a:	4855      	ldr	r0, [pc, #340]	@ (8001bb0 <printRadioSettings+0x29c>)
 8001a5c:	f007 fff6 	bl	8009a4c <iprintf>

    // d) Address width
    reg8Val = (NRF24_read_register(0x03) & 0x03) + 2;
 8001a60:	2003      	movs	r0, #3
 8001a62:	f7ff fad1 	bl	8001008 <NRF24_read_register>
 8001a66:	4603      	mov	r3, r0
 8001a68:	f003 0303 	and.w	r3, r3, #3
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	3302      	adds	r3, #2
 8001a70:	75fb      	strb	r3, [r7, #23]
    printf("SETUP_AW:\r\n\t\t%d bytes\r\n", reg8Val);
 8001a72:	7dfb      	ldrb	r3, [r7, #23]
 8001a74:	4619      	mov	r1, r3
 8001a76:	484f      	ldr	r0, [pc, #316]	@ (8001bb4 <printRadioSettings+0x2a0>)
 8001a78:	f007 ffe8 	bl	8009a4c <iprintf>

    // e) RF channel
    reg8Val = NRF24_read_register(0x05);
 8001a7c:	2005      	movs	r0, #5
 8001a7e:	f7ff fac3 	bl	8001008 <NRF24_read_register>
 8001a82:	4603      	mov	r3, r0
 8001a84:	75fb      	strb	r3, [r7, #23]
    printf("RF_CH:\r\n\t\t%d CH\r\n", reg8Val & 0x7F);
 8001a86:	7dfb      	ldrb	r3, [r7, #23]
 8001a88:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	484a      	ldr	r0, [pc, #296]	@ (8001bb8 <printRadioSettings+0x2a4>)
 8001a90:	f007 ffdc 	bl	8009a4c <iprintf>

    // f) Data rate & RF_PWR
    reg8Val = NRF24_read_register(0x06);
 8001a94:	2006      	movs	r0, #6
 8001a96:	f7ff fab7 	bl	8001008 <NRF24_read_register>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	75fb      	strb	r3, [r7, #23]
    printf("Data Rate:\r\n\t\t%s\r\n", (reg8Val & (1 << 3)) ? "2Mbps" : "1Mbps");
 8001a9e:	7dfb      	ldrb	r3, [r7, #23]
 8001aa0:	f003 0308 	and.w	r3, r3, #8
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d001      	beq.n	8001aac <printRadioSettings+0x198>
 8001aa8:	4b44      	ldr	r3, [pc, #272]	@ (8001bbc <printRadioSettings+0x2a8>)
 8001aaa:	e000      	b.n	8001aae <printRadioSettings+0x19a>
 8001aac:	4b44      	ldr	r3, [pc, #272]	@ (8001bc0 <printRadioSettings+0x2ac>)
 8001aae:	4619      	mov	r1, r3
 8001ab0:	4844      	ldr	r0, [pc, #272]	@ (8001bc4 <printRadioSettings+0x2b0>)
 8001ab2:	f007 ffcb 	bl	8009a4c <iprintf>

    uint8_t rf_pwr = (reg8Val >> 1) & 0x03;
 8001ab6:	7dfb      	ldrb	r3, [r7, #23]
 8001ab8:	085b      	lsrs	r3, r3, #1
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	f003 0303 	and.w	r3, r3, #3
 8001ac0:	75bb      	strb	r3, [r7, #22]
    const char *rf_pwr_str[] = {"-18dB", "-12dB", "-6dB", "0dB"};
 8001ac2:	4b41      	ldr	r3, [pc, #260]	@ (8001bc8 <printRadioSettings+0x2b4>)
 8001ac4:	463c      	mov	r4, r7
 8001ac6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ac8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    printf("RF_PWR:\r\n\t\t%s\r\n", rf_pwr_str[rf_pwr]);
 8001acc:	7dbb      	ldrb	r3, [r7, #22]
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	3320      	adds	r3, #32
 8001ad2:	443b      	add	r3, r7
 8001ad4:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8001ad8:	4619      	mov	r1, r3
 8001ada:	483c      	ldr	r0, [pc, #240]	@ (8001bcc <printRadioSettings+0x2b8>)
 8001adc:	f007 ffb6 	bl	8009a4c <iprintf>

    // g) RX pipes addresses
    NRF24_read_registerN(0x0A, pipeAddrs, 5);
 8001ae0:	f107 0310 	add.w	r3, r7, #16
 8001ae4:	2205      	movs	r2, #5
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	200a      	movs	r0, #10
 8001aea:	f7ff fab5 	bl	8001058 <NRF24_read_registerN>
    printf("RX_Pipe0 Addrs:\r\n\t\t%02X,%02X,%02X,%02X,%02X\r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2], pipeAddrs[1], pipeAddrs[0]);
 8001aee:	7d3b      	ldrb	r3, [r7, #20]
 8001af0:	4619      	mov	r1, r3
 8001af2:	7cfb      	ldrb	r3, [r7, #19]
 8001af4:	4618      	mov	r0, r3
 8001af6:	7cbb      	ldrb	r3, [r7, #18]
 8001af8:	461c      	mov	r4, r3
 8001afa:	7c7b      	ldrb	r3, [r7, #17]
 8001afc:	7c3a      	ldrb	r2, [r7, #16]
 8001afe:	9201      	str	r2, [sp, #4]
 8001b00:	9300      	str	r3, [sp, #0]
 8001b02:	4623      	mov	r3, r4
 8001b04:	4602      	mov	r2, r0
 8001b06:	4832      	ldr	r0, [pc, #200]	@ (8001bd0 <printRadioSettings+0x2bc>)
 8001b08:	f007 ffa0 	bl	8009a4c <iprintf>

    NRF24_read_registerN(0x0B, pipeAddrs, 5);
 8001b0c:	f107 0310 	add.w	r3, r7, #16
 8001b10:	2205      	movs	r2, #5
 8001b12:	4619      	mov	r1, r3
 8001b14:	200b      	movs	r0, #11
 8001b16:	f7ff fa9f 	bl	8001058 <NRF24_read_registerN>
    printf("RX_Pipe1 Addrs:\r\n\t\t%02X,%02X,%02X,%02X,%02X\r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2], pipeAddrs[1], pipeAddrs[0]);
 8001b1a:	7d3b      	ldrb	r3, [r7, #20]
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	7cfb      	ldrb	r3, [r7, #19]
 8001b20:	4618      	mov	r0, r3
 8001b22:	7cbb      	ldrb	r3, [r7, #18]
 8001b24:	461c      	mov	r4, r3
 8001b26:	7c7b      	ldrb	r3, [r7, #17]
 8001b28:	7c3a      	ldrb	r2, [r7, #16]
 8001b2a:	9201      	str	r2, [sp, #4]
 8001b2c:	9300      	str	r3, [sp, #0]
 8001b2e:	4623      	mov	r3, r4
 8001b30:	4602      	mov	r2, r0
 8001b32:	4828      	ldr	r0, [pc, #160]	@ (8001bd4 <printRadioSettings+0x2c0>)
 8001b34:	f007 ff8a 	bl	8009a4c <iprintf>

    for (int i = 2; i <= 5; ++i) {
 8001b38:	2302      	movs	r3, #2
 8001b3a:	61fb      	str	r3, [r7, #28]
 8001b3c:	e012      	b.n	8001b64 <printRadioSettings+0x250>
        NRF24_read_registerN(0x0A + i, pipeAddrs, 1);
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	330a      	adds	r3, #10
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	f107 0110 	add.w	r1, r7, #16
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7ff fa83 	bl	8001058 <NRF24_read_registerN>
        printf("RX_Pipe%d Addrs:\r\n\t\txx,xx,xx,xx,%02X\r\n", i, pipeAddrs[0]);
 8001b52:	7c3b      	ldrb	r3, [r7, #16]
 8001b54:	461a      	mov	r2, r3
 8001b56:	69f9      	ldr	r1, [r7, #28]
 8001b58:	481f      	ldr	r0, [pc, #124]	@ (8001bd8 <printRadioSettings+0x2c4>)
 8001b5a:	f007 ff77 	bl	8009a4c <iprintf>
    for (int i = 2; i <= 5; ++i) {
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	3301      	adds	r3, #1
 8001b62:	61fb      	str	r3, [r7, #28]
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	2b05      	cmp	r3, #5
 8001b68:	dde9      	ble.n	8001b3e <printRadioSettings+0x22a>
    }

    NRF24_read_registerN(0x10, pipeAddrs, 5);
 8001b6a:	f107 0310 	add.w	r3, r7, #16
 8001b6e:	2205      	movs	r2, #5
 8001b70:	4619      	mov	r1, r3
 8001b72:	2010      	movs	r0, #16
 8001b74:	f7ff fa70 	bl	8001058 <NRF24_read_registerN>
    printf("TX Addrs:\r\n\t\t%02X,%02X,%02X,%02X,%02X\r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2], pipeAddrs[1], pipeAddrs[0]);
 8001b78:	7d3b      	ldrb	r3, [r7, #20]
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	7cfb      	ldrb	r3, [r7, #19]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	7cbb      	ldrb	r3, [r7, #18]
 8001b82:	461c      	mov	r4, r3
 8001b84:	7c7b      	ldrb	r3, [r7, #17]
 8001b86:	7c3a      	ldrb	r2, [r7, #16]
 8001b88:	9201      	str	r2, [sp, #4]
 8001b8a:	9300      	str	r3, [sp, #0]
 8001b8c:	4623      	mov	r3, r4
 8001b8e:	4602      	mov	r2, r0
 8001b90:	4812      	ldr	r0, [pc, #72]	@ (8001bdc <printRadioSettings+0x2c8>)
 8001b92:	f007 ff5b 	bl	8009a4c <iprintf>

    // h) RX Payload Widths
    for (int i = 0; i <= 5; ++i) {
 8001b96:	2300      	movs	r3, #0
 8001b98:	61bb      	str	r3, [r7, #24]
 8001b9a:	e035      	b.n	8001c08 <printRadioSettings+0x2f4>
 8001b9c:	0800ba58 	.word	0x0800ba58
 8001ba0:	0800ba8c 	.word	0x0800ba8c
 8001ba4:	0800baa8 	.word	0x0800baa8
 8001ba8:	0800bac4 	.word	0x0800bac4
 8001bac:	0800bad8 	.word	0x0800bad8
 8001bb0:	0800bb1c 	.word	0x0800bb1c
 8001bb4:	0800bb68 	.word	0x0800bb68
 8001bb8:	0800bb80 	.word	0x0800bb80
 8001bbc:	0800bb94 	.word	0x0800bb94
 8001bc0:	0800bb9c 	.word	0x0800bb9c
 8001bc4:	0800bba4 	.word	0x0800bba4
 8001bc8:	0800bd64 	.word	0x0800bd64
 8001bcc:	0800bbb8 	.word	0x0800bbb8
 8001bd0:	0800bbc8 	.word	0x0800bbc8
 8001bd4:	0800bbf8 	.word	0x0800bbf8
 8001bd8:	0800bc28 	.word	0x0800bc28
 8001bdc:	0800bc50 	.word	0x0800bc50
        reg8Val = NRF24_read_register(0x11 + i);
 8001be0:	69bb      	ldr	r3, [r7, #24]
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	3311      	adds	r3, #17
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7ff fa0d 	bl	8001008 <NRF24_read_register>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	75fb      	strb	r3, [r7, #23]
        printf("RX_PW_P%d:\r\n\t\t%d bytes\r\n", i, reg8Val & 0x3F);
 8001bf2:	7dfb      	ldrb	r3, [r7, #23]
 8001bf4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	69b9      	ldr	r1, [r7, #24]
 8001bfc:	4837      	ldr	r0, [pc, #220]	@ (8001cdc <printRadioSettings+0x3c8>)
 8001bfe:	f007 ff25 	bl	8009a4c <iprintf>
    for (int i = 0; i <= 5; ++i) {
 8001c02:	69bb      	ldr	r3, [r7, #24]
 8001c04:	3301      	adds	r3, #1
 8001c06:	61bb      	str	r3, [r7, #24]
 8001c08:	69bb      	ldr	r3, [r7, #24]
 8001c0a:	2b05      	cmp	r3, #5
 8001c0c:	dde8      	ble.n	8001be0 <printRadioSettings+0x2cc>
    }

    // i) Dynamic payload enable
    reg8Val = NRF24_read_register(0x1C);
 8001c0e:	201c      	movs	r0, #28
 8001c10:	f7ff f9fa 	bl	8001008 <NRF24_read_register>
 8001c14:	4603      	mov	r3, r0
 8001c16:	75fb      	strb	r3, [r7, #23]
    printf("DYNPD_pipe:\r\n\t\tP0: %d\r\n\t\tP1: %d\r\n\t\tP2: %d\r\n\t\tP3: %d\r\n\t\tP4: %d\r\n\t\tP5: %d\r\n",
           _BOOL(reg8Val & (1 << 0)), _BOOL(reg8Val & (1 << 1)), _BOOL(reg8Val & (1 << 2)),
 8001c18:	7dfb      	ldrb	r3, [r7, #23]
 8001c1a:	f003 0301 	and.w	r3, r3, #1
    printf("DYNPD_pipe:\r\n\t\tP0: %d\r\n\t\tP1: %d\r\n\t\tP2: %d\r\n\t\tP3: %d\r\n\t\tP4: %d\r\n\t\tP5: %d\r\n",
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	bfcc      	ite	gt
 8001c22:	2301      	movgt	r3, #1
 8001c24:	2300      	movle	r3, #0
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	4618      	mov	r0, r3
           _BOOL(reg8Val & (1 << 0)), _BOOL(reg8Val & (1 << 1)), _BOOL(reg8Val & (1 << 2)),
 8001c2a:	7dfb      	ldrb	r3, [r7, #23]
 8001c2c:	f003 0302 	and.w	r3, r3, #2
    printf("DYNPD_pipe:\r\n\t\tP0: %d\r\n\t\tP1: %d\r\n\t\tP2: %d\r\n\t\tP3: %d\r\n\t\tP4: %d\r\n\t\tP5: %d\r\n",
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	bfcc      	ite	gt
 8001c34:	2301      	movgt	r3, #1
 8001c36:	2300      	movle	r3, #0
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	461c      	mov	r4, r3
           _BOOL(reg8Val & (1 << 0)), _BOOL(reg8Val & (1 << 1)), _BOOL(reg8Val & (1 << 2)),
 8001c3c:	7dfb      	ldrb	r3, [r7, #23]
 8001c3e:	f003 0304 	and.w	r3, r3, #4
    printf("DYNPD_pipe:\r\n\t\tP0: %d\r\n\t\tP1: %d\r\n\t\tP2: %d\r\n\t\tP3: %d\r\n\t\tP4: %d\r\n\t\tP5: %d\r\n",
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	bfcc      	ite	gt
 8001c46:	2301      	movgt	r3, #1
 8001c48:	2300      	movle	r3, #0
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	461d      	mov	r5, r3
           _BOOL(reg8Val & (1 << 3)), _BOOL(reg8Val & (1 << 4)), _BOOL(reg8Val & (1 << 5)));
 8001c4e:	7dfb      	ldrb	r3, [r7, #23]
 8001c50:	f003 0308 	and.w	r3, r3, #8
    printf("DYNPD_pipe:\r\n\t\tP0: %d\r\n\t\tP1: %d\r\n\t\tP2: %d\r\n\t\tP3: %d\r\n\t\tP4: %d\r\n\t\tP5: %d\r\n",
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	bfcc      	ite	gt
 8001c58:	2301      	movgt	r3, #1
 8001c5a:	2300      	movle	r3, #0
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	461a      	mov	r2, r3
           _BOOL(reg8Val & (1 << 3)), _BOOL(reg8Val & (1 << 4)), _BOOL(reg8Val & (1 << 5)));
 8001c60:	7dfb      	ldrb	r3, [r7, #23]
 8001c62:	f003 0310 	and.w	r3, r3, #16
    printf("DYNPD_pipe:\r\n\t\tP0: %d\r\n\t\tP1: %d\r\n\t\tP2: %d\r\n\t\tP3: %d\r\n\t\tP4: %d\r\n\t\tP5: %d\r\n",
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	bfcc      	ite	gt
 8001c6a:	2301      	movgt	r3, #1
 8001c6c:	2300      	movle	r3, #0
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	4619      	mov	r1, r3
           _BOOL(reg8Val & (1 << 3)), _BOOL(reg8Val & (1 << 4)), _BOOL(reg8Val & (1 << 5)));
 8001c72:	7dfb      	ldrb	r3, [r7, #23]
 8001c74:	f003 0320 	and.w	r3, r3, #32
    printf("DYNPD_pipe:\r\n\t\tP0: %d\r\n\t\tP1: %d\r\n\t\tP2: %d\r\n\t\tP3: %d\r\n\t\tP4: %d\r\n\t\tP5: %d\r\n",
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	bfcc      	ite	gt
 8001c7c:	2301      	movgt	r3, #1
 8001c7e:	2300      	movle	r3, #0
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	9302      	str	r3, [sp, #8]
 8001c84:	9101      	str	r1, [sp, #4]
 8001c86:	9200      	str	r2, [sp, #0]
 8001c88:	462b      	mov	r3, r5
 8001c8a:	4622      	mov	r2, r4
 8001c8c:	4601      	mov	r1, r0
 8001c8e:	4814      	ldr	r0, [pc, #80]	@ (8001ce0 <printRadioSettings+0x3cc>)
 8001c90:	f007 fedc 	bl	8009a4c <iprintf>

    // j) EN_DPL and EN_ACK_PAY
    reg8Val = NRF24_read_register(0x1D);
 8001c94:	201d      	movs	r0, #29
 8001c96:	f7ff f9b7 	bl	8001008 <NRF24_read_register>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	75fb      	strb	r3, [r7, #23]
    printf("EN_DPL:\r\n\t\t%s\r\n", (reg8Val & (1 << 2)) ? "Enabled" : "Disabled");
 8001c9e:	7dfb      	ldrb	r3, [r7, #23]
 8001ca0:	f003 0304 	and.w	r3, r3, #4
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d001      	beq.n	8001cac <printRadioSettings+0x398>
 8001ca8:	4b0e      	ldr	r3, [pc, #56]	@ (8001ce4 <printRadioSettings+0x3d0>)
 8001caa:	e000      	b.n	8001cae <printRadioSettings+0x39a>
 8001cac:	4b0e      	ldr	r3, [pc, #56]	@ (8001ce8 <printRadioSettings+0x3d4>)
 8001cae:	4619      	mov	r1, r3
 8001cb0:	480e      	ldr	r0, [pc, #56]	@ (8001cec <printRadioSettings+0x3d8>)
 8001cb2:	f007 fecb 	bl	8009a4c <iprintf>
    printf("EN_ACK_PAY:\r\n\t\t%s\r\n", (reg8Val & (1 << 1)) ? "Enabled" : "Disabled");
 8001cb6:	7dfb      	ldrb	r3, [r7, #23]
 8001cb8:	f003 0302 	and.w	r3, r3, #2
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d001      	beq.n	8001cc4 <printRadioSettings+0x3b0>
 8001cc0:	4b08      	ldr	r3, [pc, #32]	@ (8001ce4 <printRadioSettings+0x3d0>)
 8001cc2:	e000      	b.n	8001cc6 <printRadioSettings+0x3b2>
 8001cc4:	4b08      	ldr	r3, [pc, #32]	@ (8001ce8 <printRadioSettings+0x3d4>)
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	4809      	ldr	r0, [pc, #36]	@ (8001cf0 <printRadioSettings+0x3dc>)
 8001cca:	f007 febf 	bl	8009a4c <iprintf>

    printf("**********************************************\r\n");
 8001cce:	4809      	ldr	r0, [pc, #36]	@ (8001cf4 <printRadioSettings+0x3e0>)
 8001cd0:	f007 ff24 	bl	8009b1c <puts>
}
 8001cd4:	bf00      	nop
 8001cd6:	3720      	adds	r7, #32
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bdb0      	pop	{r4, r5, r7, pc}
 8001cdc:	0800bc78 	.word	0x0800bc78
 8001ce0:	0800bc94 	.word	0x0800bc94
 8001ce4:	0800bce0 	.word	0x0800bce0
 8001ce8:	0800bce8 	.word	0x0800bce8
 8001cec:	0800bcf4 	.word	0x0800bcf4
 8001cf0:	0800bd04 	.word	0x0800bd04
 8001cf4:	0800bd18 	.word	0x0800bd18

08001cf8 <FlowSensor_Init>:
#include "FlowSensor.h"

void FlowSensor_Init(FlowSensor *fs, uint16_t type, GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	607a      	str	r2, [r7, #4]
 8001d02:	461a      	mov	r2, r3
 8001d04:	460b      	mov	r3, r1
 8001d06:	817b      	strh	r3, [r7, #10]
 8001d08:	4613      	mov	r3, r2
 8001d0a:	813b      	strh	r3, [r7, #8]
    fs->pulse_per_liter = type;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	897a      	ldrh	r2, [r7, #10]
 8001d10:	801a      	strh	r2, [r3, #0]
    fs->pulse = 0;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	2200      	movs	r2, #0
 8001d16:	605a      	str	r2, [r3, #4]
    fs->total_pulse = 0;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	609a      	str	r2, [r3, #8]
    fs->last_time_ms = HAL_GetTick();
 8001d1e:	f000 fe19 	bl	8002954 <HAL_GetTick>
 8001d22:	4602      	mov	r2, r0
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	60da      	str	r2, [r3, #12]
    fs->flow_rate_s = 0;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	f04f 0200 	mov.w	r2, #0
 8001d2e:	611a      	str	r2, [r3, #16]
    fs->flow_rate_m = 0;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	f04f 0200 	mov.w	r2, #0
 8001d36:	615a      	str	r2, [r3, #20]
    fs->flow_rate_h = 0;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	f04f 0200 	mov.w	r2, #0
 8001d3e:	619a      	str	r2, [r3, #24]
    fs->volume = 0;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	f04f 0200 	mov.w	r2, #0
 8001d46:	61da      	str	r2, [r3, #28]
    fs->GPIOx = GPIOx;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	621a      	str	r2, [r3, #32]
    fs->GPIO_Pin = GPIO_Pin;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	893a      	ldrh	r2, [r7, #8]
 8001d52:	849a      	strh	r2, [r3, #36]	@ 0x24

    // GPIO must be initialized beforehand in CubeMX (Input with EXTI interrupt)
}
 8001d54:	bf00      	nop
 8001d56:	3710      	adds	r7, #16
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}

08001d5c <FlowSensor_Count>:

/**
 * @brief ISR callback (call from EXTI IRQHandler)
 */
void FlowSensor_Count(FlowSensor *fs) {
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
    fs->pulse++;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	1c5a      	adds	r2, r3, #1
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	605a      	str	r2, [r3, #4]
}
 8001d6e:	bf00      	nop
 8001d70:	370c      	adds	r7, #12
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
	...

08001d7c <FlowSensor_Read>:

void FlowSensor_Read(FlowSensor *fs, int32_t calibration) {
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b086      	sub	sp, #24
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
    uint32_t now = HAL_GetTick(); // ms
 8001d86:	f000 fde5 	bl	8002954 <HAL_GetTick>
 8001d8a:	6178      	str	r0, [r7, #20]
    uint32_t dt = now - fs->last_time_ms;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	697a      	ldr	r2, [r7, #20]
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	613b      	str	r3, [r7, #16]
    if (dt == 0) return;
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d046      	beq.n	8001e2a <FlowSensor_Read+0xae>

    float liters_per_pulse = 1.0f / (fs->pulse_per_liter + calibration);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	881b      	ldrh	r3, [r3, #0]
 8001da0:	461a      	mov	r2, r3
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	4413      	add	r3, r2
 8001da6:	ee07 3a90 	vmov	s15, r3
 8001daa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001dae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001db2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001db6:	edc7 7a03 	vstr	s15, [r7, #12]

    fs->flow_rate_s = (fs->pulse * liters_per_pulse) / ((float)dt / 1000.0f);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	ee07 3a90 	vmov	s15, r3
 8001dc2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001dc6:	edd7 7a03 	vldr	s15, [r7, #12]
 8001dca:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	ee07 3a90 	vmov	s15, r3
 8001dd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001dd8:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8001e34 <FlowSensor_Read+0xb8>
 8001ddc:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8001de0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	edc3 7a04 	vstr	s15, [r3, #16]
    fs->volume += fs->pulse * liters_per_pulse;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	ee07 3a90 	vmov	s15, r3
 8001df2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001df6:	edd7 7a03 	vldr	s15, [r7, #12]
 8001dfa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	edd3 7a07 	vldr	s15, [r3, #28]
 8001e04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	edc3 7a07 	vstr	s15, [r3, #28]
    fs->total_pulse += fs->pulse;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	685a      	ldr	r2, [r3, #4]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	441a      	add	r2, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	609a      	str	r2, [r3, #8]

    fs->pulse = 0;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	605a      	str	r2, [r3, #4]
    fs->last_time_ms = now;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	697a      	ldr	r2, [r7, #20]
 8001e26:	60da      	str	r2, [r3, #12]
 8001e28:	e000      	b.n	8001e2c <FlowSensor_Read+0xb0>
    if (dt == 0) return;
 8001e2a:	bf00      	nop
}
 8001e2c:	3718      	adds	r7, #24
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	447a0000 	.word	0x447a0000

08001e38 <FlowSensor_GetFlowRate_m>:
float FlowSensor_GetFlowRate_h(FlowSensor *fs) {
    fs->flow_rate_h = fs->flow_rate_s * 3600.0f;
    return fs->flow_rate_h;
}

float FlowSensor_GetFlowRate_m(FlowSensor *fs) {
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
    fs->flow_rate_m = fs->flow_rate_s * 60.0f;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	edd3 7a04 	vldr	s15, [r3, #16]
 8001e46:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8001e6c <FlowSensor_GetFlowRate_m+0x34>
 8001e4a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	edc3 7a05 	vstr	s15, [r3, #20]
    return fs->flow_rate_m;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	695b      	ldr	r3, [r3, #20]
 8001e58:	ee07 3a90 	vmov	s15, r3
}
 8001e5c:	eeb0 0a67 	vmov.f32	s0, s15
 8001e60:	370c      	adds	r7, #12
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	42700000 	.word	0x42700000

08001e70 <FlowSensor_GetVolume>:

float FlowSensor_GetFlowRate_s(FlowSensor *fs) {
    return fs->flow_rate_s;
}

float FlowSensor_GetVolume(FlowSensor *fs) {
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
    return fs->volume;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	69db      	ldr	r3, [r3, #28]
 8001e7c:	ee07 3a90 	vmov	s15, r3
}
 8001e80:	eeb0 0a67 	vmov.f32	s0, s15
 8001e84:	370c      	adds	r7, #12
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
	...

08001e90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e90:	b5b0      	push	{r4, r5, r7, lr}
 8001e92:	b0a8      	sub	sp, #160	@ 0xa0
 8001e94:	af24      	add	r7, sp, #144	@ 0x90
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e96:	f000 fca3 	bl	80027e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e9a:	f000 f8cb 	bl	8002034 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e9e:	f000 f9cd 	bl	800223c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001ea2:	f000 f97f 	bl	80021a4 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8001ea6:	f000 f90f 	bl	80020c8 <MX_SPI1_Init>

  NRF24_begin(GPIOF, GPIOF, GPIO_PIN_12, GPIO_PIN_13, hspi1);
 8001eaa:	4a3c      	ldr	r2, [pc, #240]	@ (8001f9c <main+0x10c>)
 8001eac:	466b      	mov	r3, sp
 8001eae:	4611      	mov	r1, r2
 8001eb0:	2290      	movs	r2, #144	@ 0x90
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f007 ff9f 	bl	8009df6 <memcpy>
 8001eb8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ebc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001ec0:	4937      	ldr	r1, [pc, #220]	@ (8001fa0 <main+0x110>)
 8001ec2:	4837      	ldr	r0, [pc, #220]	@ (8001fa0 <main+0x110>)
 8001ec4:	f7ff f97a 	bl	80011bc <NRF24_begin>
  	//NRF24_begin(GPIOB, CSNpin_Pin, CEpin_Pin, hspi1);

  	printRadioSettings(); //for showing default setting of NRF
 8001ec8:	f7ff fd24 	bl	8001914 <printRadioSettings>

  	//**** TRANSMIT - ACK ****//

  	NRF24_stopListening();
 8001ecc:	f7ff fa54 	bl	8001378 <NRF24_stopListening>
  	NRF24_openWritingPipe(TxAddr);
 8001ed0:	4b34      	ldr	r3, [pc, #208]	@ (8001fa4 <main+0x114>)
 8001ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ed6:	4610      	mov	r0, r2
 8001ed8:	4619      	mov	r1, r3
 8001eda:	f7ff faad 	bl	8001438 <NRF24_openWritingPipe>

  	NRF24_setAutoAck(false);
 8001ede:	2000      	movs	r0, #0
 8001ee0:	f7ff fb98 	bl	8001614 <NRF24_setAutoAck>
  	NRF24_setChannel(76);
 8001ee4:	204c      	movs	r0, #76	@ 0x4c
 8001ee6:	f7ff fae7 	bl	80014b8 <NRF24_setChannel>
  	NRF24_setPayloadSize(32);
 8001eea:	2020      	movs	r0, #32
 8001eec:	f7ff fafa 	bl	80014e4 <NRF24_setPayloadSize>

  	NRF24_enableDynamicPayloads();
 8001ef0:	f7ff fb46 	bl	8001580 <NRF24_enableDynamicPayloads>
  	NRF24_enableAckPayload();
 8001ef4:	f7ff fb16 	bl	8001524 <NRF24_enableAckPayload>

  	/* USER CODE END 2 */

  	/* Infinite loop */
  	/* USER CODE BEGIN WHILE */
  	FlowSensor_Init(&myFlow, 5880, GPIOD, GPIO_PIN_12); // e.g. YF-S401 sensor
 8001ef8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001efc:	4a2a      	ldr	r2, [pc, #168]	@ (8001fa8 <main+0x118>)
 8001efe:	f241 61f8 	movw	r1, #5880	@ 0x16f8
 8001f02:	482a      	ldr	r0, [pc, #168]	@ (8001fac <main+0x11c>)
 8001f04:	f7ff fef8 	bl	8001cf8 <FlowSensor_Init>
  	uint8_t packfloat[8] = {0};
 8001f08:	463b      	mov	r3, r7
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	601a      	str	r2, [r3, #0]
 8001f0e:	605a      	str	r2, [r3, #4]

  	while (1) {
  		printf("TX loop ...\r\n");
 8001f10:	4827      	ldr	r0, [pc, #156]	@ (8001fb0 <main+0x120>)
 8001f12:	f007 fe03 	bl	8009b1c <puts>
  		FlowSensor_Read(&myFlow, 0);
 8001f16:	2100      	movs	r1, #0
 8001f18:	4824      	ldr	r0, [pc, #144]	@ (8001fac <main+0x11c>)
 8001f1a:	f7ff ff2f 	bl	8001d7c <FlowSensor_Read>

  		float flow_lpm = FlowSensor_GetFlowRate_m(&myFlow);
 8001f1e:	4823      	ldr	r0, [pc, #140]	@ (8001fac <main+0x11c>)
 8001f20:	f7ff ff8a 	bl	8001e38 <FlowSensor_GetFlowRate_m>
 8001f24:	ed87 0a03 	vstr	s0, [r7, #12]
  		float volume = FlowSensor_GetVolume(&myFlow);
 8001f28:	4820      	ldr	r0, [pc, #128]	@ (8001fac <main+0x11c>)
 8001f2a:	f7ff ffa1 	bl	8001e70 <FlowSensor_GetVolume>
 8001f2e:	ed87 0a02 	vstr	s0, [r7, #8]
  		pack_floats(flow_lpm, volume, packfloat);
 8001f32:	463b      	mov	r3, r7
 8001f34:	4618      	mov	r0, r3
 8001f36:	edd7 0a02 	vldr	s1, [r7, #8]
 8001f3a:	ed97 0a03 	vldr	s0, [r7, #12]
 8001f3e:	f000 f851 	bl	8001fe4 <pack_floats>

  		while (NRF24_write(packfloat, 8) != 1) {
 8001f42:	e006      	b.n	8001f52 <main+0xc2>
  			printf("error send !!\r\n");
 8001f44:	481b      	ldr	r0, [pc, #108]	@ (8001fb4 <main+0x124>)
 8001f46:	f007 fde9 	bl	8009b1c <puts>
  			HAL_Delay(1000);
 8001f4a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001f4e:	f000 fd0d 	bl	800296c <HAL_Delay>
  		while (NRF24_write(packfloat, 8) != 1) {
 8001f52:	463b      	mov	r3, r7
 8001f54:	2108      	movs	r1, #8
 8001f56:	4618      	mov	r0, r3
 8001f58:	f7ff fa1a 	bl	8001390 <NRF24_write>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	f083 0301 	eor.w	r3, r3, #1
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d1ed      	bne.n	8001f44 <main+0xb4>
  		}
  		printf("sent flow_lpm and volume success !!\r\n");
 8001f68:	4813      	ldr	r0, [pc, #76]	@ (8001fb8 <main+0x128>)
 8001f6a:	f007 fdd7 	bl	8009b1c <puts>

  		HAL_Delay(1000);
 8001f6e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001f72:	f000 fcfb 	bl	800296c <HAL_Delay>

        printf("Flow = %.2f L/min, Volume = %.2f L\r\n", flow_lpm, volume);
 8001f76:	68f8      	ldr	r0, [r7, #12]
 8001f78:	f7fe faf6 	bl	8000568 <__aeabi_f2d>
 8001f7c:	4604      	mov	r4, r0
 8001f7e:	460d      	mov	r5, r1
 8001f80:	68b8      	ldr	r0, [r7, #8]
 8001f82:	f7fe faf1 	bl	8000568 <__aeabi_f2d>
 8001f86:	4602      	mov	r2, r0
 8001f88:	460b      	mov	r3, r1
 8001f8a:	e9cd 2300 	strd	r2, r3, [sp]
 8001f8e:	4622      	mov	r2, r4
 8001f90:	462b      	mov	r3, r5
 8001f92:	480a      	ldr	r0, [pc, #40]	@ (8001fbc <main+0x12c>)
 8001f94:	f007 fd5a 	bl	8009a4c <iprintf>
  	while (1) {
 8001f98:	e7ba      	b.n	8001f10 <main+0x80>
 8001f9a:	bf00      	nop
 8001f9c:	2000029c 	.word	0x2000029c
 8001fa0:	42021400 	.word	0x42021400
 8001fa4:	20000000 	.word	0x20000000
 8001fa8:	42020c00 	.word	0x42020c00
 8001fac:	200003c0 	.word	0x200003c0
 8001fb0:	0800be70 	.word	0x0800be70
 8001fb4:	0800be80 	.word	0x0800be80
 8001fb8:	0800be90 	.word	0x0800be90
 8001fbc:	0800beb8 	.word	0x0800beb8

08001fc0 <__io_putchar>:
  	}
}

PUTCHAR_PROTOTYPE
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8001fc8:	1d39      	adds	r1, r7, #4
 8001fca:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001fce:	2201      	movs	r2, #1
 8001fd0:	4803      	ldr	r0, [pc, #12]	@ (8001fe0 <__io_putchar+0x20>)
 8001fd2:	f006 fac3 	bl	800855c <HAL_UART_Transmit>
  return ch;
 8001fd6:	687b      	ldr	r3, [r7, #4]
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3708      	adds	r7, #8
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	2000032c 	.word	0x2000032c

08001fe4 <pack_floats>:

void pack_floats(float f1, float f2, uint8_t *buffer) {
 8001fe4:	b480      	push	{r7}
 8001fe6:	b085      	sub	sp, #20
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	ed87 0a03 	vstr	s0, [r7, #12]
 8001fee:	edc7 0a02 	vstr	s1, [r7, #8]
 8001ff2:	6078      	str	r0, [r7, #4]
    memcpy(buffer, &f1, sizeof(float));          // copy first float (4 bytes)
 8001ff4:	68fa      	ldr	r2, [r7, #12]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	601a      	str	r2, [r3, #0]
    memcpy(buffer + sizeof(float), &f2, sizeof(float)); // copy second float
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	3304      	adds	r3, #4
 8001ffe:	68ba      	ldr	r2, [r7, #8]
 8002000:	601a      	str	r2, [r3, #0]
}
 8002002:	bf00      	nop
 8002004:	3714      	adds	r7, #20
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
	...

08002010 <HAL_GPIO_EXTI_Rising_Callback>:

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin){
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	4603      	mov	r3, r0
 8002018:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == GPIO_PIN_12/*modify*/) // If The INT Source Is EXTI Line9 (A9 Pin)
 800201a:	88fb      	ldrh	r3, [r7, #6]
 800201c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002020:	d102      	bne.n	8002028 <HAL_GPIO_EXTI_Rising_Callback+0x18>
    {
    FlowSensor_Count(&myFlow);
 8002022:	4803      	ldr	r0, [pc, #12]	@ (8002030 <HAL_GPIO_EXTI_Rising_Callback+0x20>)
 8002024:	f7ff fe9a 	bl	8001d5c <FlowSensor_Count>
    }
}
 8002028:	bf00      	nop
 800202a:	3708      	adds	r7, #8
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}
 8002030:	200003c0 	.word	0x200003c0

08002034 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b09e      	sub	sp, #120	@ 0x78
 8002038:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800203a:	f107 0318 	add.w	r3, r7, #24
 800203e:	2260      	movs	r2, #96	@ 0x60
 8002040:	2100      	movs	r1, #0
 8002042:	4618      	mov	r0, r3
 8002044:	f007 fe4a 	bl	8009cdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002048:	463b      	mov	r3, r7
 800204a:	2200      	movs	r2, #0
 800204c:	601a      	str	r2, [r3, #0]
 800204e:	605a      	str	r2, [r3, #4]
 8002050:	609a      	str	r2, [r3, #8]
 8002052:	60da      	str	r2, [r3, #12]
 8002054:	611a      	str	r2, [r3, #16]
 8002056:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE4) != HAL_OK)
 8002058:	2000      	movs	r0, #0
 800205a:	f001 f869 	bl	8003130 <HAL_PWREx_ControlVoltageScaling>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d001      	beq.n	8002068 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002064:	f000 f968 	bl	8002338 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8002068:	2310      	movs	r3, #16
 800206a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800206c:	2301      	movs	r3, #1
 800206e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8002070:	2310      	movs	r3, #16
 8002072:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 8002074:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002078:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800207a:	2300      	movs	r3, #0
 800207c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800207e:	f107 0318 	add.w	r3, r7, #24
 8002082:	4618      	mov	r0, r3
 8002084:	f001 f8e0 	bl	8003248 <HAL_RCC_OscConfig>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800208e:	f000 f953 	bl	8002338 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002092:	231f      	movs	r3, #31
 8002094:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8002096:	2300      	movs	r3, #0
 8002098:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800209a:	2300      	movs	r3, #0
 800209c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800209e:	2300      	movs	r3, #0
 80020a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80020a2:	2300      	movs	r3, #0
 80020a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80020a6:	2300      	movs	r3, #0
 80020a8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80020aa:	463b      	mov	r3, r7
 80020ac:	2100      	movs	r1, #0
 80020ae:	4618      	mov	r0, r3
 80020b0:	f001 ffa6 	bl	8004000 <HAL_RCC_ClockConfig>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80020ba:	f000 f93d 	bl	8002338 <Error_Handler>
  }
}
 80020be:	bf00      	nop
 80020c0:	3778      	adds	r7, #120	@ 0x78
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
	...

080020c8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 80020ce:	1d3b      	adds	r3, r7, #4
 80020d0:	2200      	movs	r2, #0
 80020d2:	601a      	str	r2, [r3, #0]
 80020d4:	605a      	str	r2, [r3, #4]
 80020d6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80020d8:	4b30      	ldr	r3, [pc, #192]	@ (800219c <MX_SPI1_Init+0xd4>)
 80020da:	4a31      	ldr	r2, [pc, #196]	@ (80021a0 <MX_SPI1_Init+0xd8>)
 80020dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80020de:	4b2f      	ldr	r3, [pc, #188]	@ (800219c <MX_SPI1_Init+0xd4>)
 80020e0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80020e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80020e6:	4b2d      	ldr	r3, [pc, #180]	@ (800219c <MX_SPI1_Init+0xd4>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80020ec:	4b2b      	ldr	r3, [pc, #172]	@ (800219c <MX_SPI1_Init+0xd4>)
 80020ee:	2207      	movs	r2, #7
 80020f0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80020f2:	4b2a      	ldr	r3, [pc, #168]	@ (800219c <MX_SPI1_Init+0xd4>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80020f8:	4b28      	ldr	r3, [pc, #160]	@ (800219c <MX_SPI1_Init+0xd4>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80020fe:	4b27      	ldr	r3, [pc, #156]	@ (800219c <MX_SPI1_Init+0xd4>)
 8002100:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002104:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002106:	4b25      	ldr	r3, [pc, #148]	@ (800219c <MX_SPI1_Init+0xd4>)
 8002108:	2200      	movs	r2, #0
 800210a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800210c:	4b23      	ldr	r3, [pc, #140]	@ (800219c <MX_SPI1_Init+0xd4>)
 800210e:	2200      	movs	r2, #0
 8002110:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002112:	4b22      	ldr	r3, [pc, #136]	@ (800219c <MX_SPI1_Init+0xd4>)
 8002114:	2200      	movs	r2, #0
 8002116:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002118:	4b20      	ldr	r3, [pc, #128]	@ (800219c <MX_SPI1_Init+0xd4>)
 800211a:	2200      	movs	r2, #0
 800211c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x7;
 800211e:	4b1f      	ldr	r3, [pc, #124]	@ (800219c <MX_SPI1_Init+0xd4>)
 8002120:	2207      	movs	r2, #7
 8002122:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002124:	4b1d      	ldr	r3, [pc, #116]	@ (800219c <MX_SPI1_Init+0xd4>)
 8002126:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800212a:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800212c:	4b1b      	ldr	r3, [pc, #108]	@ (800219c <MX_SPI1_Init+0xd4>)
 800212e:	2200      	movs	r2, #0
 8002130:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002132:	4b1a      	ldr	r3, [pc, #104]	@ (800219c <MX_SPI1_Init+0xd4>)
 8002134:	2200      	movs	r2, #0
 8002136:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002138:	4b18      	ldr	r3, [pc, #96]	@ (800219c <MX_SPI1_Init+0xd4>)
 800213a:	2200      	movs	r2, #0
 800213c:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800213e:	4b17      	ldr	r3, [pc, #92]	@ (800219c <MX_SPI1_Init+0xd4>)
 8002140:	2200      	movs	r2, #0
 8002142:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002144:	4b15      	ldr	r3, [pc, #84]	@ (800219c <MX_SPI1_Init+0xd4>)
 8002146:	2200      	movs	r2, #0
 8002148:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800214a:	4b14      	ldr	r3, [pc, #80]	@ (800219c <MX_SPI1_Init+0xd4>)
 800214c:	2200      	movs	r2, #0
 800214e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002150:	4b12      	ldr	r3, [pc, #72]	@ (800219c <MX_SPI1_Init+0xd4>)
 8002152:	2200      	movs	r2, #0
 8002154:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi1.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8002156:	4b11      	ldr	r3, [pc, #68]	@ (800219c <MX_SPI1_Init+0xd4>)
 8002158:	2200      	movs	r2, #0
 800215a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi1.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 800215c:	4b0f      	ldr	r3, [pc, #60]	@ (800219c <MX_SPI1_Init+0xd4>)
 800215e:	2200      	movs	r2, #0
 8002160:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002162:	480e      	ldr	r0, [pc, #56]	@ (800219c <MX_SPI1_Init+0xd4>)
 8002164:	f005 fa74 	bl	8007650 <HAL_SPI_Init>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <MX_SPI1_Init+0xaa>
  {
    Error_Handler();
 800216e:	f000 f8e3 	bl	8002338 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8002172:	2300      	movs	r3, #0
 8002174:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8002176:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800217a:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 800217c:	2300      	movs	r3, #0
 800217e:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi1, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8002180:	1d3b      	adds	r3, r7, #4
 8002182:	4619      	mov	r1, r3
 8002184:	4805      	ldr	r0, [pc, #20]	@ (800219c <MX_SPI1_Init+0xd4>)
 8002186:	f006 f958 	bl	800843a <HAL_SPIEx_SetConfigAutonomousMode>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d001      	beq.n	8002194 <MX_SPI1_Init+0xcc>
  {
    Error_Handler();
 8002190:	f000 f8d2 	bl	8002338 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002194:	bf00      	nop
 8002196:	3710      	adds	r7, #16
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	2000029c 	.word	0x2000029c
 80021a0:	40013000 	.word	0x40013000

080021a4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80021a8:	4b22      	ldr	r3, [pc, #136]	@ (8002234 <MX_USART1_UART_Init+0x90>)
 80021aa:	4a23      	ldr	r2, [pc, #140]	@ (8002238 <MX_USART1_UART_Init+0x94>)
 80021ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80021ae:	4b21      	ldr	r3, [pc, #132]	@ (8002234 <MX_USART1_UART_Init+0x90>)
 80021b0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80021b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80021b6:	4b1f      	ldr	r3, [pc, #124]	@ (8002234 <MX_USART1_UART_Init+0x90>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80021bc:	4b1d      	ldr	r3, [pc, #116]	@ (8002234 <MX_USART1_UART_Init+0x90>)
 80021be:	2200      	movs	r2, #0
 80021c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80021c2:	4b1c      	ldr	r3, [pc, #112]	@ (8002234 <MX_USART1_UART_Init+0x90>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80021c8:	4b1a      	ldr	r3, [pc, #104]	@ (8002234 <MX_USART1_UART_Init+0x90>)
 80021ca:	220c      	movs	r2, #12
 80021cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021ce:	4b19      	ldr	r3, [pc, #100]	@ (8002234 <MX_USART1_UART_Init+0x90>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80021d4:	4b17      	ldr	r3, [pc, #92]	@ (8002234 <MX_USART1_UART_Init+0x90>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021da:	4b16      	ldr	r3, [pc, #88]	@ (8002234 <MX_USART1_UART_Init+0x90>)
 80021dc:	2200      	movs	r2, #0
 80021de:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80021e0:	4b14      	ldr	r3, [pc, #80]	@ (8002234 <MX_USART1_UART_Init+0x90>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021e6:	4b13      	ldr	r3, [pc, #76]	@ (8002234 <MX_USART1_UART_Init+0x90>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80021ec:	4811      	ldr	r0, [pc, #68]	@ (8002234 <MX_USART1_UART_Init+0x90>)
 80021ee:	f006 f965 	bl	80084bc <HAL_UART_Init>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d001      	beq.n	80021fc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80021f8:	f000 f89e 	bl	8002338 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80021fc:	2100      	movs	r1, #0
 80021fe:	480d      	ldr	r0, [pc, #52]	@ (8002234 <MX_USART1_UART_Init+0x90>)
 8002200:	f006 fe40 	bl	8008e84 <HAL_UARTEx_SetTxFifoThreshold>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d001      	beq.n	800220e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800220a:	f000 f895 	bl	8002338 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800220e:	2100      	movs	r1, #0
 8002210:	4808      	ldr	r0, [pc, #32]	@ (8002234 <MX_USART1_UART_Init+0x90>)
 8002212:	f006 fe75 	bl	8008f00 <HAL_UARTEx_SetRxFifoThreshold>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d001      	beq.n	8002220 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800221c:	f000 f88c 	bl	8002338 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002220:	4804      	ldr	r0, [pc, #16]	@ (8002234 <MX_USART1_UART_Init+0x90>)
 8002222:	f006 fdf6 	bl	8008e12 <HAL_UARTEx_DisableFifoMode>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d001      	beq.n	8002230 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800222c:	f000 f884 	bl	8002338 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002230:	bf00      	nop
 8002232:	bd80      	pop	{r7, pc}
 8002234:	2000032c 	.word	0x2000032c
 8002238:	40013800 	.word	0x40013800

0800223c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b08a      	sub	sp, #40	@ 0x28
 8002240:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002242:	f107 0314 	add.w	r3, r7, #20
 8002246:	2200      	movs	r2, #0
 8002248:	601a      	str	r2, [r3, #0]
 800224a:	605a      	str	r2, [r3, #4]
 800224c:	609a      	str	r2, [r3, #8]
 800224e:	60da      	str	r2, [r3, #12]
 8002250:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002252:	4b35      	ldr	r3, [pc, #212]	@ (8002328 <MX_GPIO_Init+0xec>)
 8002254:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002258:	4a33      	ldr	r2, [pc, #204]	@ (8002328 <MX_GPIO_Init+0xec>)
 800225a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800225e:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002262:	4b31      	ldr	r3, [pc, #196]	@ (8002328 <MX_GPIO_Init+0xec>)
 8002264:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002268:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800226c:	613b      	str	r3, [r7, #16]
 800226e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002270:	4b2d      	ldr	r3, [pc, #180]	@ (8002328 <MX_GPIO_Init+0xec>)
 8002272:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002276:	4a2c      	ldr	r2, [pc, #176]	@ (8002328 <MX_GPIO_Init+0xec>)
 8002278:	f043 0301 	orr.w	r3, r3, #1
 800227c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002280:	4b29      	ldr	r3, [pc, #164]	@ (8002328 <MX_GPIO_Init+0xec>)
 8002282:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002286:	f003 0301 	and.w	r3, r3, #1
 800228a:	60fb      	str	r3, [r7, #12]
 800228c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800228e:	4b26      	ldr	r3, [pc, #152]	@ (8002328 <MX_GPIO_Init+0xec>)
 8002290:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002294:	4a24      	ldr	r2, [pc, #144]	@ (8002328 <MX_GPIO_Init+0xec>)
 8002296:	f043 0320 	orr.w	r3, r3, #32
 800229a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800229e:	4b22      	ldr	r3, [pc, #136]	@ (8002328 <MX_GPIO_Init+0xec>)
 80022a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80022a4:	f003 0320 	and.w	r3, r3, #32
 80022a8:	60bb      	str	r3, [r7, #8]
 80022aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80022ac:	4b1e      	ldr	r3, [pc, #120]	@ (8002328 <MX_GPIO_Init+0xec>)
 80022ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80022b2:	4a1d      	ldr	r2, [pc, #116]	@ (8002328 <MX_GPIO_Init+0xec>)
 80022b4:	f043 0308 	orr.w	r3, r3, #8
 80022b8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80022bc:	4b1a      	ldr	r3, [pc, #104]	@ (8002328 <MX_GPIO_Init+0xec>)
 80022be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80022c2:	f003 0308 	and.w	r3, r3, #8
 80022c6:	607b      	str	r3, [r7, #4]
 80022c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 80022ca:	2200      	movs	r2, #0
 80022cc:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 80022d0:	4816      	ldr	r0, [pc, #88]	@ (800232c <MX_GPIO_Init+0xf0>)
 80022d2:	f000 fee3 	bl	800309c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PF12 PF13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80022d6:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80022da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022dc:	2301      	movs	r3, #1
 80022de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e0:	2300      	movs	r3, #0
 80022e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022e4:	2300      	movs	r3, #0
 80022e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80022e8:	f107 0314 	add.w	r3, r7, #20
 80022ec:	4619      	mov	r1, r3
 80022ee:	480f      	ldr	r0, [pc, #60]	@ (800232c <MX_GPIO_Init+0xf0>)
 80022f0:	f000 fcf4 	bl	8002cdc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80022f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80022f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80022fa:	4b0d      	ldr	r3, [pc, #52]	@ (8002330 <MX_GPIO_Init+0xf4>)
 80022fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fe:	2300      	movs	r3, #0
 8002300:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002302:	f107 0314 	add.w	r3, r7, #20
 8002306:	4619      	mov	r1, r3
 8002308:	480a      	ldr	r0, [pc, #40]	@ (8002334 <MX_GPIO_Init+0xf8>)
 800230a:	f000 fce7 	bl	8002cdc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI12_IRQn, 0, 0);
 800230e:	2200      	movs	r2, #0
 8002310:	2100      	movs	r1, #0
 8002312:	2017      	movs	r0, #23
 8002314:	f000 fc06 	bl	8002b24 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI12_IRQn);
 8002318:	2017      	movs	r0, #23
 800231a:	f000 fc1d 	bl	8002b58 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800231e:	bf00      	nop
 8002320:	3728      	adds	r7, #40	@ 0x28
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	46020c00 	.word	0x46020c00
 800232c:	42021400 	.word	0x42021400
 8002330:	10110000 	.word	0x10110000
 8002334:	42020c00 	.word	0x42020c00

08002338 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800233c:	b672      	cpsid	i
}
 800233e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002340:	bf00      	nop
 8002342:	e7fd      	b.n	8002340 <Error_Handler+0x8>

08002344 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800234a:	4b0a      	ldr	r3, [pc, #40]	@ (8002374 <HAL_MspInit+0x30>)
 800234c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002350:	4a08      	ldr	r2, [pc, #32]	@ (8002374 <HAL_MspInit+0x30>)
 8002352:	f043 0304 	orr.w	r3, r3, #4
 8002356:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800235a:	4b06      	ldr	r3, [pc, #24]	@ (8002374 <HAL_MspInit+0x30>)
 800235c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002360:	f003 0304 	and.w	r3, r3, #4
 8002364:	607b      	str	r3, [r7, #4]
 8002366:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002368:	bf00      	nop
 800236a:	370c      	adds	r7, #12
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr
 8002374:	46020c00 	.word	0x46020c00

08002378 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b0c0      	sub	sp, #256	@ 0x100
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002380:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002384:	2200      	movs	r2, #0
 8002386:	601a      	str	r2, [r3, #0]
 8002388:	605a      	str	r2, [r3, #4]
 800238a:	609a      	str	r2, [r3, #8]
 800238c:	60da      	str	r2, [r3, #12]
 800238e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002390:	f107 0310 	add.w	r3, r7, #16
 8002394:	22d8      	movs	r2, #216	@ 0xd8
 8002396:	2100      	movs	r1, #0
 8002398:	4618      	mov	r0, r3
 800239a:	f007 fc9f 	bl	8009cdc <memset>
  if(hspi->Instance==SPI1)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a27      	ldr	r2, [pc, #156]	@ (8002440 <HAL_SPI_MspInit+0xc8>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d146      	bne.n	8002436 <HAL_SPI_MspInit+0xbe>

    /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 80023a8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80023ac:	f04f 0300 	mov.w	r3, #0
 80023b0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Spi1ClockSelection = RCC_SPI1CLKSOURCE_SYSCLK;
 80023b4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80023b8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023bc:	f107 0310 	add.w	r3, r7, #16
 80023c0:	4618      	mov	r0, r3
 80023c2:	f002 f9ed 	bl	80047a0 <HAL_RCCEx_PeriphCLKConfig>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d001      	beq.n	80023d0 <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 80023cc:	f7ff ffb4 	bl	8002338 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80023d0:	4b1c      	ldr	r3, [pc, #112]	@ (8002444 <HAL_SPI_MspInit+0xcc>)
 80023d2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80023d6:	4a1b      	ldr	r2, [pc, #108]	@ (8002444 <HAL_SPI_MspInit+0xcc>)
 80023d8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80023dc:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80023e0:	4b18      	ldr	r3, [pc, #96]	@ (8002444 <HAL_SPI_MspInit+0xcc>)
 80023e2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80023e6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023ea:	60fb      	str	r3, [r7, #12]
 80023ec:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ee:	4b15      	ldr	r3, [pc, #84]	@ (8002444 <HAL_SPI_MspInit+0xcc>)
 80023f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80023f4:	4a13      	ldr	r2, [pc, #76]	@ (8002444 <HAL_SPI_MspInit+0xcc>)
 80023f6:	f043 0301 	orr.w	r3, r3, #1
 80023fa:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80023fe:	4b11      	ldr	r3, [pc, #68]	@ (8002444 <HAL_SPI_MspInit+0xcc>)
 8002400:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002404:	f003 0301 	and.w	r3, r3, #1
 8002408:	60bb      	str	r3, [r7, #8]
 800240a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 800240c:	23c2      	movs	r3, #194	@ 0xc2
 800240e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002412:	2302      	movs	r3, #2
 8002414:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002418:	2300      	movs	r3, #0
 800241a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800241e:	2300      	movs	r3, #0
 8002420:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002424:	2305      	movs	r3, #5
 8002426:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800242a:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 800242e:	4619      	mov	r1, r3
 8002430:	4805      	ldr	r0, [pc, #20]	@ (8002448 <HAL_SPI_MspInit+0xd0>)
 8002432:	f000 fc53 	bl	8002cdc <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002436:	bf00      	nop
 8002438:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	40013000 	.word	0x40013000
 8002444:	46020c00 	.word	0x46020c00
 8002448:	42020000 	.word	0x42020000

0800244c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b0c0      	sub	sp, #256	@ 0x100
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002454:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002458:	2200      	movs	r2, #0
 800245a:	601a      	str	r2, [r3, #0]
 800245c:	605a      	str	r2, [r3, #4]
 800245e:	609a      	str	r2, [r3, #8]
 8002460:	60da      	str	r2, [r3, #12]
 8002462:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002464:	f107 0310 	add.w	r3, r7, #16
 8002468:	22d8      	movs	r2, #216	@ 0xd8
 800246a:	2100      	movs	r1, #0
 800246c:	4618      	mov	r0, r3
 800246e:	f007 fc35 	bl	8009cdc <memset>
  if(huart->Instance==USART1)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a27      	ldr	r2, [pc, #156]	@ (8002514 <HAL_UART_MspInit+0xc8>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d145      	bne.n	8002508 <HAL_UART_MspInit+0xbc>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800247c:	f04f 0201 	mov.w	r2, #1
 8002480:	f04f 0300 	mov.w	r3, #0
 8002484:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002488:	2300      	movs	r3, #0
 800248a:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800248c:	f107 0310 	add.w	r3, r7, #16
 8002490:	4618      	mov	r0, r3
 8002492:	f002 f985 	bl	80047a0 <HAL_RCCEx_PeriphCLKConfig>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d001      	beq.n	80024a0 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 800249c:	f7ff ff4c 	bl	8002338 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80024a0:	4b1d      	ldr	r3, [pc, #116]	@ (8002518 <HAL_UART_MspInit+0xcc>)
 80024a2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80024a6:	4a1c      	ldr	r2, [pc, #112]	@ (8002518 <HAL_UART_MspInit+0xcc>)
 80024a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024ac:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80024b0:	4b19      	ldr	r3, [pc, #100]	@ (8002518 <HAL_UART_MspInit+0xcc>)
 80024b2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80024b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024ba:	60fb      	str	r3, [r7, #12]
 80024bc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024be:	4b16      	ldr	r3, [pc, #88]	@ (8002518 <HAL_UART_MspInit+0xcc>)
 80024c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80024c4:	4a14      	ldr	r2, [pc, #80]	@ (8002518 <HAL_UART_MspInit+0xcc>)
 80024c6:	f043 0301 	orr.w	r3, r3, #1
 80024ca:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80024ce:	4b12      	ldr	r3, [pc, #72]	@ (8002518 <HAL_UART_MspInit+0xcc>)
 80024d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80024d4:	f003 0301 	and.w	r3, r3, #1
 80024d8:	60bb      	str	r3, [r7, #8]
 80024da:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80024dc:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80024e0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e4:	2302      	movs	r3, #2
 80024e6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ea:	2300      	movs	r3, #0
 80024ec:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024f0:	2300      	movs	r3, #0
 80024f2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80024f6:	2307      	movs	r3, #7
 80024f8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024fc:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8002500:	4619      	mov	r1, r3
 8002502:	4806      	ldr	r0, [pc, #24]	@ (800251c <HAL_UART_MspInit+0xd0>)
 8002504:	f000 fbea 	bl	8002cdc <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8002508:	bf00      	nop
 800250a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	40013800 	.word	0x40013800
 8002518:	46020c00 	.word	0x46020c00
 800251c:	42020000 	.word	0x42020000

08002520 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002524:	bf00      	nop
 8002526:	e7fd      	b.n	8002524 <NMI_Handler+0x4>

08002528 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800252c:	bf00      	nop
 800252e:	e7fd      	b.n	800252c <HardFault_Handler+0x4>

08002530 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002534:	bf00      	nop
 8002536:	e7fd      	b.n	8002534 <MemManage_Handler+0x4>

08002538 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800253c:	bf00      	nop
 800253e:	e7fd      	b.n	800253c <BusFault_Handler+0x4>

08002540 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002544:	bf00      	nop
 8002546:	e7fd      	b.n	8002544 <UsageFault_Handler+0x4>

08002548 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800254c:	bf00      	nop
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr

08002556 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002556:	b480      	push	{r7}
 8002558:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800255a:	bf00      	nop
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr

08002564 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002568:	bf00      	nop
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr

08002572 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002572:	b580      	push	{r7, lr}
 8002574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002576:	f000 f9d9 	bl	800292c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800257a:	bf00      	nop
 800257c:	bd80      	pop	{r7, pc}

0800257e <EXTI12_IRQHandler>:

/**
  * @brief This function handles EXTI Line12 interrupt.
  */
void EXTI12_IRQHandler(void)
{
 800257e:	b580      	push	{r7, lr}
 8002580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI12_IRQn 0 */

  /* USER CODE END EXTI12_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8002582:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002586:	f000 fda1 	bl	80030cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI12_IRQn 1 */

  /* USER CODE END EXTI12_IRQn 1 */
}
 800258a:	bf00      	nop
 800258c:	bd80      	pop	{r7, pc}

0800258e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800258e:	b480      	push	{r7}
 8002590:	af00      	add	r7, sp, #0
  return 1;
 8002592:	2301      	movs	r3, #1
}
 8002594:	4618      	mov	r0, r3
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr

0800259e <_kill>:

int _kill(int pid, int sig)
{
 800259e:	b580      	push	{r7, lr}
 80025a0:	b082      	sub	sp, #8
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	6078      	str	r0, [r7, #4]
 80025a6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80025a8:	f007 fbea 	bl	8009d80 <__errno>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2216      	movs	r2, #22
 80025b0:	601a      	str	r2, [r3, #0]
  return -1;
 80025b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3708      	adds	r7, #8
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}

080025be <_exit>:

void _exit (int status)
{
 80025be:	b580      	push	{r7, lr}
 80025c0:	b082      	sub	sp, #8
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80025c6:	f04f 31ff 	mov.w	r1, #4294967295
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f7ff ffe7 	bl	800259e <_kill>
  while (1) {}    /* Make sure we hang here */
 80025d0:	bf00      	nop
 80025d2:	e7fd      	b.n	80025d0 <_exit+0x12>

080025d4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b086      	sub	sp, #24
 80025d8:	af00      	add	r7, sp, #0
 80025da:	60f8      	str	r0, [r7, #12]
 80025dc:	60b9      	str	r1, [r7, #8]
 80025de:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025e0:	2300      	movs	r3, #0
 80025e2:	617b      	str	r3, [r7, #20]
 80025e4:	e00a      	b.n	80025fc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80025e6:	f3af 8000 	nop.w
 80025ea:	4601      	mov	r1, r0
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	1c5a      	adds	r2, r3, #1
 80025f0:	60ba      	str	r2, [r7, #8]
 80025f2:	b2ca      	uxtb	r2, r1
 80025f4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	3301      	adds	r3, #1
 80025fa:	617b      	str	r3, [r7, #20]
 80025fc:	697a      	ldr	r2, [r7, #20]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	429a      	cmp	r2, r3
 8002602:	dbf0      	blt.n	80025e6 <_read+0x12>
  }

  return len;
 8002604:	687b      	ldr	r3, [r7, #4]
}
 8002606:	4618      	mov	r0, r3
 8002608:	3718      	adds	r7, #24
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}

0800260e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800260e:	b580      	push	{r7, lr}
 8002610:	b086      	sub	sp, #24
 8002612:	af00      	add	r7, sp, #0
 8002614:	60f8      	str	r0, [r7, #12]
 8002616:	60b9      	str	r1, [r7, #8]
 8002618:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800261a:	2300      	movs	r3, #0
 800261c:	617b      	str	r3, [r7, #20]
 800261e:	e009      	b.n	8002634 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	1c5a      	adds	r2, r3, #1
 8002624:	60ba      	str	r2, [r7, #8]
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	4618      	mov	r0, r3
 800262a:	f7ff fcc9 	bl	8001fc0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	3301      	adds	r3, #1
 8002632:	617b      	str	r3, [r7, #20]
 8002634:	697a      	ldr	r2, [r7, #20]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	429a      	cmp	r2, r3
 800263a:	dbf1      	blt.n	8002620 <_write+0x12>
  }
  return len;
 800263c:	687b      	ldr	r3, [r7, #4]
}
 800263e:	4618      	mov	r0, r3
 8002640:	3718      	adds	r7, #24
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}

08002646 <_close>:

int _close(int file)
{
 8002646:	b480      	push	{r7}
 8002648:	b083      	sub	sp, #12
 800264a:	af00      	add	r7, sp, #0
 800264c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800264e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002652:	4618      	mov	r0, r3
 8002654:	370c      	adds	r7, #12
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr

0800265e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800265e:	b480      	push	{r7}
 8002660:	b083      	sub	sp, #12
 8002662:	af00      	add	r7, sp, #0
 8002664:	6078      	str	r0, [r7, #4]
 8002666:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800266e:	605a      	str	r2, [r3, #4]
  return 0;
 8002670:	2300      	movs	r3, #0
}
 8002672:	4618      	mov	r0, r3
 8002674:	370c      	adds	r7, #12
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr

0800267e <_isatty>:

int _isatty(int file)
{
 800267e:	b480      	push	{r7}
 8002680:	b083      	sub	sp, #12
 8002682:	af00      	add	r7, sp, #0
 8002684:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002686:	2301      	movs	r3, #1
}
 8002688:	4618      	mov	r0, r3
 800268a:	370c      	adds	r7, #12
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr

08002694 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002694:	b480      	push	{r7}
 8002696:	b085      	sub	sp, #20
 8002698:	af00      	add	r7, sp, #0
 800269a:	60f8      	str	r0, [r7, #12]
 800269c:	60b9      	str	r1, [r7, #8]
 800269e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80026a0:	2300      	movs	r3, #0
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3714      	adds	r7, #20
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
	...

080026b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b086      	sub	sp, #24
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026b8:	4a14      	ldr	r2, [pc, #80]	@ (800270c <_sbrk+0x5c>)
 80026ba:	4b15      	ldr	r3, [pc, #84]	@ (8002710 <_sbrk+0x60>)
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026c4:	4b13      	ldr	r3, [pc, #76]	@ (8002714 <_sbrk+0x64>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d102      	bne.n	80026d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026cc:	4b11      	ldr	r3, [pc, #68]	@ (8002714 <_sbrk+0x64>)
 80026ce:	4a12      	ldr	r2, [pc, #72]	@ (8002718 <_sbrk+0x68>)
 80026d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026d2:	4b10      	ldr	r3, [pc, #64]	@ (8002714 <_sbrk+0x64>)
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4413      	add	r3, r2
 80026da:	693a      	ldr	r2, [r7, #16]
 80026dc:	429a      	cmp	r2, r3
 80026de:	d207      	bcs.n	80026f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80026e0:	f007 fb4e 	bl	8009d80 <__errno>
 80026e4:	4603      	mov	r3, r0
 80026e6:	220c      	movs	r2, #12
 80026e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026ea:	f04f 33ff 	mov.w	r3, #4294967295
 80026ee:	e009      	b.n	8002704 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80026f0:	4b08      	ldr	r3, [pc, #32]	@ (8002714 <_sbrk+0x64>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026f6:	4b07      	ldr	r3, [pc, #28]	@ (8002714 <_sbrk+0x64>)
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4413      	add	r3, r2
 80026fe:	4a05      	ldr	r2, [pc, #20]	@ (8002714 <_sbrk+0x64>)
 8002700:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002702:	68fb      	ldr	r3, [r7, #12]
}
 8002704:	4618      	mov	r0, r3
 8002706:	3718      	adds	r7, #24
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}
 800270c:	20270000 	.word	0x20270000
 8002710:	00000400 	.word	0x00000400
 8002714:	200003e8 	.word	0x200003e8
 8002718:	20000540 	.word	0x20000540

0800271c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002720:	4b18      	ldr	r3, [pc, #96]	@ (8002784 <SystemInit+0x68>)
 8002722:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002726:	4a17      	ldr	r2, [pc, #92]	@ (8002784 <SystemInit+0x68>)
 8002728:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800272c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8002730:	4b15      	ldr	r3, [pc, #84]	@ (8002788 <SystemInit+0x6c>)
 8002732:	2201      	movs	r2, #1
 8002734:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8002736:	4b14      	ldr	r3, [pc, #80]	@ (8002788 <SystemInit+0x6c>)
 8002738:	2200      	movs	r2, #0
 800273a:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 800273c:	4b12      	ldr	r3, [pc, #72]	@ (8002788 <SystemInit+0x6c>)
 800273e:	2200      	movs	r2, #0
 8002740:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8002742:	4b11      	ldr	r3, [pc, #68]	@ (8002788 <SystemInit+0x6c>)
 8002744:	2200      	movs	r2, #0
 8002746:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8002748:	4b0f      	ldr	r3, [pc, #60]	@ (8002788 <SystemInit+0x6c>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a0e      	ldr	r2, [pc, #56]	@ (8002788 <SystemInit+0x6c>)
 800274e:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8002752:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8002756:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8002758:	4b0b      	ldr	r3, [pc, #44]	@ (8002788 <SystemInit+0x6c>)
 800275a:	2200      	movs	r2, #0
 800275c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 800275e:	4b0a      	ldr	r3, [pc, #40]	@ (8002788 <SystemInit+0x6c>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a09      	ldr	r2, [pc, #36]	@ (8002788 <SystemInit+0x6c>)
 8002764:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002768:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800276a:	4b07      	ldr	r3, [pc, #28]	@ (8002788 <SystemInit+0x6c>)
 800276c:	2200      	movs	r2, #0
 800276e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002770:	4b04      	ldr	r3, [pc, #16]	@ (8002784 <SystemInit+0x68>)
 8002772:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002776:	609a      	str	r2, [r3, #8]
  #endif
}
 8002778:	bf00      	nop
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop
 8002784:	e000ed00 	.word	0xe000ed00
 8002788:	46020c00 	.word	0x46020c00

0800278c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 800278c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80027c4 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002790:	f7ff ffc4 	bl	800271c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002794:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002796:	e003      	b.n	80027a0 <LoopCopyDataInit>

08002798 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002798:	4b0b      	ldr	r3, [pc, #44]	@ (80027c8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800279a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800279c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800279e:	3104      	adds	r1, #4

080027a0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80027a0:	480a      	ldr	r0, [pc, #40]	@ (80027cc <LoopForever+0xa>)
	ldr	r3, =_edata
 80027a2:	4b0b      	ldr	r3, [pc, #44]	@ (80027d0 <LoopForever+0xe>)
	adds	r2, r0, r1
 80027a4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80027a6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80027a8:	d3f6      	bcc.n	8002798 <CopyDataInit>
	ldr	r2, =_sbss
 80027aa:	4a0a      	ldr	r2, [pc, #40]	@ (80027d4 <LoopForever+0x12>)
	b	LoopFillZerobss
 80027ac:	e002      	b.n	80027b4 <LoopFillZerobss>

080027ae <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80027ae:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80027b0:	f842 3b04 	str.w	r3, [r2], #4

080027b4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80027b4:	4b08      	ldr	r3, [pc, #32]	@ (80027d8 <LoopForever+0x16>)
	cmp	r2, r3
 80027b6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80027b8:	d3f9      	bcc.n	80027ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80027ba:	f007 fae7 	bl	8009d8c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80027be:	f7ff fb67 	bl	8001e90 <main>

080027c2 <LoopForever>:

LoopForever:
    b LoopForever
 80027c2:	e7fe      	b.n	80027c2 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80027c4:	20270000 	.word	0x20270000
	ldr	r3, =_sidata
 80027c8:	0800c364 	.word	0x0800c364
	ldr	r0, =_sdata
 80027cc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80027d0:	200001dc 	.word	0x200001dc
	ldr	r2, =_sbss
 80027d4:	200001dc 	.word	0x200001dc
	ldr	r3, = _ebss
 80027d8:	2000053c 	.word	0x2000053c

080027dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80027dc:	e7fe      	b.n	80027dc <ADC1_2_IRQHandler>
	...

080027e0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027e4:	4b12      	ldr	r3, [pc, #72]	@ (8002830 <HAL_Init+0x50>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a11      	ldr	r2, [pc, #68]	@ (8002830 <HAL_Init+0x50>)
 80027ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027f0:	2003      	movs	r0, #3
 80027f2:	f000 f98c 	bl	8002b0e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80027f6:	f001 fdf5 	bl	80043e4 <HAL_RCC_GetSysClockFreq>
 80027fa:	4602      	mov	r2, r0
 80027fc:	4b0d      	ldr	r3, [pc, #52]	@ (8002834 <HAL_Init+0x54>)
 80027fe:	6a1b      	ldr	r3, [r3, #32]
 8002800:	f003 030f 	and.w	r3, r3, #15
 8002804:	490c      	ldr	r1, [pc, #48]	@ (8002838 <HAL_Init+0x58>)
 8002806:	5ccb      	ldrb	r3, [r1, r3]
 8002808:	fa22 f303 	lsr.w	r3, r2, r3
 800280c:	4a0b      	ldr	r2, [pc, #44]	@ (800283c <HAL_Init+0x5c>)
 800280e:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002810:	2004      	movs	r0, #4
 8002812:	f000 f9d1 	bl	8002bb8 <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002816:	200f      	movs	r0, #15
 8002818:	f000 f812 	bl	8002840 <HAL_InitTick>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d001      	beq.n	8002826 <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e002      	b.n	800282c <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002826:	f7ff fd8d 	bl	8002344 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800282a:	2300      	movs	r3, #0
}
 800282c:	4618      	mov	r0, r3
 800282e:	bd80      	pop	{r7, pc}
 8002830:	40022000 	.word	0x40022000
 8002834:	46020c00 	.word	0x46020c00
 8002838:	0800bee0 	.word	0x0800bee0
 800283c:	20000008 	.word	0x20000008

08002840 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  uint32_t ticknumber = 0U;
 8002848:	2300      	movs	r3, #0
 800284a:	60fb      	str	r3, [r7, #12]
  uint32_t systicksel;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 800284c:	4b33      	ldr	r3, [pc, #204]	@ (800291c <HAL_InitTick+0xdc>)
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d101      	bne.n	8002858 <HAL_InitTick+0x18>
  {
    return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e05c      	b.n	8002912 <HAL_InitTick+0xd2>
  }

  /* Check Clock source to calculate the tickNumber */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) == SysTick_CTRL_CLKSOURCE_Msk)
 8002858:	4b31      	ldr	r3, [pc, #196]	@ (8002920 <HAL_InitTick+0xe0>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0304 	and.w	r3, r3, #4
 8002860:	2b04      	cmp	r3, #4
 8002862:	d10c      	bne.n	800287e <HAL_InitTick+0x3e>
  {
    /* HCLK selected as SysTick clock source */
    ticknumber = SystemCoreClock / (1000UL / (uint32_t)uwTickFreq);
 8002864:	4b2f      	ldr	r3, [pc, #188]	@ (8002924 <HAL_InitTick+0xe4>)
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	4b2c      	ldr	r3, [pc, #176]	@ (800291c <HAL_InitTick+0xdc>)
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	4619      	mov	r1, r3
 800286e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002872:	fbb3 f3f1 	udiv	r3, r3, r1
 8002876:	fbb2 f3f3 	udiv	r3, r2, r3
 800287a:	60fb      	str	r3, [r7, #12]
 800287c:	e037      	b.n	80028ee <HAL_InitTick+0xae>
  }
  else
  {
    systicksel = HAL_SYSTICK_GetCLKSourceConfig();
 800287e:	f000 f9f3 	bl	8002c68 <HAL_SYSTICK_GetCLKSourceConfig>
 8002882:	60b8      	str	r0, [r7, #8]
    switch (systicksel)
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	2b02      	cmp	r3, #2
 8002888:	d023      	beq.n	80028d2 <HAL_InitTick+0x92>
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	2b02      	cmp	r3, #2
 800288e:	d82d      	bhi.n	80028ec <HAL_InitTick+0xac>
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d003      	beq.n	800289e <HAL_InitTick+0x5e>
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	2b01      	cmp	r3, #1
 800289a:	d00d      	beq.n	80028b8 <HAL_InitTick+0x78>
        /* Calculate tick value */
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
        break;
      default:
        /* Nothing to do */
        break;
 800289c:	e026      	b.n	80028ec <HAL_InitTick+0xac>
        ticknumber = (SystemCoreClock / (8000UL / (uint32_t)uwTickFreq));
 800289e:	4b21      	ldr	r3, [pc, #132]	@ (8002924 <HAL_InitTick+0xe4>)
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	4b1e      	ldr	r3, [pc, #120]	@ (800291c <HAL_InitTick+0xdc>)
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	4619      	mov	r1, r3
 80028a8:	f44f 53fa 	mov.w	r3, #8000	@ 0x1f40
 80028ac:	fbb3 f3f1 	udiv	r3, r3, r1
 80028b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80028b4:	60fb      	str	r3, [r7, #12]
        break;
 80028b6:	e01a      	b.n	80028ee <HAL_InitTick+0xae>
        ticknumber = (LSI_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80028b8:	4b18      	ldr	r3, [pc, #96]	@ (800291c <HAL_InitTick+0xdc>)
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	461a      	mov	r2, r3
 80028be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80028c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80028c6:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 80028ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ce:	60fb      	str	r3, [r7, #12]
        break;
 80028d0:	e00d      	b.n	80028ee <HAL_InitTick+0xae>
        ticknumber = (LSE_VALUE / (1000UL / (uint32_t)uwTickFreq));
 80028d2:	4b12      	ldr	r3, [pc, #72]	@ (800291c <HAL_InitTick+0xdc>)
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	461a      	mov	r2, r3
 80028d8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80028dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80028e0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80028e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80028e8:	60fb      	str	r3, [r7, #12]
        break;
 80028ea:	e000      	b.n	80028ee <HAL_InitTick+0xae>
        break;
 80028ec:	bf00      	nop
    }
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(ticknumber) > 0U)
 80028ee:	68f8      	ldr	r0, [r7, #12]
 80028f0:	f000 f940 	bl	8002b74 <HAL_SYSTICK_Config>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d001      	beq.n	80028fe <HAL_InitTick+0xbe>
  {
    return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e009      	b.n	8002912 <HAL_InitTick+0xd2>
  }

  /* Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028fe:	2200      	movs	r2, #0
 8002900:	6879      	ldr	r1, [r7, #4]
 8002902:	f04f 30ff 	mov.w	r0, #4294967295
 8002906:	f000 f90d 	bl	8002b24 <HAL_NVIC_SetPriority>
  uwTickPrio = TickPriority;
 800290a:	4a07      	ldr	r2, [pc, #28]	@ (8002928 <HAL_InitTick+0xe8>)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002910:	2300      	movs	r3, #0
}
 8002912:	4618      	mov	r0, r3
 8002914:	3710      	adds	r7, #16
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	20000010 	.word	0x20000010
 8002920:	e000e010 	.word	0xe000e010
 8002924:	20000008 	.word	0x20000008
 8002928:	2000000c 	.word	0x2000000c

0800292c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800292c:	b480      	push	{r7}
 800292e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002930:	4b06      	ldr	r3, [pc, #24]	@ (800294c <HAL_IncTick+0x20>)
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	461a      	mov	r2, r3
 8002936:	4b06      	ldr	r3, [pc, #24]	@ (8002950 <HAL_IncTick+0x24>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4413      	add	r3, r2
 800293c:	4a04      	ldr	r2, [pc, #16]	@ (8002950 <HAL_IncTick+0x24>)
 800293e:	6013      	str	r3, [r2, #0]
}
 8002940:	bf00      	nop
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr
 800294a:	bf00      	nop
 800294c:	20000010 	.word	0x20000010
 8002950:	200003ec 	.word	0x200003ec

08002954 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002954:	b480      	push	{r7}
 8002956:	af00      	add	r7, sp, #0
  return uwTick;
 8002958:	4b03      	ldr	r3, [pc, #12]	@ (8002968 <HAL_GetTick+0x14>)
 800295a:	681b      	ldr	r3, [r3, #0]
}
 800295c:	4618      	mov	r0, r3
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop
 8002968:	200003ec 	.word	0x200003ec

0800296c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002974:	f7ff ffee 	bl	8002954 <HAL_GetTick>
 8002978:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002984:	d005      	beq.n	8002992 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002986:	4b0a      	ldr	r3, [pc, #40]	@ (80029b0 <HAL_Delay+0x44>)
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	461a      	mov	r2, r3
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	4413      	add	r3, r2
 8002990:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002992:	bf00      	nop
 8002994:	f7ff ffde 	bl	8002954 <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	68fa      	ldr	r2, [r7, #12]
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d8f7      	bhi.n	8002994 <HAL_Delay+0x28>
  {
  }
}
 80029a4:	bf00      	nop
 80029a6:	bf00      	nop
 80029a8:	3710      	adds	r7, #16
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	20000010 	.word	0x20000010

080029b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b085      	sub	sp, #20
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f003 0307 	and.w	r3, r3, #7
 80029c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029c4:	4b0c      	ldr	r3, [pc, #48]	@ (80029f8 <__NVIC_SetPriorityGrouping+0x44>)
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029ca:	68ba      	ldr	r2, [r7, #8]
 80029cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80029d0:	4013      	ands	r3, r2
 80029d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80029e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029e6:	4a04      	ldr	r2, [pc, #16]	@ (80029f8 <__NVIC_SetPriorityGrouping+0x44>)
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	60d3      	str	r3, [r2, #12]
}
 80029ec:	bf00      	nop
 80029ee:	3714      	adds	r7, #20
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr
 80029f8:	e000ed00 	.word	0xe000ed00

080029fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029fc:	b480      	push	{r7}
 80029fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a00:	4b04      	ldr	r3, [pc, #16]	@ (8002a14 <__NVIC_GetPriorityGrouping+0x18>)
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	0a1b      	lsrs	r3, r3, #8
 8002a06:	f003 0307 	and.w	r3, r3, #7
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr
 8002a14:	e000ed00 	.word	0xe000ed00

08002a18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	4603      	mov	r3, r0
 8002a20:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002a22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	db0b      	blt.n	8002a42 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a2a:	88fb      	ldrh	r3, [r7, #6]
 8002a2c:	f003 021f 	and.w	r2, r3, #31
 8002a30:	4907      	ldr	r1, [pc, #28]	@ (8002a50 <__NVIC_EnableIRQ+0x38>)
 8002a32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a36:	095b      	lsrs	r3, r3, #5
 8002a38:	2001      	movs	r0, #1
 8002a3a:	fa00 f202 	lsl.w	r2, r0, r2
 8002a3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a42:	bf00      	nop
 8002a44:	370c      	adds	r7, #12
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr
 8002a4e:	bf00      	nop
 8002a50:	e000e100 	.word	0xe000e100

08002a54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	6039      	str	r1, [r7, #0]
 8002a5e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002a60:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	db0a      	blt.n	8002a7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	b2da      	uxtb	r2, r3
 8002a6c:	490c      	ldr	r1, [pc, #48]	@ (8002aa0 <__NVIC_SetPriority+0x4c>)
 8002a6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a72:	0112      	lsls	r2, r2, #4
 8002a74:	b2d2      	uxtb	r2, r2
 8002a76:	440b      	add	r3, r1
 8002a78:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a7c:	e00a      	b.n	8002a94 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	b2da      	uxtb	r2, r3
 8002a82:	4908      	ldr	r1, [pc, #32]	@ (8002aa4 <__NVIC_SetPriority+0x50>)
 8002a84:	88fb      	ldrh	r3, [r7, #6]
 8002a86:	f003 030f 	and.w	r3, r3, #15
 8002a8a:	3b04      	subs	r3, #4
 8002a8c:	0112      	lsls	r2, r2, #4
 8002a8e:	b2d2      	uxtb	r2, r2
 8002a90:	440b      	add	r3, r1
 8002a92:	761a      	strb	r2, [r3, #24]
}
 8002a94:	bf00      	nop
 8002a96:	370c      	adds	r7, #12
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr
 8002aa0:	e000e100 	.word	0xe000e100
 8002aa4:	e000ed00 	.word	0xe000ed00

08002aa8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b089      	sub	sp, #36	@ 0x24
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	60b9      	str	r1, [r7, #8]
 8002ab2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	f003 0307 	and.w	r3, r3, #7
 8002aba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	f1c3 0307 	rsb	r3, r3, #7
 8002ac2:	2b04      	cmp	r3, #4
 8002ac4:	bf28      	it	cs
 8002ac6:	2304      	movcs	r3, #4
 8002ac8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	3304      	adds	r3, #4
 8002ace:	2b06      	cmp	r3, #6
 8002ad0:	d902      	bls.n	8002ad8 <NVIC_EncodePriority+0x30>
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	3b03      	subs	r3, #3
 8002ad6:	e000      	b.n	8002ada <NVIC_EncodePriority+0x32>
 8002ad8:	2300      	movs	r3, #0
 8002ada:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002adc:	f04f 32ff 	mov.w	r2, #4294967295
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae6:	43da      	mvns	r2, r3
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	401a      	ands	r2, r3
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002af0:	f04f 31ff 	mov.w	r1, #4294967295
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	fa01 f303 	lsl.w	r3, r1, r3
 8002afa:	43d9      	mvns	r1, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b00:	4313      	orrs	r3, r2
         );
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3724      	adds	r7, #36	@ 0x24
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr

08002b0e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b0e:	b580      	push	{r7, lr}
 8002b10:	b082      	sub	sp, #8
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f7ff ff4c 	bl	80029b4 <__NVIC_SetPriorityGrouping>
}
 8002b1c:	bf00      	nop
 8002b1e:	3708      	adds	r7, #8
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b086      	sub	sp, #24
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	60b9      	str	r1, [r7, #8]
 8002b2e:	607a      	str	r2, [r7, #4]
 8002b30:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002b32:	f7ff ff63 	bl	80029fc <__NVIC_GetPriorityGrouping>
 8002b36:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b38:	687a      	ldr	r2, [r7, #4]
 8002b3a:	68b9      	ldr	r1, [r7, #8]
 8002b3c:	6978      	ldr	r0, [r7, #20]
 8002b3e:	f7ff ffb3 	bl	8002aa8 <NVIC_EncodePriority>
 8002b42:	4602      	mov	r2, r0
 8002b44:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002b48:	4611      	mov	r1, r2
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7ff ff82 	bl	8002a54 <__NVIC_SetPriority>
}
 8002b50:	bf00      	nop
 8002b52:	3718      	adds	r7, #24
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}

08002b58 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	4603      	mov	r3, r0
 8002b60:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7ff ff56 	bl	8002a18 <__NVIC_EnableIRQ>
}
 8002b6c:	bf00      	nop
 8002b6e:	3708      	adds	r7, #8
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  if ((TicksNumb - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	3b01      	subs	r3, #1
 8002b80:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b84:	d301      	bcc.n	8002b8a <HAL_SYSTICK_Config+0x16>
  {
    /* Reload value impossible */
    return (1UL);
 8002b86:	2301      	movs	r3, #1
 8002b88:	e00d      	b.n	8002ba6 <HAL_SYSTICK_Config+0x32>
  }

  /* Set reload register */
  WRITE_REG(SysTick->LOAD, (uint32_t)(TicksNumb - 1UL));
 8002b8a:	4a0a      	ldr	r2, [pc, #40]	@ (8002bb4 <HAL_SYSTICK_Config+0x40>)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	3b01      	subs	r3, #1
 8002b90:	6053      	str	r3, [r2, #4]

  /* Load the SysTick Counter Value */
  WRITE_REG(SysTick->VAL, 0UL);
 8002b92:	4b08      	ldr	r3, [pc, #32]	@ (8002bb4 <HAL_SYSTICK_Config+0x40>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	609a      	str	r2, [r3, #8]

  /* Enable SysTick IRQ and SysTick Timer */
  SET_BIT(SysTick->CTRL, (SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk));
 8002b98:	4b06      	ldr	r3, [pc, #24]	@ (8002bb4 <HAL_SYSTICK_Config+0x40>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a05      	ldr	r2, [pc, #20]	@ (8002bb4 <HAL_SYSTICK_Config+0x40>)
 8002b9e:	f043 0303 	orr.w	r3, r3, #3
 8002ba2:	6013      	str	r3, [r2, #0]

  /* Function successful */
  return (0UL);
 8002ba4:	2300      	movs	r3, #0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	370c      	adds	r7, #12
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	e000e010 	.word	0xe000e010

08002bb8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2b04      	cmp	r3, #4
 8002bc4:	d844      	bhi.n	8002c50 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8002bc6:	a201      	add	r2, pc, #4	@ (adr r2, 8002bcc <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8002bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bcc:	08002bef 	.word	0x08002bef
 8002bd0:	08002c0d 	.word	0x08002c0d
 8002bd4:	08002c2f 	.word	0x08002c2f
 8002bd8:	08002c51 	.word	0x08002c51
 8002bdc:	08002be1 	.word	0x08002be1
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002be0:	4b1f      	ldr	r3, [pc, #124]	@ (8002c60 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a1e      	ldr	r2, [pc, #120]	@ (8002c60 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002be6:	f043 0304 	orr.w	r3, r3, #4
 8002bea:	6013      	str	r3, [r2, #0]
      break;
 8002bec:	e031      	b.n	8002c52 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002bee:	4b1c      	ldr	r3, [pc, #112]	@ (8002c60 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a1b      	ldr	r2, [pc, #108]	@ (8002c60 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002bf4:	f023 0304 	bic.w	r3, r3, #4
 8002bf8:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8002bfa:	4b1a      	ldr	r3, [pc, #104]	@ (8002c64 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002bfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002c00:	4a18      	ldr	r2, [pc, #96]	@ (8002c64 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002c02:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002c06:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8002c0a:	e022      	b.n	8002c52 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002c0c:	4b14      	ldr	r3, [pc, #80]	@ (8002c60 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a13      	ldr	r2, [pc, #76]	@ (8002c60 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002c12:	f023 0304 	bic.w	r3, r3, #4
 8002c16:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8002c18:	4b12      	ldr	r3, [pc, #72]	@ (8002c64 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002c1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002c1e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002c22:	4a10      	ldr	r2, [pc, #64]	@ (8002c64 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002c24:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002c28:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8002c2c:	e011      	b.n	8002c52 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002c2e:	4b0c      	ldr	r3, [pc, #48]	@ (8002c60 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a0b      	ldr	r2, [pc, #44]	@ (8002c60 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002c34:	f023 0304 	bic.w	r3, r3, #4
 8002c38:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8002c3a:	4b0a      	ldr	r3, [pc, #40]	@ (8002c64 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002c3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002c40:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002c44:	4a07      	ldr	r2, [pc, #28]	@ (8002c64 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002c46:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002c4a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8002c4e:	e000      	b.n	8002c52 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8002c50:	bf00      	nop
  }
}
 8002c52:	bf00      	nop
 8002c54:	370c      	adds	r7, #12
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop
 8002c60:	e000e010 	.word	0xe000e010
 8002c64:	46020c00 	.word	0x46020c00

08002c68 <HAL_SYSTICK_GetCLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_LSE: LSE clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  */
uint32_t HAL_SYSTICK_GetCLKSourceConfig(void)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
  uint32_t systick_source;
  uint32_t systick_rcc_source;

  /* Read SysTick->CTRL register for internal or external clock source */
  if (READ_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk) != 0U)
 8002c6e:	4b19      	ldr	r3, [pc, #100]	@ (8002cd4 <HAL_SYSTICK_GetCLKSourceConfig+0x6c>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0304 	and.w	r3, r3, #4
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d002      	beq.n	8002c80 <HAL_SYSTICK_GetCLKSourceConfig+0x18>
  {
    /* Internal clock source */
    systick_source = SYSTICK_CLKSOURCE_HCLK;
 8002c7a:	2304      	movs	r3, #4
 8002c7c:	607b      	str	r3, [r7, #4]
 8002c7e:	e021      	b.n	8002cc4 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>
  }
  else
  {
    /* External clock source, check the selected one in RCC */
    systick_rcc_source = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL);
 8002c80:	4b15      	ldr	r3, [pc, #84]	@ (8002cd8 <HAL_SYSTICK_GetCLKSourceConfig+0x70>)
 8002c82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002c86:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8002c8a:	603b      	str	r3, [r7, #0]

    switch (systick_rcc_source)
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002c92:	d011      	beq.n	8002cb8 <HAL_SYSTICK_GetCLKSourceConfig+0x50>
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002c9a:	d810      	bhi.n	8002cbe <HAL_SYSTICK_GetCLKSourceConfig+0x56>
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d004      	beq.n	8002cac <HAL_SYSTICK_GetCLKSourceConfig+0x44>
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002ca8:	d003      	beq.n	8002cb2 <HAL_SYSTICK_GetCLKSourceConfig+0x4a>
 8002caa:	e008      	b.n	8002cbe <HAL_SYSTICK_GetCLKSourceConfig+0x56>
    {
      case (0x00000000U):
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8002cac:	2300      	movs	r3, #0
 8002cae:	607b      	str	r3, [r7, #4]
        break;
 8002cb0:	e008      	b.n	8002cc4 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_0):
        systick_source = SYSTICK_CLKSOURCE_LSI;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	607b      	str	r3, [r7, #4]
        break;
 8002cb6:	e005      	b.n	8002cc4 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      case (RCC_CCIPR1_SYSTICKSEL_1):
        systick_source = SYSTICK_CLKSOURCE_LSE;
 8002cb8:	2302      	movs	r3, #2
 8002cba:	607b      	str	r3, [r7, #4]
        break;
 8002cbc:	e002      	b.n	8002cc4 <HAL_SYSTICK_GetCLKSourceConfig+0x5c>

      default:
        systick_source = SYSTICK_CLKSOURCE_HCLK_DIV8;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	607b      	str	r3, [r7, #4]
        break;
 8002cc2:	bf00      	nop
    }
  }
  return systick_source;
 8002cc4:	687b      	ldr	r3, [r7, #4]
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	370c      	adds	r7, #12
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr
 8002cd2:	bf00      	nop
 8002cd4:	e000e010 	.word	0xe000e010
 8002cd8:	46020c00 	.word	0x46020c00

08002cdc <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b089      	sub	sp, #36	@ 0x24
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002cee:	e1c2      	b.n	8003076 <HAL_GPIO_Init+0x39a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	2101      	movs	r1, #1
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	fa01 f303 	lsl.w	r3, r1, r3
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	f000 81b2 	beq.w	8003070 <HAL_GPIO_Init+0x394>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	4a55      	ldr	r2, [pc, #340]	@ (8002e64 <HAL_GPIO_Init+0x188>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d15d      	bne.n	8002dd0 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d22:	43db      	mvns	r3, r3
 8002d24:	69fa      	ldr	r2, [r7, #28]
 8002d26:	4013      	ands	r3, r2
 8002d28:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	f003 0201 	and.w	r2, r3, #1
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	fa02 f303 	lsl.w	r3, r2, r3
 8002d38:	69fa      	ldr	r2, [r7, #28]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	69fa      	ldr	r2, [r7, #28]
 8002d42:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8002d44:	4a48      	ldr	r2, [pc, #288]	@ (8002e68 <HAL_GPIO_Init+0x18c>)
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002d4c:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8002d4e:	4a46      	ldr	r2, [pc, #280]	@ (8002e68 <HAL_GPIO_Init+0x18c>)
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	00db      	lsls	r3, r3, #3
 8002d54:	4413      	add	r3, r2
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	08da      	lsrs	r2, r3, #3
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	3208      	adds	r2, #8
 8002d62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d66:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8002d68:	69bb      	ldr	r3, [r7, #24]
 8002d6a:	f003 0307 	and.w	r3, r3, #7
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	220f      	movs	r2, #15
 8002d72:	fa02 f303 	lsl.w	r3, r2, r3
 8002d76:	43db      	mvns	r3, r3
 8002d78:	69fa      	ldr	r2, [r7, #28]
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8002d7e:	69bb      	ldr	r3, [r7, #24]
 8002d80:	f003 0307 	and.w	r3, r3, #7
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	220b      	movs	r2, #11
 8002d88:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8c:	69fa      	ldr	r2, [r7, #28]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8002d92:	69bb      	ldr	r3, [r7, #24]
 8002d94:	08da      	lsrs	r2, r3, #3
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	3208      	adds	r2, #8
 8002d9a:	69f9      	ldr	r1, [r7, #28]
 8002d9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	005b      	lsls	r3, r3, #1
 8002daa:	2203      	movs	r2, #3
 8002dac:	fa02 f303 	lsl.w	r3, r2, r3
 8002db0:	43db      	mvns	r3, r3
 8002db2:	69fa      	ldr	r2, [r7, #28]
 8002db4:	4013      	ands	r3, r2
 8002db6:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	005b      	lsls	r3, r3, #1
 8002dbc:	2202      	movs	r2, #2
 8002dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc2:	69fa      	ldr	r2, [r7, #28]
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	69fa      	ldr	r2, [r7, #28]
 8002dcc:	601a      	str	r2, [r3, #0]
 8002dce:	e067      	b.n	8002ea0 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d003      	beq.n	8002de0 <HAL_GPIO_Init+0x104>
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	2b12      	cmp	r3, #18
 8002dde:	d145      	bne.n	8002e6c <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	08da      	lsrs	r2, r3, #3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	3208      	adds	r2, #8
 8002de8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dec:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	f003 0307 	and.w	r3, r3, #7
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	220f      	movs	r2, #15
 8002df8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfc:	43db      	mvns	r3, r3
 8002dfe:	69fa      	ldr	r2, [r7, #28]
 8002e00:	4013      	ands	r3, r2
 8002e02:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	691b      	ldr	r3, [r3, #16]
 8002e08:	f003 020f 	and.w	r2, r3, #15
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	f003 0307 	and.w	r3, r3, #7
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	fa02 f303 	lsl.w	r3, r2, r3
 8002e18:	69fa      	ldr	r2, [r7, #28]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	08da      	lsrs	r2, r3, #3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	3208      	adds	r2, #8
 8002e26:	69f9      	ldr	r1, [r7, #28]
 8002e28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8002e32:	69bb      	ldr	r3, [r7, #24]
 8002e34:	005b      	lsls	r3, r3, #1
 8002e36:	2203      	movs	r2, #3
 8002e38:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3c:	43db      	mvns	r3, r3
 8002e3e:	69fa      	ldr	r2, [r7, #28]
 8002e40:	4013      	ands	r3, r2
 8002e42:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	f003 0203 	and.w	r2, r3, #3
 8002e4c:	69bb      	ldr	r3, [r7, #24]
 8002e4e:	005b      	lsls	r3, r3, #1
 8002e50:	fa02 f303 	lsl.w	r3, r2, r3
 8002e54:	69fa      	ldr	r2, [r7, #28]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	69fa      	ldr	r2, [r7, #28]
 8002e5e:	601a      	str	r2, [r3, #0]
 8002e60:	e01e      	b.n	8002ea0 <HAL_GPIO_Init+0x1c4>
 8002e62:	bf00      	nop
 8002e64:	46020000 	.word	0x46020000
 8002e68:	0800bf38 	.word	0x0800bf38
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8002e72:	69bb      	ldr	r3, [r7, #24]
 8002e74:	005b      	lsls	r3, r3, #1
 8002e76:	2203      	movs	r2, #3
 8002e78:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7c:	43db      	mvns	r3, r3
 8002e7e:	69fa      	ldr	r2, [r7, #28]
 8002e80:	4013      	ands	r3, r2
 8002e82:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f003 0203 	and.w	r2, r3, #3
 8002e8c:	69bb      	ldr	r3, [r7, #24]
 8002e8e:	005b      	lsls	r3, r3, #1
 8002e90:	fa02 f303 	lsl.w	r3, r2, r3
 8002e94:	69fa      	ldr	r2, [r7, #28]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	69fa      	ldr	r2, [r7, #28]
 8002e9e:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d00b      	beq.n	8002ec0 <HAL_GPIO_Init+0x1e4>
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	d007      	beq.n	8002ec0 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002eb4:	2b11      	cmp	r3, #17
 8002eb6:	d003      	beq.n	8002ec0 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	2b12      	cmp	r3, #18
 8002ebe:	d130      	bne.n	8002f22 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002ec6:	69bb      	ldr	r3, [r7, #24]
 8002ec8:	005b      	lsls	r3, r3, #1
 8002eca:	2203      	movs	r2, #3
 8002ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed0:	43db      	mvns	r3, r3
 8002ed2:	69fa      	ldr	r2, [r7, #28]
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	68da      	ldr	r2, [r3, #12]
 8002edc:	69bb      	ldr	r3, [r7, #24]
 8002ede:	005b      	lsls	r3, r3, #1
 8002ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee4:	69fa      	ldr	r2, [r7, #28]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	69fa      	ldr	r2, [r7, #28]
 8002eee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	69bb      	ldr	r3, [r7, #24]
 8002efa:	fa02 f303 	lsl.w	r3, r2, r3
 8002efe:	43db      	mvns	r3, r3
 8002f00:	69fa      	ldr	r2, [r7, #28]
 8002f02:	4013      	ands	r3, r2
 8002f04:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	091b      	lsrs	r3, r3, #4
 8002f0c:	f003 0201 	and.w	r2, r3, #1
 8002f10:	69bb      	ldr	r3, [r7, #24]
 8002f12:	fa02 f303 	lsl.w	r3, r2, r3
 8002f16:	69fa      	ldr	r2, [r7, #28]
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	69fa      	ldr	r2, [r7, #28]
 8002f20:	605a      	str	r2, [r3, #4]
      }

      if ((pGPIO_Init->Mode != GPIO_MODE_ANALOG) || 
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	2b03      	cmp	r3, #3
 8002f28:	d107      	bne.n	8002f3a <HAL_GPIO_Init+0x25e>
          ((pGPIO_Init->Mode == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode != GPIO_MODE_ANALOG) || 
 8002f2e:	2b03      	cmp	r3, #3
 8002f30:	d11b      	bne.n	8002f6a <HAL_GPIO_Init+0x28e>
          ((pGPIO_Init->Mode == GPIO_MODE_ANALOG) && (pGPIO_Init->Pull != GPIO_PULLUP)))
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d017      	beq.n	8002f6a <HAL_GPIO_Init+0x28e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	68db      	ldr	r3, [r3, #12]
 8002f3e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8002f40:	69bb      	ldr	r3, [r7, #24]
 8002f42:	005b      	lsls	r3, r3, #1
 8002f44:	2203      	movs	r2, #3
 8002f46:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4a:	43db      	mvns	r3, r3
 8002f4c:	69fa      	ldr	r2, [r7, #28]
 8002f4e:	4013      	ands	r3, r2
 8002f50:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	689a      	ldr	r2, [r3, #8]
 8002f56:	69bb      	ldr	r3, [r7, #24]
 8002f58:	005b      	lsls	r3, r3, #1
 8002f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5e:	69fa      	ldr	r2, [r7, #28]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	69fa      	ldr	r2, [r7, #28]
 8002f68:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d07c      	beq.n	8003070 <HAL_GPIO_Init+0x394>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8002f76:	4a47      	ldr	r2, [pc, #284]	@ (8003094 <HAL_GPIO_Init+0x3b8>)
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	089b      	lsrs	r3, r3, #2
 8002f7c:	3318      	adds	r3, #24
 8002f7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f82:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	f003 0303 	and.w	r3, r3, #3
 8002f8a:	00db      	lsls	r3, r3, #3
 8002f8c:	220f      	movs	r2, #15
 8002f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f92:	43db      	mvns	r3, r3
 8002f94:	69fa      	ldr	r2, [r7, #28]
 8002f96:	4013      	ands	r3, r2
 8002f98:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	0a9a      	lsrs	r2, r3, #10
 8002f9e:	4b3e      	ldr	r3, [pc, #248]	@ (8003098 <HAL_GPIO_Init+0x3bc>)
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	697a      	ldr	r2, [r7, #20]
 8002fa4:	f002 0203 	and.w	r2, r2, #3
 8002fa8:	00d2      	lsls	r2, r2, #3
 8002faa:	4093      	lsls	r3, r2
 8002fac:	69fa      	ldr	r2, [r7, #28]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8002fb2:	4938      	ldr	r1, [pc, #224]	@ (8003094 <HAL_GPIO_Init+0x3b8>)
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	089b      	lsrs	r3, r3, #2
 8002fb8:	3318      	adds	r3, #24
 8002fba:	69fa      	ldr	r2, [r7, #28]
 8002fbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002fc0:	4b34      	ldr	r3, [pc, #208]	@ (8003094 <HAL_GPIO_Init+0x3b8>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	43db      	mvns	r3, r3
 8002fca:	69fa      	ldr	r2, [r7, #28]
 8002fcc:	4013      	ands	r3, r2
 8002fce:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d003      	beq.n	8002fe4 <HAL_GPIO_Init+0x308>
        {
          tmp |= iocurrent;
 8002fdc:	69fa      	ldr	r2, [r7, #28]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8002fe4:	4a2b      	ldr	r2, [pc, #172]	@ (8003094 <HAL_GPIO_Init+0x3b8>)
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8002fea:	4b2a      	ldr	r3, [pc, #168]	@ (8003094 <HAL_GPIO_Init+0x3b8>)
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	43db      	mvns	r3, r3
 8002ff4:	69fa      	ldr	r2, [r7, #28]
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d003      	beq.n	800300e <HAL_GPIO_Init+0x332>
        {
          tmp |= iocurrent;
 8003006:	69fa      	ldr	r2, [r7, #28]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	4313      	orrs	r3, r2
 800300c:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 800300e:	4a21      	ldr	r2, [pc, #132]	@ (8003094 <HAL_GPIO_Init+0x3b8>)
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8003014:	4b1f      	ldr	r3, [pc, #124]	@ (8003094 <HAL_GPIO_Init+0x3b8>)
 8003016:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800301a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	43db      	mvns	r3, r3
 8003020:	69fa      	ldr	r2, [r7, #28]
 8003022:	4013      	ands	r3, r2
 8003024:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d003      	beq.n	800303a <HAL_GPIO_Init+0x35e>
        {
          tmp |= iocurrent;
 8003032:	69fa      	ldr	r2, [r7, #28]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	4313      	orrs	r3, r2
 8003038:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 800303a:	4a16      	ldr	r2, [pc, #88]	@ (8003094 <HAL_GPIO_Init+0x3b8>)
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8003042:	4b14      	ldr	r3, [pc, #80]	@ (8003094 <HAL_GPIO_Init+0x3b8>)
 8003044:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003048:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	43db      	mvns	r3, r3
 800304e:	69fa      	ldr	r2, [r7, #28]
 8003050:	4013      	ands	r3, r2
 8003052:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800305c:	2b00      	cmp	r3, #0
 800305e:	d003      	beq.n	8003068 <HAL_GPIO_Init+0x38c>
        {
          tmp |= iocurrent;
 8003060:	69fa      	ldr	r2, [r7, #28]
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	4313      	orrs	r3, r2
 8003066:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8003068:	4a0a      	ldr	r2, [pc, #40]	@ (8003094 <HAL_GPIO_Init+0x3b8>)
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	3301      	adds	r3, #1
 8003074:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	fa22 f303 	lsr.w	r3, r2, r3
 8003080:	2b00      	cmp	r3, #0
 8003082:	f47f ae35 	bne.w	8002cf0 <HAL_GPIO_Init+0x14>
  }
}
 8003086:	bf00      	nop
 8003088:	bf00      	nop
 800308a:	3724      	adds	r7, #36	@ 0x24
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr
 8003094:	46022000 	.word	0x46022000
 8003098:	002f7f7f 	.word	0x002f7f7f

0800309c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	460b      	mov	r3, r1
 80030a6:	807b      	strh	r3, [r7, #2]
 80030a8:	4613      	mov	r3, r2
 80030aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80030ac:	787b      	ldrb	r3, [r7, #1]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d003      	beq.n	80030ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80030b2:	887a      	ldrh	r2, [r7, #2]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 80030b8:	e002      	b.n	80030c0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 80030ba:	887a      	ldrh	r2, [r7, #2]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80030c0:	bf00      	nop
 80030c2:	370c      	adds	r7, #12
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr

080030cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b082      	sub	sp, #8
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	4603      	mov	r3, r0
 80030d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 80030d6:	4b0f      	ldr	r3, [pc, #60]	@ (8003114 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80030d8:	68da      	ldr	r2, [r3, #12]
 80030da:	88fb      	ldrh	r3, [r7, #6]
 80030dc:	4013      	ands	r3, r2
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d006      	beq.n	80030f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80030e2:	4a0c      	ldr	r2, [pc, #48]	@ (8003114 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80030e4:	88fb      	ldrh	r3, [r7, #6]
 80030e6:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80030e8:	88fb      	ldrh	r3, [r7, #6]
 80030ea:	4618      	mov	r0, r3
 80030ec:	f7fe ff90 	bl	8002010 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 80030f0:	4b08      	ldr	r3, [pc, #32]	@ (8003114 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80030f2:	691a      	ldr	r2, [r3, #16]
 80030f4:	88fb      	ldrh	r3, [r7, #6]
 80030f6:	4013      	ands	r3, r2
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d006      	beq.n	800310a <HAL_GPIO_EXTI_IRQHandler+0x3e>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80030fc:	4a05      	ldr	r2, [pc, #20]	@ (8003114 <HAL_GPIO_EXTI_IRQHandler+0x48>)
 80030fe:	88fb      	ldrh	r3, [r7, #6]
 8003100:	6113      	str	r3, [r2, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8003102:	88fb      	ldrh	r3, [r7, #6]
 8003104:	4618      	mov	r0, r3
 8003106:	f000 f807 	bl	8003118 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 800310a:	bf00      	nop
 800310c:	3708      	adds	r7, #8
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	46022000 	.word	0x46022000

08003118 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line falling detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	4603      	mov	r3, r0
 8003120:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8003122:	bf00      	nop
 8003124:	370c      	adds	r7, #12
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr
	...

08003130 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003130:	b480      	push	{r7}
 8003132:	b085      	sub	sp, #20
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8003138:	4b39      	ldr	r3, [pc, #228]	@ (8003220 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800313a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800313c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003140:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8003142:	68ba      	ldr	r2, [r7, #8]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	429a      	cmp	r2, r3
 8003148:	d10b      	bne.n	8003162 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003150:	d905      	bls.n	800315e <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8003152:	4b33      	ldr	r3, [pc, #204]	@ (8003220 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003154:	68db      	ldr	r3, [r3, #12]
 8003156:	4a32      	ldr	r2, [pc, #200]	@ (8003220 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003158:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800315c:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 800315e:	2300      	movs	r3, #0
 8003160:	e057      	b.n	8003212 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003168:	d90a      	bls.n	8003180 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 800316a:	4b2d      	ldr	r3, [pc, #180]	@ (8003220 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4313      	orrs	r3, r2
 8003176:	4a2a      	ldr	r2, [pc, #168]	@ (8003220 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003178:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800317c:	60d3      	str	r3, [r2, #12]
 800317e:	e007      	b.n	8003190 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8003180:	4b27      	ldr	r3, [pc, #156]	@ (8003220 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8003188:	4925      	ldr	r1, [pc, #148]	@ (8003220 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4313      	orrs	r3, r2
 800318e:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003190:	4b24      	ldr	r3, [pc, #144]	@ (8003224 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a24      	ldr	r2, [pc, #144]	@ (8003228 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8003196:	fba2 2303 	umull	r2, r3, r2, r3
 800319a:	099b      	lsrs	r3, r3, #6
 800319c:	2232      	movs	r2, #50	@ 0x32
 800319e:	fb02 f303 	mul.w	r3, r2, r3
 80031a2:	4a21      	ldr	r2, [pc, #132]	@ (8003228 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80031a4:	fba2 2303 	umull	r2, r3, r2, r3
 80031a8:	099b      	lsrs	r3, r3, #6
 80031aa:	3301      	adds	r3, #1
 80031ac:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80031ae:	e002      	b.n	80031b6 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	3b01      	subs	r3, #1
 80031b4:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80031b6:	4b1a      	ldr	r3, [pc, #104]	@ (8003220 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80031b8:	68db      	ldr	r3, [r3, #12]
 80031ba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d102      	bne.n	80031c8 <HAL_PWREx_ControlVoltageScaling+0x98>
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d1f3      	bne.n	80031b0 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d01b      	beq.n	8003206 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80031ce:	4b15      	ldr	r3, [pc, #84]	@ (8003224 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a15      	ldr	r2, [pc, #84]	@ (8003228 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80031d4:	fba2 2303 	umull	r2, r3, r2, r3
 80031d8:	099b      	lsrs	r3, r3, #6
 80031da:	2232      	movs	r2, #50	@ 0x32
 80031dc:	fb02 f303 	mul.w	r3, r2, r3
 80031e0:	4a11      	ldr	r2, [pc, #68]	@ (8003228 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80031e2:	fba2 2303 	umull	r2, r3, r2, r3
 80031e6:	099b      	lsrs	r3, r3, #6
 80031e8:	3301      	adds	r3, #1
 80031ea:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80031ec:	e002      	b.n	80031f4 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	3b01      	subs	r3, #1
 80031f2:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80031f4:	4b0a      	ldr	r3, [pc, #40]	@ (8003220 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80031f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d102      	bne.n	8003206 <HAL_PWREx_ControlVoltageScaling+0xd6>
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d1f3      	bne.n	80031ee <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d101      	bne.n	8003210 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 800320c:	2303      	movs	r3, #3
 800320e:	e000      	b.n	8003212 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8003210:	2300      	movs	r3, #0
}
 8003212:	4618      	mov	r0, r3
 8003214:	3714      	adds	r7, #20
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr
 800321e:	bf00      	nop
 8003220:	46020800 	.word	0x46020800
 8003224:	20000008 	.word	0x20000008
 8003228:	10624dd3 	.word	0x10624dd3

0800322c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800322c:	b480      	push	{r7}
 800322e:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8003230:	4b04      	ldr	r3, [pc, #16]	@ (8003244 <HAL_PWREx_GetVoltageRange+0x18>)
 8003232:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003234:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8003238:	4618      	mov	r0, r3
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr
 8003242:	bf00      	nop
 8003244:	46020800 	.word	0x46020800

08003248 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b08e      	sub	sp, #56	@ 0x38
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8003250:	2300      	movs	r3, #0
 8003252:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d102      	bne.n	8003262 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	f000 bec8 	b.w	8003ff2 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003262:	4b99      	ldr	r3, [pc, #612]	@ (80034c8 <HAL_RCC_OscConfig+0x280>)
 8003264:	69db      	ldr	r3, [r3, #28]
 8003266:	f003 030c 	and.w	r3, r3, #12
 800326a:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800326c:	4b96      	ldr	r3, [pc, #600]	@ (80034c8 <HAL_RCC_OscConfig+0x280>)
 800326e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003270:	f003 0303 	and.w	r3, r3, #3
 8003274:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0310 	and.w	r3, r3, #16
 800327e:	2b00      	cmp	r3, #0
 8003280:	f000 816c 	beq.w	800355c <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003284:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003286:	2b00      	cmp	r3, #0
 8003288:	d007      	beq.n	800329a <HAL_RCC_OscConfig+0x52>
 800328a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800328c:	2b0c      	cmp	r3, #12
 800328e:	f040 80de 	bne.w	800344e <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003292:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003294:	2b01      	cmp	r3, #1
 8003296:	f040 80da 	bne.w	800344e <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	69db      	ldr	r3, [r3, #28]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d102      	bne.n	80032a8 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	f000 bea5 	b.w	8003ff2 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80032ac:	4b86      	ldr	r3, [pc, #536]	@ (80034c8 <HAL_RCC_OscConfig+0x280>)
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d004      	beq.n	80032c2 <HAL_RCC_OscConfig+0x7a>
 80032b8:	4b83      	ldr	r3, [pc, #524]	@ (80034c8 <HAL_RCC_OscConfig+0x280>)
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80032c0:	e005      	b.n	80032ce <HAL_RCC_OscConfig+0x86>
 80032c2:	4b81      	ldr	r3, [pc, #516]	@ (80034c8 <HAL_RCC_OscConfig+0x280>)
 80032c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80032c8:	041b      	lsls	r3, r3, #16
 80032ca:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d255      	bcs.n	800337e <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80032d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d10a      	bne.n	80032ee <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032dc:	4618      	mov	r0, r3
 80032de:	f001 f9d9 	bl	8004694 <RCC_SetFlashLatencyFromMSIRange>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d002      	beq.n	80032ee <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	f000 be82 	b.w	8003ff2 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80032ee:	4b76      	ldr	r3, [pc, #472]	@ (80034c8 <HAL_RCC_OscConfig+0x280>)
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	4a75      	ldr	r2, [pc, #468]	@ (80034c8 <HAL_RCC_OscConfig+0x280>)
 80032f4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80032f8:	6093      	str	r3, [r2, #8]
 80032fa:	4b73      	ldr	r3, [pc, #460]	@ (80034c8 <HAL_RCC_OscConfig+0x280>)
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003306:	4970      	ldr	r1, [pc, #448]	@ (80034c8 <HAL_RCC_OscConfig+0x280>)
 8003308:	4313      	orrs	r3, r2
 800330a:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003310:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003314:	d309      	bcc.n	800332a <HAL_RCC_OscConfig+0xe2>
 8003316:	4b6c      	ldr	r3, [pc, #432]	@ (80034c8 <HAL_RCC_OscConfig+0x280>)
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	f023 021f 	bic.w	r2, r3, #31
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6a1b      	ldr	r3, [r3, #32]
 8003322:	4969      	ldr	r1, [pc, #420]	@ (80034c8 <HAL_RCC_OscConfig+0x280>)
 8003324:	4313      	orrs	r3, r2
 8003326:	60cb      	str	r3, [r1, #12]
 8003328:	e07e      	b.n	8003428 <HAL_RCC_OscConfig+0x1e0>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800332e:	2b00      	cmp	r3, #0
 8003330:	da0a      	bge.n	8003348 <HAL_RCC_OscConfig+0x100>
 8003332:	4b65      	ldr	r3, [pc, #404]	@ (80034c8 <HAL_RCC_OscConfig+0x280>)
 8003334:	68db      	ldr	r3, [r3, #12]
 8003336:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6a1b      	ldr	r3, [r3, #32]
 800333e:	015b      	lsls	r3, r3, #5
 8003340:	4961      	ldr	r1, [pc, #388]	@ (80034c8 <HAL_RCC_OscConfig+0x280>)
 8003342:	4313      	orrs	r3, r2
 8003344:	60cb      	str	r3, [r1, #12]
 8003346:	e06f      	b.n	8003428 <HAL_RCC_OscConfig+0x1e0>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800334c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003350:	d30a      	bcc.n	8003368 <HAL_RCC_OscConfig+0x120>
 8003352:	4b5d      	ldr	r3, [pc, #372]	@ (80034c8 <HAL_RCC_OscConfig+0x280>)
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6a1b      	ldr	r3, [r3, #32]
 800335e:	029b      	lsls	r3, r3, #10
 8003360:	4959      	ldr	r1, [pc, #356]	@ (80034c8 <HAL_RCC_OscConfig+0x280>)
 8003362:	4313      	orrs	r3, r2
 8003364:	60cb      	str	r3, [r1, #12]
 8003366:	e05f      	b.n	8003428 <HAL_RCC_OscConfig+0x1e0>
 8003368:	4b57      	ldr	r3, [pc, #348]	@ (80034c8 <HAL_RCC_OscConfig+0x280>)
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6a1b      	ldr	r3, [r3, #32]
 8003374:	03db      	lsls	r3, r3, #15
 8003376:	4954      	ldr	r1, [pc, #336]	@ (80034c8 <HAL_RCC_OscConfig+0x280>)
 8003378:	4313      	orrs	r3, r2
 800337a:	60cb      	str	r3, [r1, #12]
 800337c:	e054      	b.n	8003428 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800337e:	4b52      	ldr	r3, [pc, #328]	@ (80034c8 <HAL_RCC_OscConfig+0x280>)
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	4a51      	ldr	r2, [pc, #324]	@ (80034c8 <HAL_RCC_OscConfig+0x280>)
 8003384:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003388:	6093      	str	r3, [r2, #8]
 800338a:	4b4f      	ldr	r3, [pc, #316]	@ (80034c8 <HAL_RCC_OscConfig+0x280>)
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003396:	494c      	ldr	r1, [pc, #304]	@ (80034c8 <HAL_RCC_OscConfig+0x280>)
 8003398:	4313      	orrs	r3, r2
 800339a:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033a0:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80033a4:	d309      	bcc.n	80033ba <HAL_RCC_OscConfig+0x172>
 80033a6:	4b48      	ldr	r3, [pc, #288]	@ (80034c8 <HAL_RCC_OscConfig+0x280>)
 80033a8:	68db      	ldr	r3, [r3, #12]
 80033aa:	f023 021f 	bic.w	r2, r3, #31
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6a1b      	ldr	r3, [r3, #32]
 80033b2:	4945      	ldr	r1, [pc, #276]	@ (80034c8 <HAL_RCC_OscConfig+0x280>)
 80033b4:	4313      	orrs	r3, r2
 80033b6:	60cb      	str	r3, [r1, #12]
 80033b8:	e028      	b.n	800340c <HAL_RCC_OscConfig+0x1c4>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033be:	2b00      	cmp	r3, #0
 80033c0:	da0a      	bge.n	80033d8 <HAL_RCC_OscConfig+0x190>
 80033c2:	4b41      	ldr	r3, [pc, #260]	@ (80034c8 <HAL_RCC_OscConfig+0x280>)
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6a1b      	ldr	r3, [r3, #32]
 80033ce:	015b      	lsls	r3, r3, #5
 80033d0:	493d      	ldr	r1, [pc, #244]	@ (80034c8 <HAL_RCC_OscConfig+0x280>)
 80033d2:	4313      	orrs	r3, r2
 80033d4:	60cb      	str	r3, [r1, #12]
 80033d6:	e019      	b.n	800340c <HAL_RCC_OscConfig+0x1c4>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033e0:	d30a      	bcc.n	80033f8 <HAL_RCC_OscConfig+0x1b0>
 80033e2:	4b39      	ldr	r3, [pc, #228]	@ (80034c8 <HAL_RCC_OscConfig+0x280>)
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a1b      	ldr	r3, [r3, #32]
 80033ee:	029b      	lsls	r3, r3, #10
 80033f0:	4935      	ldr	r1, [pc, #212]	@ (80034c8 <HAL_RCC_OscConfig+0x280>)
 80033f2:	4313      	orrs	r3, r2
 80033f4:	60cb      	str	r3, [r1, #12]
 80033f6:	e009      	b.n	800340c <HAL_RCC_OscConfig+0x1c4>
 80033f8:	4b33      	ldr	r3, [pc, #204]	@ (80034c8 <HAL_RCC_OscConfig+0x280>)
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6a1b      	ldr	r3, [r3, #32]
 8003404:	03db      	lsls	r3, r3, #15
 8003406:	4930      	ldr	r1, [pc, #192]	@ (80034c8 <HAL_RCC_OscConfig+0x280>)
 8003408:	4313      	orrs	r3, r2
 800340a:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800340c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800340e:	2b00      	cmp	r3, #0
 8003410:	d10a      	bne.n	8003428 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003416:	4618      	mov	r0, r3
 8003418:	f001 f93c 	bl	8004694 <RCC_SetFlashLatencyFromMSIRange>
 800341c:	4603      	mov	r3, r0
 800341e:	2b00      	cmp	r3, #0
 8003420:	d002      	beq.n	8003428 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	f000 bde5 	b.w	8003ff2 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8003428:	f001 f8de 	bl	80045e8 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800342c:	4b27      	ldr	r3, [pc, #156]	@ (80034cc <HAL_RCC_OscConfig+0x284>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4618      	mov	r0, r3
 8003432:	f7ff fa05 	bl	8002840 <HAL_InitTick>
 8003436:	4603      	mov	r3, r0
 8003438:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 800343c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003440:	2b00      	cmp	r3, #0
 8003442:	f000 808a 	beq.w	800355a <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8003446:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800344a:	f000 bdd2 	b.w	8003ff2 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	69db      	ldr	r3, [r3, #28]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d066      	beq.n	8003524 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8003456:	4b1c      	ldr	r3, [pc, #112]	@ (80034c8 <HAL_RCC_OscConfig+0x280>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a1b      	ldr	r2, [pc, #108]	@ (80034c8 <HAL_RCC_OscConfig+0x280>)
 800345c:	f043 0301 	orr.w	r3, r3, #1
 8003460:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003462:	f7ff fa77 	bl	8002954 <HAL_GetTick>
 8003466:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8003468:	e009      	b.n	800347e <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800346a:	f7ff fa73 	bl	8002954 <HAL_GetTick>
 800346e:	4602      	mov	r2, r0
 8003470:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	2b02      	cmp	r3, #2
 8003476:	d902      	bls.n	800347e <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8003478:	2303      	movs	r3, #3
 800347a:	f000 bdba 	b.w	8003ff2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800347e:	4b12      	ldr	r3, [pc, #72]	@ (80034c8 <HAL_RCC_OscConfig+0x280>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0304 	and.w	r3, r3, #4
 8003486:	2b00      	cmp	r3, #0
 8003488:	d0ef      	beq.n	800346a <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800348a:	4b0f      	ldr	r3, [pc, #60]	@ (80034c8 <HAL_RCC_OscConfig+0x280>)
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	4a0e      	ldr	r2, [pc, #56]	@ (80034c8 <HAL_RCC_OscConfig+0x280>)
 8003490:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003494:	6093      	str	r3, [r2, #8]
 8003496:	4b0c      	ldr	r3, [pc, #48]	@ (80034c8 <HAL_RCC_OscConfig+0x280>)
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034a2:	4909      	ldr	r1, [pc, #36]	@ (80034c8 <HAL_RCC_OscConfig+0x280>)
 80034a4:	4313      	orrs	r3, r2
 80034a6:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ac:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80034b0:	d30e      	bcc.n	80034d0 <HAL_RCC_OscConfig+0x288>
 80034b2:	4b05      	ldr	r3, [pc, #20]	@ (80034c8 <HAL_RCC_OscConfig+0x280>)
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	f023 021f 	bic.w	r2, r3, #31
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a1b      	ldr	r3, [r3, #32]
 80034be:	4902      	ldr	r1, [pc, #8]	@ (80034c8 <HAL_RCC_OscConfig+0x280>)
 80034c0:	4313      	orrs	r3, r2
 80034c2:	60cb      	str	r3, [r1, #12]
 80034c4:	e04a      	b.n	800355c <HAL_RCC_OscConfig+0x314>
 80034c6:	bf00      	nop
 80034c8:	46020c00 	.word	0x46020c00
 80034cc:	2000000c 	.word	0x2000000c
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	da0a      	bge.n	80034ee <HAL_RCC_OscConfig+0x2a6>
 80034d8:	4b98      	ldr	r3, [pc, #608]	@ (800373c <HAL_RCC_OscConfig+0x4f4>)
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6a1b      	ldr	r3, [r3, #32]
 80034e4:	015b      	lsls	r3, r3, #5
 80034e6:	4995      	ldr	r1, [pc, #596]	@ (800373c <HAL_RCC_OscConfig+0x4f4>)
 80034e8:	4313      	orrs	r3, r2
 80034ea:	60cb      	str	r3, [r1, #12]
 80034ec:	e036      	b.n	800355c <HAL_RCC_OscConfig+0x314>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034f6:	d30a      	bcc.n	800350e <HAL_RCC_OscConfig+0x2c6>
 80034f8:	4b90      	ldr	r3, [pc, #576]	@ (800373c <HAL_RCC_OscConfig+0x4f4>)
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6a1b      	ldr	r3, [r3, #32]
 8003504:	029b      	lsls	r3, r3, #10
 8003506:	498d      	ldr	r1, [pc, #564]	@ (800373c <HAL_RCC_OscConfig+0x4f4>)
 8003508:	4313      	orrs	r3, r2
 800350a:	60cb      	str	r3, [r1, #12]
 800350c:	e026      	b.n	800355c <HAL_RCC_OscConfig+0x314>
 800350e:	4b8b      	ldr	r3, [pc, #556]	@ (800373c <HAL_RCC_OscConfig+0x4f4>)
 8003510:	68db      	ldr	r3, [r3, #12]
 8003512:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a1b      	ldr	r3, [r3, #32]
 800351a:	03db      	lsls	r3, r3, #15
 800351c:	4987      	ldr	r1, [pc, #540]	@ (800373c <HAL_RCC_OscConfig+0x4f4>)
 800351e:	4313      	orrs	r3, r2
 8003520:	60cb      	str	r3, [r1, #12]
 8003522:	e01b      	b.n	800355c <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8003524:	4b85      	ldr	r3, [pc, #532]	@ (800373c <HAL_RCC_OscConfig+0x4f4>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a84      	ldr	r2, [pc, #528]	@ (800373c <HAL_RCC_OscConfig+0x4f4>)
 800352a:	f023 0301 	bic.w	r3, r3, #1
 800352e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003530:	f7ff fa10 	bl	8002954 <HAL_GetTick>
 8003534:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8003536:	e009      	b.n	800354c <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003538:	f7ff fa0c 	bl	8002954 <HAL_GetTick>
 800353c:	4602      	mov	r2, r0
 800353e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	2b02      	cmp	r3, #2
 8003544:	d902      	bls.n	800354c <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8003546:	2303      	movs	r3, #3
 8003548:	f000 bd53 	b.w	8003ff2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800354c:	4b7b      	ldr	r3, [pc, #492]	@ (800373c <HAL_RCC_OscConfig+0x4f4>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0304 	and.w	r3, r3, #4
 8003554:	2b00      	cmp	r3, #0
 8003556:	d1ef      	bne.n	8003538 <HAL_RCC_OscConfig+0x2f0>
 8003558:	e000      	b.n	800355c <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800355a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0301 	and.w	r3, r3, #1
 8003564:	2b00      	cmp	r3, #0
 8003566:	f000 808b 	beq.w	8003680 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800356a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800356c:	2b08      	cmp	r3, #8
 800356e:	d005      	beq.n	800357c <HAL_RCC_OscConfig+0x334>
 8003570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003572:	2b0c      	cmp	r3, #12
 8003574:	d109      	bne.n	800358a <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003576:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003578:	2b03      	cmp	r3, #3
 800357a:	d106      	bne.n	800358a <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d17d      	bne.n	8003680 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	f000 bd34 	b.w	8003ff2 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003592:	d106      	bne.n	80035a2 <HAL_RCC_OscConfig+0x35a>
 8003594:	4b69      	ldr	r3, [pc, #420]	@ (800373c <HAL_RCC_OscConfig+0x4f4>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a68      	ldr	r2, [pc, #416]	@ (800373c <HAL_RCC_OscConfig+0x4f4>)
 800359a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800359e:	6013      	str	r3, [r2, #0]
 80035a0:	e041      	b.n	8003626 <HAL_RCC_OscConfig+0x3de>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80035aa:	d112      	bne.n	80035d2 <HAL_RCC_OscConfig+0x38a>
 80035ac:	4b63      	ldr	r3, [pc, #396]	@ (800373c <HAL_RCC_OscConfig+0x4f4>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a62      	ldr	r2, [pc, #392]	@ (800373c <HAL_RCC_OscConfig+0x4f4>)
 80035b2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80035b6:	6013      	str	r3, [r2, #0]
 80035b8:	4b60      	ldr	r3, [pc, #384]	@ (800373c <HAL_RCC_OscConfig+0x4f4>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a5f      	ldr	r2, [pc, #380]	@ (800373c <HAL_RCC_OscConfig+0x4f4>)
 80035be:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80035c2:	6013      	str	r3, [r2, #0]
 80035c4:	4b5d      	ldr	r3, [pc, #372]	@ (800373c <HAL_RCC_OscConfig+0x4f4>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a5c      	ldr	r2, [pc, #368]	@ (800373c <HAL_RCC_OscConfig+0x4f4>)
 80035ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035ce:	6013      	str	r3, [r2, #0]
 80035d0:	e029      	b.n	8003626 <HAL_RCC_OscConfig+0x3de>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80035da:	d112      	bne.n	8003602 <HAL_RCC_OscConfig+0x3ba>
 80035dc:	4b57      	ldr	r3, [pc, #348]	@ (800373c <HAL_RCC_OscConfig+0x4f4>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a56      	ldr	r2, [pc, #344]	@ (800373c <HAL_RCC_OscConfig+0x4f4>)
 80035e2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80035e6:	6013      	str	r3, [r2, #0]
 80035e8:	4b54      	ldr	r3, [pc, #336]	@ (800373c <HAL_RCC_OscConfig+0x4f4>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a53      	ldr	r2, [pc, #332]	@ (800373c <HAL_RCC_OscConfig+0x4f4>)
 80035ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80035f2:	6013      	str	r3, [r2, #0]
 80035f4:	4b51      	ldr	r3, [pc, #324]	@ (800373c <HAL_RCC_OscConfig+0x4f4>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a50      	ldr	r2, [pc, #320]	@ (800373c <HAL_RCC_OscConfig+0x4f4>)
 80035fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035fe:	6013      	str	r3, [r2, #0]
 8003600:	e011      	b.n	8003626 <HAL_RCC_OscConfig+0x3de>
 8003602:	4b4e      	ldr	r3, [pc, #312]	@ (800373c <HAL_RCC_OscConfig+0x4f4>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a4d      	ldr	r2, [pc, #308]	@ (800373c <HAL_RCC_OscConfig+0x4f4>)
 8003608:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800360c:	6013      	str	r3, [r2, #0]
 800360e:	4b4b      	ldr	r3, [pc, #300]	@ (800373c <HAL_RCC_OscConfig+0x4f4>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a4a      	ldr	r2, [pc, #296]	@ (800373c <HAL_RCC_OscConfig+0x4f4>)
 8003614:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003618:	6013      	str	r3, [r2, #0]
 800361a:	4b48      	ldr	r3, [pc, #288]	@ (800373c <HAL_RCC_OscConfig+0x4f4>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a47      	ldr	r2, [pc, #284]	@ (800373c <HAL_RCC_OscConfig+0x4f4>)
 8003620:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003624:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d014      	beq.n	8003658 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 800362e:	f7ff f991 	bl	8002954 <HAL_GetTick>
 8003632:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003634:	e009      	b.n	800364a <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003636:	f7ff f98d 	bl	8002954 <HAL_GetTick>
 800363a:	4602      	mov	r2, r0
 800363c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	2b64      	cmp	r3, #100	@ 0x64
 8003642:	d902      	bls.n	800364a <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8003644:	2303      	movs	r3, #3
 8003646:	f000 bcd4 	b.w	8003ff2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800364a:	4b3c      	ldr	r3, [pc, #240]	@ (800373c <HAL_RCC_OscConfig+0x4f4>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d0ef      	beq.n	8003636 <HAL_RCC_OscConfig+0x3ee>
 8003656:	e013      	b.n	8003680 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8003658:	f7ff f97c 	bl	8002954 <HAL_GetTick>
 800365c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800365e:	e009      	b.n	8003674 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003660:	f7ff f978 	bl	8002954 <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	2b64      	cmp	r3, #100	@ 0x64
 800366c:	d902      	bls.n	8003674 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	f000 bcbf 	b.w	8003ff2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003674:	4b31      	ldr	r3, [pc, #196]	@ (800373c <HAL_RCC_OscConfig+0x4f4>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d1ef      	bne.n	8003660 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 0302 	and.w	r3, r3, #2
 8003688:	2b00      	cmp	r3, #0
 800368a:	d05f      	beq.n	800374c <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800368c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800368e:	2b04      	cmp	r3, #4
 8003690:	d005      	beq.n	800369e <HAL_RCC_OscConfig+0x456>
 8003692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003694:	2b0c      	cmp	r3, #12
 8003696:	d114      	bne.n	80036c2 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003698:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800369a:	2b02      	cmp	r3, #2
 800369c:	d111      	bne.n	80036c2 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d102      	bne.n	80036ac <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	f000 bca3 	b.w	8003ff2 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80036ac:	4b23      	ldr	r3, [pc, #140]	@ (800373c <HAL_RCC_OscConfig+0x4f4>)
 80036ae:	691b      	ldr	r3, [r3, #16]
 80036b0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	691b      	ldr	r3, [r3, #16]
 80036b8:	041b      	lsls	r3, r3, #16
 80036ba:	4920      	ldr	r1, [pc, #128]	@ (800373c <HAL_RCC_OscConfig+0x4f4>)
 80036bc:	4313      	orrs	r3, r2
 80036be:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80036c0:	e044      	b.n	800374c <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d024      	beq.n	8003714 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 80036ca:	4b1c      	ldr	r3, [pc, #112]	@ (800373c <HAL_RCC_OscConfig+0x4f4>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a1b      	ldr	r2, [pc, #108]	@ (800373c <HAL_RCC_OscConfig+0x4f4>)
 80036d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036d4:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80036d6:	f7ff f93d 	bl	8002954 <HAL_GetTick>
 80036da:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036dc:	e009      	b.n	80036f2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036de:	f7ff f939 	bl	8002954 <HAL_GetTick>
 80036e2:	4602      	mov	r2, r0
 80036e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	2b02      	cmp	r3, #2
 80036ea:	d902      	bls.n	80036f2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80036ec:	2303      	movs	r3, #3
 80036ee:	f000 bc80 	b.w	8003ff2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036f2:	4b12      	ldr	r3, [pc, #72]	@ (800373c <HAL_RCC_OscConfig+0x4f4>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d0ef      	beq.n	80036de <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80036fe:	4b0f      	ldr	r3, [pc, #60]	@ (800373c <HAL_RCC_OscConfig+0x4f4>)
 8003700:	691b      	ldr	r3, [r3, #16]
 8003702:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	691b      	ldr	r3, [r3, #16]
 800370a:	041b      	lsls	r3, r3, #16
 800370c:	490b      	ldr	r1, [pc, #44]	@ (800373c <HAL_RCC_OscConfig+0x4f4>)
 800370e:	4313      	orrs	r3, r2
 8003710:	610b      	str	r3, [r1, #16]
 8003712:	e01b      	b.n	800374c <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8003714:	4b09      	ldr	r3, [pc, #36]	@ (800373c <HAL_RCC_OscConfig+0x4f4>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a08      	ldr	r2, [pc, #32]	@ (800373c <HAL_RCC_OscConfig+0x4f4>)
 800371a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800371e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003720:	f7ff f918 	bl	8002954 <HAL_GetTick>
 8003724:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003726:	e00b      	b.n	8003740 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003728:	f7ff f914 	bl	8002954 <HAL_GetTick>
 800372c:	4602      	mov	r2, r0
 800372e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	2b02      	cmp	r3, #2
 8003734:	d904      	bls.n	8003740 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8003736:	2303      	movs	r3, #3
 8003738:	f000 bc5b 	b.w	8003ff2 <HAL_RCC_OscConfig+0xdaa>
 800373c:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003740:	4baf      	ldr	r3, [pc, #700]	@ (8003a00 <HAL_RCC_OscConfig+0x7b8>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003748:	2b00      	cmp	r3, #0
 800374a:	d1ed      	bne.n	8003728 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0308 	and.w	r3, r3, #8
 8003754:	2b00      	cmp	r3, #0
 8003756:	f000 80c8 	beq.w	80038ea <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 800375a:	2300      	movs	r3, #0
 800375c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003760:	4ba7      	ldr	r3, [pc, #668]	@ (8003a00 <HAL_RCC_OscConfig+0x7b8>)
 8003762:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003766:	f003 0304 	and.w	r3, r3, #4
 800376a:	2b00      	cmp	r3, #0
 800376c:	d111      	bne.n	8003792 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800376e:	4ba4      	ldr	r3, [pc, #656]	@ (8003a00 <HAL_RCC_OscConfig+0x7b8>)
 8003770:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003774:	4aa2      	ldr	r2, [pc, #648]	@ (8003a00 <HAL_RCC_OscConfig+0x7b8>)
 8003776:	f043 0304 	orr.w	r3, r3, #4
 800377a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800377e:	4ba0      	ldr	r3, [pc, #640]	@ (8003a00 <HAL_RCC_OscConfig+0x7b8>)
 8003780:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003784:	f003 0304 	and.w	r3, r3, #4
 8003788:	617b      	str	r3, [r7, #20]
 800378a:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 800378c:	2301      	movs	r3, #1
 800378e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003792:	4b9c      	ldr	r3, [pc, #624]	@ (8003a04 <HAL_RCC_OscConfig+0x7bc>)
 8003794:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003796:	f003 0301 	and.w	r3, r3, #1
 800379a:	2b00      	cmp	r3, #0
 800379c:	d119      	bne.n	80037d2 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800379e:	4b99      	ldr	r3, [pc, #612]	@ (8003a04 <HAL_RCC_OscConfig+0x7bc>)
 80037a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037a2:	4a98      	ldr	r2, [pc, #608]	@ (8003a04 <HAL_RCC_OscConfig+0x7bc>)
 80037a4:	f043 0301 	orr.w	r3, r3, #1
 80037a8:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037aa:	f7ff f8d3 	bl	8002954 <HAL_GetTick>
 80037ae:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80037b0:	e009      	b.n	80037c6 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037b2:	f7ff f8cf 	bl	8002954 <HAL_GetTick>
 80037b6:	4602      	mov	r2, r0
 80037b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037ba:	1ad3      	subs	r3, r2, r3
 80037bc:	2b02      	cmp	r3, #2
 80037be:	d902      	bls.n	80037c6 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 80037c0:	2303      	movs	r3, #3
 80037c2:	f000 bc16 	b.w	8003ff2 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80037c6:	4b8f      	ldr	r3, [pc, #572]	@ (8003a04 <HAL_RCC_OscConfig+0x7bc>)
 80037c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037ca:	f003 0301 	and.w	r3, r3, #1
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d0ef      	beq.n	80037b2 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	695b      	ldr	r3, [r3, #20]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d05f      	beq.n	800389a <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 80037da:	4b89      	ldr	r3, [pc, #548]	@ (8003a00 <HAL_RCC_OscConfig+0x7b8>)
 80037dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80037e0:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	699a      	ldr	r2, [r3, #24]
 80037e6:	6a3b      	ldr	r3, [r7, #32]
 80037e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d037      	beq.n	8003860 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80037f0:	6a3b      	ldr	r3, [r7, #32]
 80037f2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d006      	beq.n	8003808 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 80037fa:	6a3b      	ldr	r3, [r7, #32]
 80037fc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8003800:	2b00      	cmp	r3, #0
 8003802:	d101      	bne.n	8003808 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	e3f4      	b.n	8003ff2 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8003808:	6a3b      	ldr	r3, [r7, #32]
 800380a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d01b      	beq.n	800384a <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8003812:	4b7b      	ldr	r3, [pc, #492]	@ (8003a00 <HAL_RCC_OscConfig+0x7b8>)
 8003814:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003818:	4a79      	ldr	r2, [pc, #484]	@ (8003a00 <HAL_RCC_OscConfig+0x7b8>)
 800381a:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 800381e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 8003822:	f7ff f897 	bl	8002954 <HAL_GetTick>
 8003826:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8003828:	e008      	b.n	800383c <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800382a:	f7ff f893 	bl	8002954 <HAL_GetTick>
 800382e:	4602      	mov	r2, r0
 8003830:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	2b05      	cmp	r3, #5
 8003836:	d901      	bls.n	800383c <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8003838:	2303      	movs	r3, #3
 800383a:	e3da      	b.n	8003ff2 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800383c:	4b70      	ldr	r3, [pc, #448]	@ (8003a00 <HAL_RCC_OscConfig+0x7b8>)
 800383e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003842:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d1ef      	bne.n	800382a <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 800384a:	4b6d      	ldr	r3, [pc, #436]	@ (8003a00 <HAL_RCC_OscConfig+0x7b8>)
 800384c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003850:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	699b      	ldr	r3, [r3, #24]
 8003858:	4969      	ldr	r1, [pc, #420]	@ (8003a00 <HAL_RCC_OscConfig+0x7b8>)
 800385a:	4313      	orrs	r3, r2
 800385c:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8003860:	4b67      	ldr	r3, [pc, #412]	@ (8003a00 <HAL_RCC_OscConfig+0x7b8>)
 8003862:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003866:	4a66      	ldr	r2, [pc, #408]	@ (8003a00 <HAL_RCC_OscConfig+0x7b8>)
 8003868:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800386c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8003870:	f7ff f870 	bl	8002954 <HAL_GetTick>
 8003874:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8003876:	e008      	b.n	800388a <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003878:	f7ff f86c 	bl	8002954 <HAL_GetTick>
 800387c:	4602      	mov	r2, r0
 800387e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	2b05      	cmp	r3, #5
 8003884:	d901      	bls.n	800388a <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e3b3      	b.n	8003ff2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800388a:	4b5d      	ldr	r3, [pc, #372]	@ (8003a00 <HAL_RCC_OscConfig+0x7b8>)
 800388c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003890:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003894:	2b00      	cmp	r3, #0
 8003896:	d0ef      	beq.n	8003878 <HAL_RCC_OscConfig+0x630>
 8003898:	e01b      	b.n	80038d2 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 800389a:	4b59      	ldr	r3, [pc, #356]	@ (8003a00 <HAL_RCC_OscConfig+0x7b8>)
 800389c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80038a0:	4a57      	ldr	r2, [pc, #348]	@ (8003a00 <HAL_RCC_OscConfig+0x7b8>)
 80038a2:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 80038a6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 80038aa:	f7ff f853 	bl	8002954 <HAL_GetTick>
 80038ae:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80038b0:	e008      	b.n	80038c4 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038b2:	f7ff f84f 	bl	8002954 <HAL_GetTick>
 80038b6:	4602      	mov	r2, r0
 80038b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	2b05      	cmp	r3, #5
 80038be:	d901      	bls.n	80038c4 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 80038c0:	2303      	movs	r3, #3
 80038c2:	e396      	b.n	8003ff2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80038c4:	4b4e      	ldr	r3, [pc, #312]	@ (8003a00 <HAL_RCC_OscConfig+0x7b8>)
 80038c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80038ca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d1ef      	bne.n	80038b2 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80038d2:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d107      	bne.n	80038ea <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038da:	4b49      	ldr	r3, [pc, #292]	@ (8003a00 <HAL_RCC_OscConfig+0x7b8>)
 80038dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038e0:	4a47      	ldr	r2, [pc, #284]	@ (8003a00 <HAL_RCC_OscConfig+0x7b8>)
 80038e2:	f023 0304 	bic.w	r3, r3, #4
 80038e6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0304 	and.w	r3, r3, #4
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	f000 8111 	beq.w	8003b1a <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 80038f8:	2300      	movs	r3, #0
 80038fa:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038fe:	4b40      	ldr	r3, [pc, #256]	@ (8003a00 <HAL_RCC_OscConfig+0x7b8>)
 8003900:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003904:	f003 0304 	and.w	r3, r3, #4
 8003908:	2b00      	cmp	r3, #0
 800390a:	d111      	bne.n	8003930 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800390c:	4b3c      	ldr	r3, [pc, #240]	@ (8003a00 <HAL_RCC_OscConfig+0x7b8>)
 800390e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003912:	4a3b      	ldr	r2, [pc, #236]	@ (8003a00 <HAL_RCC_OscConfig+0x7b8>)
 8003914:	f043 0304 	orr.w	r3, r3, #4
 8003918:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800391c:	4b38      	ldr	r3, [pc, #224]	@ (8003a00 <HAL_RCC_OscConfig+0x7b8>)
 800391e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003922:	f003 0304 	and.w	r3, r3, #4
 8003926:	613b      	str	r3, [r7, #16]
 8003928:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 800392a:	2301      	movs	r3, #1
 800392c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003930:	4b34      	ldr	r3, [pc, #208]	@ (8003a04 <HAL_RCC_OscConfig+0x7bc>)
 8003932:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003934:	f003 0301 	and.w	r3, r3, #1
 8003938:	2b00      	cmp	r3, #0
 800393a:	d118      	bne.n	800396e <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800393c:	4b31      	ldr	r3, [pc, #196]	@ (8003a04 <HAL_RCC_OscConfig+0x7bc>)
 800393e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003940:	4a30      	ldr	r2, [pc, #192]	@ (8003a04 <HAL_RCC_OscConfig+0x7bc>)
 8003942:	f043 0301 	orr.w	r3, r3, #1
 8003946:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003948:	f7ff f804 	bl	8002954 <HAL_GetTick>
 800394c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800394e:	e008      	b.n	8003962 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003950:	f7ff f800 	bl	8002954 <HAL_GetTick>
 8003954:	4602      	mov	r2, r0
 8003956:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	2b02      	cmp	r3, #2
 800395c:	d901      	bls.n	8003962 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	e347      	b.n	8003ff2 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8003962:	4b28      	ldr	r3, [pc, #160]	@ (8003a04 <HAL_RCC_OscConfig+0x7bc>)
 8003964:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003966:	f003 0301 	and.w	r3, r3, #1
 800396a:	2b00      	cmp	r3, #0
 800396c:	d0f0      	beq.n	8003950 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	f003 0301 	and.w	r3, r3, #1
 8003976:	2b00      	cmp	r3, #0
 8003978:	d01f      	beq.n	80039ba <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	f003 0304 	and.w	r3, r3, #4
 8003982:	2b00      	cmp	r3, #0
 8003984:	d010      	beq.n	80039a8 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003986:	4b1e      	ldr	r3, [pc, #120]	@ (8003a00 <HAL_RCC_OscConfig+0x7b8>)
 8003988:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800398c:	4a1c      	ldr	r2, [pc, #112]	@ (8003a00 <HAL_RCC_OscConfig+0x7b8>)
 800398e:	f043 0304 	orr.w	r3, r3, #4
 8003992:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003996:	4b1a      	ldr	r3, [pc, #104]	@ (8003a00 <HAL_RCC_OscConfig+0x7b8>)
 8003998:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800399c:	4a18      	ldr	r2, [pc, #96]	@ (8003a00 <HAL_RCC_OscConfig+0x7b8>)
 800399e:	f043 0301 	orr.w	r3, r3, #1
 80039a2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80039a6:	e018      	b.n	80039da <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80039a8:	4b15      	ldr	r3, [pc, #84]	@ (8003a00 <HAL_RCC_OscConfig+0x7b8>)
 80039aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80039ae:	4a14      	ldr	r2, [pc, #80]	@ (8003a00 <HAL_RCC_OscConfig+0x7b8>)
 80039b0:	f043 0301 	orr.w	r3, r3, #1
 80039b4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80039b8:	e00f      	b.n	80039da <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80039ba:	4b11      	ldr	r3, [pc, #68]	@ (8003a00 <HAL_RCC_OscConfig+0x7b8>)
 80039bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80039c0:	4a0f      	ldr	r2, [pc, #60]	@ (8003a00 <HAL_RCC_OscConfig+0x7b8>)
 80039c2:	f023 0301 	bic.w	r3, r3, #1
 80039c6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80039ca:	4b0d      	ldr	r3, [pc, #52]	@ (8003a00 <HAL_RCC_OscConfig+0x7b8>)
 80039cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80039d0:	4a0b      	ldr	r2, [pc, #44]	@ (8003a00 <HAL_RCC_OscConfig+0x7b8>)
 80039d2:	f023 0304 	bic.w	r3, r3, #4
 80039d6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d057      	beq.n	8003a92 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 80039e2:	f7fe ffb7 	bl	8002954 <HAL_GetTick>
 80039e6:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039e8:	e00e      	b.n	8003a08 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039ea:	f7fe ffb3 	bl	8002954 <HAL_GetTick>
 80039ee:	4602      	mov	r2, r0
 80039f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039f2:	1ad3      	subs	r3, r2, r3
 80039f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d905      	bls.n	8003a08 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 80039fc:	2303      	movs	r3, #3
 80039fe:	e2f8      	b.n	8003ff2 <HAL_RCC_OscConfig+0xdaa>
 8003a00:	46020c00 	.word	0x46020c00
 8003a04:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a08:	4b9c      	ldr	r3, [pc, #624]	@ (8003c7c <HAL_RCC_OscConfig+0xa34>)
 8003a0a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003a0e:	f003 0302 	and.w	r3, r3, #2
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d0e9      	beq.n	80039ea <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d01b      	beq.n	8003a5a <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003a22:	4b96      	ldr	r3, [pc, #600]	@ (8003c7c <HAL_RCC_OscConfig+0xa34>)
 8003a24:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003a28:	4a94      	ldr	r2, [pc, #592]	@ (8003c7c <HAL_RCC_OscConfig+0xa34>)
 8003a2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a2e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003a32:	e00a      	b.n	8003a4a <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a34:	f7fe ff8e 	bl	8002954 <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d901      	bls.n	8003a4a <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	e2d3      	b.n	8003ff2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003a4a:	4b8c      	ldr	r3, [pc, #560]	@ (8003c7c <HAL_RCC_OscConfig+0xa34>)
 8003a4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003a50:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d0ed      	beq.n	8003a34 <HAL_RCC_OscConfig+0x7ec>
 8003a58:	e053      	b.n	8003b02 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003a5a:	4b88      	ldr	r3, [pc, #544]	@ (8003c7c <HAL_RCC_OscConfig+0xa34>)
 8003a5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003a60:	4a86      	ldr	r2, [pc, #536]	@ (8003c7c <HAL_RCC_OscConfig+0xa34>)
 8003a62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003a66:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003a6a:	e00a      	b.n	8003a82 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a6c:	f7fe ff72 	bl	8002954 <HAL_GetTick>
 8003a70:	4602      	mov	r2, r0
 8003a72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d901      	bls.n	8003a82 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	e2b7      	b.n	8003ff2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003a82:	4b7e      	ldr	r3, [pc, #504]	@ (8003c7c <HAL_RCC_OscConfig+0xa34>)
 8003a84:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003a88:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d1ed      	bne.n	8003a6c <HAL_RCC_OscConfig+0x824>
 8003a90:	e037      	b.n	8003b02 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8003a92:	f7fe ff5f 	bl	8002954 <HAL_GetTick>
 8003a96:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a98:	e00a      	b.n	8003ab0 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a9a:	f7fe ff5b 	bl	8002954 <HAL_GetTick>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aa2:	1ad3      	subs	r3, r2, r3
 8003aa4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d901      	bls.n	8003ab0 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8003aac:	2303      	movs	r3, #3
 8003aae:	e2a0      	b.n	8003ff2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ab0:	4b72      	ldr	r3, [pc, #456]	@ (8003c7c <HAL_RCC_OscConfig+0xa34>)
 8003ab2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ab6:	f003 0302 	and.w	r3, r3, #2
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d1ed      	bne.n	8003a9a <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8003abe:	4b6f      	ldr	r3, [pc, #444]	@ (8003c7c <HAL_RCC_OscConfig+0xa34>)
 8003ac0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ac4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d01a      	beq.n	8003b02 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003acc:	4b6b      	ldr	r3, [pc, #428]	@ (8003c7c <HAL_RCC_OscConfig+0xa34>)
 8003ace:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003ad2:	4a6a      	ldr	r2, [pc, #424]	@ (8003c7c <HAL_RCC_OscConfig+0xa34>)
 8003ad4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ad8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003adc:	e00a      	b.n	8003af4 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ade:	f7fe ff39 	bl	8002954 <HAL_GetTick>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ae6:	1ad3      	subs	r3, r2, r3
 8003ae8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d901      	bls.n	8003af4 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8003af0:	2303      	movs	r3, #3
 8003af2:	e27e      	b.n	8003ff2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003af4:	4b61      	ldr	r3, [pc, #388]	@ (8003c7c <HAL_RCC_OscConfig+0xa34>)
 8003af6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8003afa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d1ed      	bne.n	8003ade <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003b02:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d107      	bne.n	8003b1a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b0a:	4b5c      	ldr	r3, [pc, #368]	@ (8003c7c <HAL_RCC_OscConfig+0xa34>)
 8003b0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b10:	4a5a      	ldr	r2, [pc, #360]	@ (8003c7c <HAL_RCC_OscConfig+0xa34>)
 8003b12:	f023 0304 	bic.w	r3, r3, #4
 8003b16:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0320 	and.w	r3, r3, #32
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d036      	beq.n	8003b94 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d019      	beq.n	8003b62 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8003b2e:	4b53      	ldr	r3, [pc, #332]	@ (8003c7c <HAL_RCC_OscConfig+0xa34>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a52      	ldr	r2, [pc, #328]	@ (8003c7c <HAL_RCC_OscConfig+0xa34>)
 8003b34:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003b38:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003b3a:	f7fe ff0b 	bl	8002954 <HAL_GetTick>
 8003b3e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003b40:	e008      	b.n	8003b54 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b42:	f7fe ff07 	bl	8002954 <HAL_GetTick>
 8003b46:	4602      	mov	r2, r0
 8003b48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b4a:	1ad3      	subs	r3, r2, r3
 8003b4c:	2b02      	cmp	r3, #2
 8003b4e:	d901      	bls.n	8003b54 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8003b50:	2303      	movs	r3, #3
 8003b52:	e24e      	b.n	8003ff2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003b54:	4b49      	ldr	r3, [pc, #292]	@ (8003c7c <HAL_RCC_OscConfig+0xa34>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d0f0      	beq.n	8003b42 <HAL_RCC_OscConfig+0x8fa>
 8003b60:	e018      	b.n	8003b94 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8003b62:	4b46      	ldr	r3, [pc, #280]	@ (8003c7c <HAL_RCC_OscConfig+0xa34>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a45      	ldr	r2, [pc, #276]	@ (8003c7c <HAL_RCC_OscConfig+0xa34>)
 8003b68:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003b6c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003b6e:	f7fe fef1 	bl	8002954 <HAL_GetTick>
 8003b72:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003b74:	e008      	b.n	8003b88 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b76:	f7fe feed 	bl	8002954 <HAL_GetTick>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b7e:	1ad3      	subs	r3, r2, r3
 8003b80:	2b02      	cmp	r3, #2
 8003b82:	d901      	bls.n	8003b88 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8003b84:	2303      	movs	r3, #3
 8003b86:	e234      	b.n	8003ff2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003b88:	4b3c      	ldr	r3, [pc, #240]	@ (8003c7c <HAL_RCC_OscConfig+0xa34>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d1f0      	bne.n	8003b76 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d036      	beq.n	8003c0e <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d019      	beq.n	8003bdc <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8003ba8:	4b34      	ldr	r3, [pc, #208]	@ (8003c7c <HAL_RCC_OscConfig+0xa34>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a33      	ldr	r2, [pc, #204]	@ (8003c7c <HAL_RCC_OscConfig+0xa34>)
 8003bae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003bb2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003bb4:	f7fe fece 	bl	8002954 <HAL_GetTick>
 8003bb8:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8003bba:	e008      	b.n	8003bce <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8003bbc:	f7fe feca 	bl	8002954 <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	2b02      	cmp	r3, #2
 8003bc8:	d901      	bls.n	8003bce <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e211      	b.n	8003ff2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8003bce:	4b2b      	ldr	r3, [pc, #172]	@ (8003c7c <HAL_RCC_OscConfig+0xa34>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d0f0      	beq.n	8003bbc <HAL_RCC_OscConfig+0x974>
 8003bda:	e018      	b.n	8003c0e <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8003bdc:	4b27      	ldr	r3, [pc, #156]	@ (8003c7c <HAL_RCC_OscConfig+0xa34>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a26      	ldr	r2, [pc, #152]	@ (8003c7c <HAL_RCC_OscConfig+0xa34>)
 8003be2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003be6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003be8:	f7fe feb4 	bl	8002954 <HAL_GetTick>
 8003bec:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8003bee:	e008      	b.n	8003c02 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8003bf0:	f7fe feb0 	bl	8002954 <HAL_GetTick>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	2b02      	cmp	r3, #2
 8003bfc:	d901      	bls.n	8003c02 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	e1f7      	b.n	8003ff2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8003c02:	4b1e      	ldr	r3, [pc, #120]	@ (8003c7c <HAL_RCC_OscConfig+0xa34>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d1f0      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d07f      	beq.n	8003d1a <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d062      	beq.n	8003ce8 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8003c22:	4b16      	ldr	r3, [pc, #88]	@ (8003c7c <HAL_RCC_OscConfig+0xa34>)
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	4a15      	ldr	r2, [pc, #84]	@ (8003c7c <HAL_RCC_OscConfig+0xa34>)
 8003c28:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003c2c:	6093      	str	r3, [r2, #8]
 8003c2e:	4b13      	ldr	r3, [pc, #76]	@ (8003c7c <HAL_RCC_OscConfig+0xa34>)
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c3a:	4910      	ldr	r1, [pc, #64]	@ (8003c7c <HAL_RCC_OscConfig+0xa34>)
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c44:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8003c48:	d309      	bcc.n	8003c5e <HAL_RCC_OscConfig+0xa16>
 8003c4a:	4b0c      	ldr	r3, [pc, #48]	@ (8003c7c <HAL_RCC_OscConfig+0xa34>)
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	f023 021f 	bic.w	r2, r3, #31
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6a1b      	ldr	r3, [r3, #32]
 8003c56:	4909      	ldr	r1, [pc, #36]	@ (8003c7c <HAL_RCC_OscConfig+0xa34>)
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	60cb      	str	r3, [r1, #12]
 8003c5c:	e02a      	b.n	8003cb4 <HAL_RCC_OscConfig+0xa6c>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	da0c      	bge.n	8003c80 <HAL_RCC_OscConfig+0xa38>
 8003c66:	4b05      	ldr	r3, [pc, #20]	@ (8003c7c <HAL_RCC_OscConfig+0xa34>)
 8003c68:	68db      	ldr	r3, [r3, #12]
 8003c6a:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a1b      	ldr	r3, [r3, #32]
 8003c72:	015b      	lsls	r3, r3, #5
 8003c74:	4901      	ldr	r1, [pc, #4]	@ (8003c7c <HAL_RCC_OscConfig+0xa34>)
 8003c76:	4313      	orrs	r3, r2
 8003c78:	60cb      	str	r3, [r1, #12]
 8003c7a:	e01b      	b.n	8003cb4 <HAL_RCC_OscConfig+0xa6c>
 8003c7c:	46020c00 	.word	0x46020c00
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c88:	d30a      	bcc.n	8003ca0 <HAL_RCC_OscConfig+0xa58>
 8003c8a:	4ba1      	ldr	r3, [pc, #644]	@ (8003f10 <HAL_RCC_OscConfig+0xcc8>)
 8003c8c:	68db      	ldr	r3, [r3, #12]
 8003c8e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6a1b      	ldr	r3, [r3, #32]
 8003c96:	029b      	lsls	r3, r3, #10
 8003c98:	499d      	ldr	r1, [pc, #628]	@ (8003f10 <HAL_RCC_OscConfig+0xcc8>)
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	60cb      	str	r3, [r1, #12]
 8003c9e:	e009      	b.n	8003cb4 <HAL_RCC_OscConfig+0xa6c>
 8003ca0:	4b9b      	ldr	r3, [pc, #620]	@ (8003f10 <HAL_RCC_OscConfig+0xcc8>)
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6a1b      	ldr	r3, [r3, #32]
 8003cac:	03db      	lsls	r3, r3, #15
 8003cae:	4998      	ldr	r1, [pc, #608]	@ (8003f10 <HAL_RCC_OscConfig+0xcc8>)
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8003cb4:	4b96      	ldr	r3, [pc, #600]	@ (8003f10 <HAL_RCC_OscConfig+0xcc8>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a95      	ldr	r2, [pc, #596]	@ (8003f10 <HAL_RCC_OscConfig+0xcc8>)
 8003cba:	f043 0310 	orr.w	r3, r3, #16
 8003cbe:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003cc0:	f7fe fe48 	bl	8002954 <HAL_GetTick>
 8003cc4:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8003cc6:	e008      	b.n	8003cda <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8003cc8:	f7fe fe44 	bl	8002954 <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	2b02      	cmp	r3, #2
 8003cd4:	d901      	bls.n	8003cda <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e18b      	b.n	8003ff2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8003cda:	4b8d      	ldr	r3, [pc, #564]	@ (8003f10 <HAL_RCC_OscConfig+0xcc8>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 0320 	and.w	r3, r3, #32
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d0f0      	beq.n	8003cc8 <HAL_RCC_OscConfig+0xa80>
 8003ce6:	e018      	b.n	8003d1a <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8003ce8:	4b89      	ldr	r3, [pc, #548]	@ (8003f10 <HAL_RCC_OscConfig+0xcc8>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a88      	ldr	r2, [pc, #544]	@ (8003f10 <HAL_RCC_OscConfig+0xcc8>)
 8003cee:	f023 0310 	bic.w	r3, r3, #16
 8003cf2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8003cf4:	f7fe fe2e 	bl	8002954 <HAL_GetTick>
 8003cf8:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8003cfa:	e008      	b.n	8003d0e <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8003cfc:	f7fe fe2a 	bl	8002954 <HAL_GetTick>
 8003d00:	4602      	mov	r2, r0
 8003d02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	2b02      	cmp	r3, #2
 8003d08:	d901      	bls.n	8003d0e <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e171      	b.n	8003ff2 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8003d0e:	4b80      	ldr	r3, [pc, #512]	@ (8003f10 <HAL_RCC_OscConfig+0xcc8>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0320 	and.w	r3, r3, #32
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d1f0      	bne.n	8003cfc <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	f000 8166 	beq.w	8003ff0 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8003d24:	2300      	movs	r3, #0
 8003d26:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d2a:	4b79      	ldr	r3, [pc, #484]	@ (8003f10 <HAL_RCC_OscConfig+0xcc8>)
 8003d2c:	69db      	ldr	r3, [r3, #28]
 8003d2e:	f003 030c 	and.w	r3, r3, #12
 8003d32:	2b0c      	cmp	r3, #12
 8003d34:	f000 80f2 	beq.w	8003f1c <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d3c:	2b02      	cmp	r3, #2
 8003d3e:	f040 80c5 	bne.w	8003ecc <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8003d42:	4b73      	ldr	r3, [pc, #460]	@ (8003f10 <HAL_RCC_OscConfig+0xcc8>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a72      	ldr	r2, [pc, #456]	@ (8003f10 <HAL_RCC_OscConfig+0xcc8>)
 8003d48:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003d4c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003d4e:	f7fe fe01 	bl	8002954 <HAL_GetTick>
 8003d52:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003d54:	e008      	b.n	8003d68 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d56:	f7fe fdfd 	bl	8002954 <HAL_GetTick>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d5e:	1ad3      	subs	r3, r2, r3
 8003d60:	2b02      	cmp	r3, #2
 8003d62:	d901      	bls.n	8003d68 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8003d64:	2303      	movs	r3, #3
 8003d66:	e144      	b.n	8003ff2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003d68:	4b69      	ldr	r3, [pc, #420]	@ (8003f10 <HAL_RCC_OscConfig+0xcc8>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d1f0      	bne.n	8003d56 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d74:	4b66      	ldr	r3, [pc, #408]	@ (8003f10 <HAL_RCC_OscConfig+0xcc8>)
 8003d76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d7a:	f003 0304 	and.w	r3, r3, #4
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d111      	bne.n	8003da6 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8003d82:	4b63      	ldr	r3, [pc, #396]	@ (8003f10 <HAL_RCC_OscConfig+0xcc8>)
 8003d84:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d88:	4a61      	ldr	r2, [pc, #388]	@ (8003f10 <HAL_RCC_OscConfig+0xcc8>)
 8003d8a:	f043 0304 	orr.w	r3, r3, #4
 8003d8e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003d92:	4b5f      	ldr	r3, [pc, #380]	@ (8003f10 <HAL_RCC_OscConfig+0xcc8>)
 8003d94:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d98:	f003 0304 	and.w	r3, r3, #4
 8003d9c:	60fb      	str	r3, [r7, #12]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8003da0:	2301      	movs	r3, #1
 8003da2:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8003da6:	4b5b      	ldr	r3, [pc, #364]	@ (8003f14 <HAL_RCC_OscConfig+0xccc>)
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003dae:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003db2:	d102      	bne.n	8003dba <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8003db4:	2301      	movs	r3, #1
 8003db6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8003dba:	4b56      	ldr	r3, [pc, #344]	@ (8003f14 <HAL_RCC_OscConfig+0xccc>)
 8003dbc:	68db      	ldr	r3, [r3, #12]
 8003dbe:	4a55      	ldr	r2, [pc, #340]	@ (8003f14 <HAL_RCC_OscConfig+0xccc>)
 8003dc0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003dc4:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8003dc6:	4b52      	ldr	r3, [pc, #328]	@ (8003f10 <HAL_RCC_OscConfig+0xcc8>)
 8003dc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003dce:	f023 0303 	bic.w	r3, r3, #3
 8003dd2:	687a      	ldr	r2, [r7, #4]
 8003dd4:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003dda:	3a01      	subs	r2, #1
 8003ddc:	0212      	lsls	r2, r2, #8
 8003dde:	4311      	orrs	r1, r2
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003de4:	430a      	orrs	r2, r1
 8003de6:	494a      	ldr	r1, [pc, #296]	@ (8003f10 <HAL_RCC_OscConfig+0xcc8>)
 8003de8:	4313      	orrs	r3, r2
 8003dea:	628b      	str	r3, [r1, #40]	@ 0x28
 8003dec:	4b48      	ldr	r3, [pc, #288]	@ (8003f10 <HAL_RCC_OscConfig+0xcc8>)
 8003dee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003df0:	4b49      	ldr	r3, [pc, #292]	@ (8003f18 <HAL_RCC_OscConfig+0xcd0>)
 8003df2:	4013      	ands	r3, r2
 8003df4:	687a      	ldr	r2, [r7, #4]
 8003df6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003df8:	3a01      	subs	r2, #1
 8003dfa:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003e02:	3a01      	subs	r2, #1
 8003e04:	0252      	lsls	r2, r2, #9
 8003e06:	b292      	uxth	r2, r2
 8003e08:	4311      	orrs	r1, r2
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003e0e:	3a01      	subs	r2, #1
 8003e10:	0412      	lsls	r2, r2, #16
 8003e12:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8003e16:	4311      	orrs	r1, r2
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8003e1c:	3a01      	subs	r2, #1
 8003e1e:	0612      	lsls	r2, r2, #24
 8003e20:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8003e24:	430a      	orrs	r2, r1
 8003e26:	493a      	ldr	r1, [pc, #232]	@ (8003f10 <HAL_RCC_OscConfig+0xcc8>)
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8003e2c:	4b38      	ldr	r3, [pc, #224]	@ (8003f10 <HAL_RCC_OscConfig+0xcc8>)
 8003e2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e30:	4a37      	ldr	r2, [pc, #220]	@ (8003f10 <HAL_RCC_OscConfig+0xcc8>)
 8003e32:	f023 0310 	bic.w	r3, r3, #16
 8003e36:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e3c:	4a34      	ldr	r2, [pc, #208]	@ (8003f10 <HAL_RCC_OscConfig+0xcc8>)
 8003e3e:	00db      	lsls	r3, r3, #3
 8003e40:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8003e42:	4b33      	ldr	r3, [pc, #204]	@ (8003f10 <HAL_RCC_OscConfig+0xcc8>)
 8003e44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e46:	4a32      	ldr	r2, [pc, #200]	@ (8003f10 <HAL_RCC_OscConfig+0xcc8>)
 8003e48:	f043 0310 	orr.w	r3, r3, #16
 8003e4c:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8003e4e:	4b30      	ldr	r3, [pc, #192]	@ (8003f10 <HAL_RCC_OscConfig+0xcc8>)
 8003e50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e52:	f023 020c 	bic.w	r2, r3, #12
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e5a:	492d      	ldr	r1, [pc, #180]	@ (8003f10 <HAL_RCC_OscConfig+0xcc8>)
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 8003e60:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d105      	bne.n	8003e74 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8003e68:	4b2a      	ldr	r3, [pc, #168]	@ (8003f14 <HAL_RCC_OscConfig+0xccc>)
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	4a29      	ldr	r2, [pc, #164]	@ (8003f14 <HAL_RCC_OscConfig+0xccc>)
 8003e6e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e72:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8003e74:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d107      	bne.n	8003e8c <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8003e7c:	4b24      	ldr	r3, [pc, #144]	@ (8003f10 <HAL_RCC_OscConfig+0xcc8>)
 8003e7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e82:	4a23      	ldr	r2, [pc, #140]	@ (8003f10 <HAL_RCC_OscConfig+0xcc8>)
 8003e84:	f023 0304 	bic.w	r3, r3, #4
 8003e88:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8003e8c:	4b20      	ldr	r3, [pc, #128]	@ (8003f10 <HAL_RCC_OscConfig+0xcc8>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a1f      	ldr	r2, [pc, #124]	@ (8003f10 <HAL_RCC_OscConfig+0xcc8>)
 8003e92:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e96:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003e98:	f7fe fd5c 	bl	8002954 <HAL_GetTick>
 8003e9c:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003e9e:	e008      	b.n	8003eb2 <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ea0:	f7fe fd58 	bl	8002954 <HAL_GetTick>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	2b02      	cmp	r3, #2
 8003eac:	d901      	bls.n	8003eb2 <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	e09f      	b.n	8003ff2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8003eb2:	4b17      	ldr	r3, [pc, #92]	@ (8003f10 <HAL_RCC_OscConfig+0xcc8>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d0f0      	beq.n	8003ea0 <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003ebe:	4b14      	ldr	r3, [pc, #80]	@ (8003f10 <HAL_RCC_OscConfig+0xcc8>)
 8003ec0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ec2:	4a13      	ldr	r2, [pc, #76]	@ (8003f10 <HAL_RCC_OscConfig+0xcc8>)
 8003ec4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003ec8:	6293      	str	r3, [r2, #40]	@ 0x28
 8003eca:	e091      	b.n	8003ff0 <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8003ecc:	4b10      	ldr	r3, [pc, #64]	@ (8003f10 <HAL_RCC_OscConfig+0xcc8>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a0f      	ldr	r2, [pc, #60]	@ (8003f10 <HAL_RCC_OscConfig+0xcc8>)
 8003ed2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003ed6:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8003ed8:	f7fe fd3c 	bl	8002954 <HAL_GetTick>
 8003edc:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003ede:	e008      	b.n	8003ef2 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ee0:	f7fe fd38 	bl	8002954 <HAL_GetTick>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	2b02      	cmp	r3, #2
 8003eec:	d901      	bls.n	8003ef2 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 8003eee:	2303      	movs	r3, #3
 8003ef0:	e07f      	b.n	8003ff2 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8003ef2:	4b07      	ldr	r3, [pc, #28]	@ (8003f10 <HAL_RCC_OscConfig+0xcc8>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d1f0      	bne.n	8003ee0 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8003efe:	4b04      	ldr	r3, [pc, #16]	@ (8003f10 <HAL_RCC_OscConfig+0xcc8>)
 8003f00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f02:	4a03      	ldr	r2, [pc, #12]	@ (8003f10 <HAL_RCC_OscConfig+0xcc8>)
 8003f04:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 8003f08:	f023 0303 	bic.w	r3, r3, #3
 8003f0c:	6293      	str	r3, [r2, #40]	@ 0x28
 8003f0e:	e06f      	b.n	8003ff0 <HAL_RCC_OscConfig+0xda8>
 8003f10:	46020c00 	.word	0x46020c00
 8003f14:	46020800 	.word	0x46020800
 8003f18:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8003f1c:	4b37      	ldr	r3, [pc, #220]	@ (8003ffc <HAL_RCC_OscConfig+0xdb4>)
 8003f1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f20:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003f22:	4b36      	ldr	r3, [pc, #216]	@ (8003ffc <HAL_RCC_OscConfig+0xdb4>)
 8003f24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f26:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d039      	beq.n	8003fa4 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8003f30:	69fb      	ldr	r3, [r7, #28]
 8003f32:	f003 0203 	and.w	r2, r3, #3
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d132      	bne.n	8003fa4 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8003f3e:	69fb      	ldr	r3, [r7, #28]
 8003f40:	0a1b      	lsrs	r3, r3, #8
 8003f42:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f4a:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d129      	bne.n	8003fa4 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8003f50:	69fb      	ldr	r3, [r7, #28]
 8003f52:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d122      	bne.n	8003fa4 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003f5e:	69bb      	ldr	r3, [r7, #24]
 8003f60:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f68:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d11a      	bne.n	8003fa4 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	0a5b      	lsrs	r3, r3, #9
 8003f72:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f7a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d111      	bne.n	8003fa4 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8003f80:	69bb      	ldr	r3, [r7, #24]
 8003f82:	0c1b      	lsrs	r3, r3, #16
 8003f84:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f8c:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d108      	bne.n	8003fa4 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8003f92:	69bb      	ldr	r3, [r7, #24]
 8003f94:	0e1b      	lsrs	r3, r3, #24
 8003f96:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f9e:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d001      	beq.n	8003fa8 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e024      	b.n	8003ff2 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8003fa8:	4b14      	ldr	r3, [pc, #80]	@ (8003ffc <HAL_RCC_OscConfig+0xdb4>)
 8003faa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fac:	08db      	lsrs	r3, r3, #3
 8003fae:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d01a      	beq.n	8003ff0 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8003fba:	4b10      	ldr	r3, [pc, #64]	@ (8003ffc <HAL_RCC_OscConfig+0xdb4>)
 8003fbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fbe:	4a0f      	ldr	r2, [pc, #60]	@ (8003ffc <HAL_RCC_OscConfig+0xdb4>)
 8003fc0:	f023 0310 	bic.w	r3, r3, #16
 8003fc4:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fc6:	f7fe fcc5 	bl	8002954 <HAL_GetTick>
 8003fca:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8003fcc:	bf00      	nop
 8003fce:	f7fe fcc1 	bl	8002954 <HAL_GetTick>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d0f9      	beq.n	8003fce <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fde:	4a07      	ldr	r2, [pc, #28]	@ (8003ffc <HAL_RCC_OscConfig+0xdb4>)
 8003fe0:	00db      	lsls	r3, r3, #3
 8003fe2:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8003fe4:	4b05      	ldr	r3, [pc, #20]	@ (8003ffc <HAL_RCC_OscConfig+0xdb4>)
 8003fe6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fe8:	4a04      	ldr	r2, [pc, #16]	@ (8003ffc <HAL_RCC_OscConfig+0xdb4>)
 8003fea:	f043 0310 	orr.w	r3, r3, #16
 8003fee:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 8003ff0:	2300      	movs	r3, #0
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3738      	adds	r7, #56	@ 0x38
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}
 8003ffa:	bf00      	nop
 8003ffc:	46020c00 	.word	0x46020c00

08004000 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b086      	sub	sp, #24
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d101      	bne.n	8004014 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e1d9      	b.n	80043c8 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004014:	4b9b      	ldr	r3, [pc, #620]	@ (8004284 <HAL_RCC_ClockConfig+0x284>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 030f 	and.w	r3, r3, #15
 800401c:	683a      	ldr	r2, [r7, #0]
 800401e:	429a      	cmp	r2, r3
 8004020:	d910      	bls.n	8004044 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004022:	4b98      	ldr	r3, [pc, #608]	@ (8004284 <HAL_RCC_ClockConfig+0x284>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f023 020f 	bic.w	r2, r3, #15
 800402a:	4996      	ldr	r1, [pc, #600]	@ (8004284 <HAL_RCC_ClockConfig+0x284>)
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	4313      	orrs	r3, r2
 8004030:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004032:	4b94      	ldr	r3, [pc, #592]	@ (8004284 <HAL_RCC_ClockConfig+0x284>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 030f 	and.w	r3, r3, #15
 800403a:	683a      	ldr	r2, [r7, #0]
 800403c:	429a      	cmp	r2, r3
 800403e:	d001      	beq.n	8004044 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	e1c1      	b.n	80043c8 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f003 0310 	and.w	r3, r3, #16
 800404c:	2b00      	cmp	r3, #0
 800404e:	d010      	beq.n	8004072 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	695a      	ldr	r2, [r3, #20]
 8004054:	4b8c      	ldr	r3, [pc, #560]	@ (8004288 <HAL_RCC_ClockConfig+0x288>)
 8004056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004058:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800405c:	429a      	cmp	r2, r3
 800405e:	d908      	bls.n	8004072 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8004060:	4b89      	ldr	r3, [pc, #548]	@ (8004288 <HAL_RCC_ClockConfig+0x288>)
 8004062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004064:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	695b      	ldr	r3, [r3, #20]
 800406c:	4986      	ldr	r1, [pc, #536]	@ (8004288 <HAL_RCC_ClockConfig+0x288>)
 800406e:	4313      	orrs	r3, r2
 8004070:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 0308 	and.w	r3, r3, #8
 800407a:	2b00      	cmp	r3, #0
 800407c:	d012      	beq.n	80040a4 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	691a      	ldr	r2, [r3, #16]
 8004082:	4b81      	ldr	r3, [pc, #516]	@ (8004288 <HAL_RCC_ClockConfig+0x288>)
 8004084:	6a1b      	ldr	r3, [r3, #32]
 8004086:	091b      	lsrs	r3, r3, #4
 8004088:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800408c:	429a      	cmp	r2, r3
 800408e:	d909      	bls.n	80040a4 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8004090:	4b7d      	ldr	r3, [pc, #500]	@ (8004288 <HAL_RCC_ClockConfig+0x288>)
 8004092:	6a1b      	ldr	r3, [r3, #32]
 8004094:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	691b      	ldr	r3, [r3, #16]
 800409c:	011b      	lsls	r3, r3, #4
 800409e:	497a      	ldr	r1, [pc, #488]	@ (8004288 <HAL_RCC_ClockConfig+0x288>)
 80040a0:	4313      	orrs	r3, r2
 80040a2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 0304 	and.w	r3, r3, #4
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d010      	beq.n	80040d2 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	68da      	ldr	r2, [r3, #12]
 80040b4:	4b74      	ldr	r3, [pc, #464]	@ (8004288 <HAL_RCC_ClockConfig+0x288>)
 80040b6:	6a1b      	ldr	r3, [r3, #32]
 80040b8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80040bc:	429a      	cmp	r2, r3
 80040be:	d908      	bls.n	80040d2 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80040c0:	4b71      	ldr	r3, [pc, #452]	@ (8004288 <HAL_RCC_ClockConfig+0x288>)
 80040c2:	6a1b      	ldr	r3, [r3, #32]
 80040c4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	496e      	ldr	r1, [pc, #440]	@ (8004288 <HAL_RCC_ClockConfig+0x288>)
 80040ce:	4313      	orrs	r3, r2
 80040d0:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 0302 	and.w	r3, r3, #2
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d010      	beq.n	8004100 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	689a      	ldr	r2, [r3, #8]
 80040e2:	4b69      	ldr	r3, [pc, #420]	@ (8004288 <HAL_RCC_ClockConfig+0x288>)
 80040e4:	6a1b      	ldr	r3, [r3, #32]
 80040e6:	f003 030f 	and.w	r3, r3, #15
 80040ea:	429a      	cmp	r2, r3
 80040ec:	d908      	bls.n	8004100 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80040ee:	4b66      	ldr	r3, [pc, #408]	@ (8004288 <HAL_RCC_ClockConfig+0x288>)
 80040f0:	6a1b      	ldr	r3, [r3, #32]
 80040f2:	f023 020f 	bic.w	r2, r3, #15
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	4963      	ldr	r1, [pc, #396]	@ (8004288 <HAL_RCC_ClockConfig+0x288>)
 80040fc:	4313      	orrs	r3, r2
 80040fe:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 0301 	and.w	r3, r3, #1
 8004108:	2b00      	cmp	r3, #0
 800410a:	f000 80d2 	beq.w	80042b2 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800410e:	2300      	movs	r3, #0
 8004110:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	2b03      	cmp	r3, #3
 8004118:	d143      	bne.n	80041a2 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800411a:	4b5b      	ldr	r3, [pc, #364]	@ (8004288 <HAL_RCC_ClockConfig+0x288>)
 800411c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004120:	f003 0304 	and.w	r3, r3, #4
 8004124:	2b00      	cmp	r3, #0
 8004126:	d110      	bne.n	800414a <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004128:	4b57      	ldr	r3, [pc, #348]	@ (8004288 <HAL_RCC_ClockConfig+0x288>)
 800412a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800412e:	4a56      	ldr	r2, [pc, #344]	@ (8004288 <HAL_RCC_ClockConfig+0x288>)
 8004130:	f043 0304 	orr.w	r3, r3, #4
 8004134:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004138:	4b53      	ldr	r3, [pc, #332]	@ (8004288 <HAL_RCC_ClockConfig+0x288>)
 800413a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800413e:	f003 0304 	and.w	r3, r3, #4
 8004142:	60bb      	str	r3, [r7, #8]
 8004144:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8004146:	2301      	movs	r3, #1
 8004148:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 800414a:	f7fe fc03 	bl	8002954 <HAL_GetTick>
 800414e:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8004150:	4b4e      	ldr	r3, [pc, #312]	@ (800428c <HAL_RCC_ClockConfig+0x28c>)
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004158:	2b00      	cmp	r3, #0
 800415a:	d00f      	beq.n	800417c <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800415c:	e008      	b.n	8004170 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800415e:	f7fe fbf9 	bl	8002954 <HAL_GetTick>
 8004162:	4602      	mov	r2, r0
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	1ad3      	subs	r3, r2, r3
 8004168:	2b02      	cmp	r3, #2
 800416a:	d901      	bls.n	8004170 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 800416c:	2303      	movs	r3, #3
 800416e:	e12b      	b.n	80043c8 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8004170:	4b46      	ldr	r3, [pc, #280]	@ (800428c <HAL_RCC_ClockConfig+0x28c>)
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004178:	2b00      	cmp	r3, #0
 800417a:	d0f0      	beq.n	800415e <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800417c:	7dfb      	ldrb	r3, [r7, #23]
 800417e:	2b01      	cmp	r3, #1
 8004180:	d107      	bne.n	8004192 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004182:	4b41      	ldr	r3, [pc, #260]	@ (8004288 <HAL_RCC_ClockConfig+0x288>)
 8004184:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004188:	4a3f      	ldr	r2, [pc, #252]	@ (8004288 <HAL_RCC_ClockConfig+0x288>)
 800418a:	f023 0304 	bic.w	r3, r3, #4
 800418e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004192:	4b3d      	ldr	r3, [pc, #244]	@ (8004288 <HAL_RCC_ClockConfig+0x288>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800419a:	2b00      	cmp	r3, #0
 800419c:	d121      	bne.n	80041e2 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e112      	b.n	80043c8 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	2b02      	cmp	r3, #2
 80041a8:	d107      	bne.n	80041ba <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041aa:	4b37      	ldr	r3, [pc, #220]	@ (8004288 <HAL_RCC_ClockConfig+0x288>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d115      	bne.n	80041e2 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e106      	b.n	80043c8 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d107      	bne.n	80041d2 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80041c2:	4b31      	ldr	r3, [pc, #196]	@ (8004288 <HAL_RCC_ClockConfig+0x288>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 0304 	and.w	r3, r3, #4
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d109      	bne.n	80041e2 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e0fa      	b.n	80043c8 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80041d2:	4b2d      	ldr	r3, [pc, #180]	@ (8004288 <HAL_RCC_ClockConfig+0x288>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d101      	bne.n	80041e2 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e0f2      	b.n	80043c8 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 80041e2:	4b29      	ldr	r3, [pc, #164]	@ (8004288 <HAL_RCC_ClockConfig+0x288>)
 80041e4:	69db      	ldr	r3, [r3, #28]
 80041e6:	f023 0203 	bic.w	r2, r3, #3
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	4926      	ldr	r1, [pc, #152]	@ (8004288 <HAL_RCC_ClockConfig+0x288>)
 80041f0:	4313      	orrs	r3, r2
 80041f2:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 80041f4:	f7fe fbae 	bl	8002954 <HAL_GetTick>
 80041f8:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	2b03      	cmp	r3, #3
 8004200:	d112      	bne.n	8004228 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004202:	e00a      	b.n	800421a <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004204:	f7fe fba6 	bl	8002954 <HAL_GetTick>
 8004208:	4602      	mov	r2, r0
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004212:	4293      	cmp	r3, r2
 8004214:	d901      	bls.n	800421a <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8004216:	2303      	movs	r3, #3
 8004218:	e0d6      	b.n	80043c8 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800421a:	4b1b      	ldr	r3, [pc, #108]	@ (8004288 <HAL_RCC_ClockConfig+0x288>)
 800421c:	69db      	ldr	r3, [r3, #28]
 800421e:	f003 030c 	and.w	r3, r3, #12
 8004222:	2b0c      	cmp	r3, #12
 8004224:	d1ee      	bne.n	8004204 <HAL_RCC_ClockConfig+0x204>
 8004226:	e044      	b.n	80042b2 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	2b02      	cmp	r3, #2
 800422e:	d112      	bne.n	8004256 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004230:	e00a      	b.n	8004248 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004232:	f7fe fb8f 	bl	8002954 <HAL_GetTick>
 8004236:	4602      	mov	r2, r0
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	1ad3      	subs	r3, r2, r3
 800423c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004240:	4293      	cmp	r3, r2
 8004242:	d901      	bls.n	8004248 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004244:	2303      	movs	r3, #3
 8004246:	e0bf      	b.n	80043c8 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004248:	4b0f      	ldr	r3, [pc, #60]	@ (8004288 <HAL_RCC_ClockConfig+0x288>)
 800424a:	69db      	ldr	r3, [r3, #28]
 800424c:	f003 030c 	and.w	r3, r3, #12
 8004250:	2b08      	cmp	r3, #8
 8004252:	d1ee      	bne.n	8004232 <HAL_RCC_ClockConfig+0x232>
 8004254:	e02d      	b.n	80042b2 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d123      	bne.n	80042a6 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800425e:	e00a      	b.n	8004276 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004260:	f7fe fb78 	bl	8002954 <HAL_GetTick>
 8004264:	4602      	mov	r2, r0
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800426e:	4293      	cmp	r3, r2
 8004270:	d901      	bls.n	8004276 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8004272:	2303      	movs	r3, #3
 8004274:	e0a8      	b.n	80043c8 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004276:	4b04      	ldr	r3, [pc, #16]	@ (8004288 <HAL_RCC_ClockConfig+0x288>)
 8004278:	69db      	ldr	r3, [r3, #28]
 800427a:	f003 030c 	and.w	r3, r3, #12
 800427e:	2b00      	cmp	r3, #0
 8004280:	d1ee      	bne.n	8004260 <HAL_RCC_ClockConfig+0x260>
 8004282:	e016      	b.n	80042b2 <HAL_RCC_ClockConfig+0x2b2>
 8004284:	40022000 	.word	0x40022000
 8004288:	46020c00 	.word	0x46020c00
 800428c:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004290:	f7fe fb60 	bl	8002954 <HAL_GetTick>
 8004294:	4602      	mov	r2, r0
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800429e:	4293      	cmp	r3, r2
 80042a0:	d901      	bls.n	80042a6 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 80042a2:	2303      	movs	r3, #3
 80042a4:	e090      	b.n	80043c8 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80042a6:	4b4a      	ldr	r3, [pc, #296]	@ (80043d0 <HAL_RCC_ClockConfig+0x3d0>)
 80042a8:	69db      	ldr	r3, [r3, #28]
 80042aa:	f003 030c 	and.w	r3, r3, #12
 80042ae:	2b04      	cmp	r3, #4
 80042b0:	d1ee      	bne.n	8004290 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 0302 	and.w	r3, r3, #2
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d010      	beq.n	80042e0 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	689a      	ldr	r2, [r3, #8]
 80042c2:	4b43      	ldr	r3, [pc, #268]	@ (80043d0 <HAL_RCC_ClockConfig+0x3d0>)
 80042c4:	6a1b      	ldr	r3, [r3, #32]
 80042c6:	f003 030f 	and.w	r3, r3, #15
 80042ca:	429a      	cmp	r2, r3
 80042cc:	d208      	bcs.n	80042e0 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80042ce:	4b40      	ldr	r3, [pc, #256]	@ (80043d0 <HAL_RCC_ClockConfig+0x3d0>)
 80042d0:	6a1b      	ldr	r3, [r3, #32]
 80042d2:	f023 020f 	bic.w	r2, r3, #15
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	493d      	ldr	r1, [pc, #244]	@ (80043d0 <HAL_RCC_ClockConfig+0x3d0>)
 80042dc:	4313      	orrs	r3, r2
 80042de:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80042e0:	4b3c      	ldr	r3, [pc, #240]	@ (80043d4 <HAL_RCC_ClockConfig+0x3d4>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 030f 	and.w	r3, r3, #15
 80042e8:	683a      	ldr	r2, [r7, #0]
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d210      	bcs.n	8004310 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042ee:	4b39      	ldr	r3, [pc, #228]	@ (80043d4 <HAL_RCC_ClockConfig+0x3d4>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f023 020f 	bic.w	r2, r3, #15
 80042f6:	4937      	ldr	r1, [pc, #220]	@ (80043d4 <HAL_RCC_ClockConfig+0x3d4>)
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	4313      	orrs	r3, r2
 80042fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042fe:	4b35      	ldr	r3, [pc, #212]	@ (80043d4 <HAL_RCC_ClockConfig+0x3d4>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f003 030f 	and.w	r3, r3, #15
 8004306:	683a      	ldr	r2, [r7, #0]
 8004308:	429a      	cmp	r2, r3
 800430a:	d001      	beq.n	8004310 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	e05b      	b.n	80043c8 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 0304 	and.w	r3, r3, #4
 8004318:	2b00      	cmp	r3, #0
 800431a:	d010      	beq.n	800433e <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	68da      	ldr	r2, [r3, #12]
 8004320:	4b2b      	ldr	r3, [pc, #172]	@ (80043d0 <HAL_RCC_ClockConfig+0x3d0>)
 8004322:	6a1b      	ldr	r3, [r3, #32]
 8004324:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004328:	429a      	cmp	r2, r3
 800432a:	d208      	bcs.n	800433e <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800432c:	4b28      	ldr	r3, [pc, #160]	@ (80043d0 <HAL_RCC_ClockConfig+0x3d0>)
 800432e:	6a1b      	ldr	r3, [r3, #32]
 8004330:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	4925      	ldr	r1, [pc, #148]	@ (80043d0 <HAL_RCC_ClockConfig+0x3d0>)
 800433a:	4313      	orrs	r3, r2
 800433c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 0308 	and.w	r3, r3, #8
 8004346:	2b00      	cmp	r3, #0
 8004348:	d012      	beq.n	8004370 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	691a      	ldr	r2, [r3, #16]
 800434e:	4b20      	ldr	r3, [pc, #128]	@ (80043d0 <HAL_RCC_ClockConfig+0x3d0>)
 8004350:	6a1b      	ldr	r3, [r3, #32]
 8004352:	091b      	lsrs	r3, r3, #4
 8004354:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004358:	429a      	cmp	r2, r3
 800435a:	d209      	bcs.n	8004370 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800435c:	4b1c      	ldr	r3, [pc, #112]	@ (80043d0 <HAL_RCC_ClockConfig+0x3d0>)
 800435e:	6a1b      	ldr	r3, [r3, #32]
 8004360:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	691b      	ldr	r3, [r3, #16]
 8004368:	011b      	lsls	r3, r3, #4
 800436a:	4919      	ldr	r1, [pc, #100]	@ (80043d0 <HAL_RCC_ClockConfig+0x3d0>)
 800436c:	4313      	orrs	r3, r2
 800436e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 0310 	and.w	r3, r3, #16
 8004378:	2b00      	cmp	r3, #0
 800437a:	d010      	beq.n	800439e <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	695a      	ldr	r2, [r3, #20]
 8004380:	4b13      	ldr	r3, [pc, #76]	@ (80043d0 <HAL_RCC_ClockConfig+0x3d0>)
 8004382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004384:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004388:	429a      	cmp	r2, r3
 800438a:	d208      	bcs.n	800439e <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 800438c:	4b10      	ldr	r3, [pc, #64]	@ (80043d0 <HAL_RCC_ClockConfig+0x3d0>)
 800438e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004390:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	695b      	ldr	r3, [r3, #20]
 8004398:	490d      	ldr	r1, [pc, #52]	@ (80043d0 <HAL_RCC_ClockConfig+0x3d0>)
 800439a:	4313      	orrs	r3, r2
 800439c:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800439e:	f000 f821 	bl	80043e4 <HAL_RCC_GetSysClockFreq>
 80043a2:	4602      	mov	r2, r0
 80043a4:	4b0a      	ldr	r3, [pc, #40]	@ (80043d0 <HAL_RCC_ClockConfig+0x3d0>)
 80043a6:	6a1b      	ldr	r3, [r3, #32]
 80043a8:	f003 030f 	and.w	r3, r3, #15
 80043ac:	490a      	ldr	r1, [pc, #40]	@ (80043d8 <HAL_RCC_ClockConfig+0x3d8>)
 80043ae:	5ccb      	ldrb	r3, [r1, r3]
 80043b0:	fa22 f303 	lsr.w	r3, r2, r3
 80043b4:	4a09      	ldr	r2, [pc, #36]	@ (80043dc <HAL_RCC_ClockConfig+0x3dc>)
 80043b6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80043b8:	4b09      	ldr	r3, [pc, #36]	@ (80043e0 <HAL_RCC_ClockConfig+0x3e0>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4618      	mov	r0, r3
 80043be:	f7fe fa3f 	bl	8002840 <HAL_InitTick>
 80043c2:	4603      	mov	r3, r0
 80043c4:	73fb      	strb	r3, [r7, #15]

  return status;
 80043c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3718      	adds	r7, #24
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}
 80043d0:	46020c00 	.word	0x46020c00
 80043d4:	40022000 	.word	0x40022000
 80043d8:	0800bee0 	.word	0x0800bee0
 80043dc:	20000008 	.word	0x20000008
 80043e0:	2000000c 	.word	0x2000000c

080043e4 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b08b      	sub	sp, #44	@ 0x2c
 80043e8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80043ea:	2300      	movs	r3, #0
 80043ec:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 80043ee:	2300      	movs	r3, #0
 80043f0:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043f2:	4b78      	ldr	r3, [pc, #480]	@ (80045d4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80043f4:	69db      	ldr	r3, [r3, #28]
 80043f6:	f003 030c 	and.w	r3, r3, #12
 80043fa:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80043fc:	4b75      	ldr	r3, [pc, #468]	@ (80045d4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80043fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004400:	f003 0303 	and.w	r3, r3, #3
 8004404:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004406:	69bb      	ldr	r3, [r7, #24]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d005      	beq.n	8004418 <HAL_RCC_GetSysClockFreq+0x34>
 800440c:	69bb      	ldr	r3, [r7, #24]
 800440e:	2b0c      	cmp	r3, #12
 8004410:	d121      	bne.n	8004456 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	2b01      	cmp	r3, #1
 8004416:	d11e      	bne.n	8004456 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8004418:	4b6e      	ldr	r3, [pc, #440]	@ (80045d4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004420:	2b00      	cmp	r3, #0
 8004422:	d107      	bne.n	8004434 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8004424:	4b6b      	ldr	r3, [pc, #428]	@ (80045d4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004426:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800442a:	0b1b      	lsrs	r3, r3, #12
 800442c:	f003 030f 	and.w	r3, r3, #15
 8004430:	627b      	str	r3, [r7, #36]	@ 0x24
 8004432:	e005      	b.n	8004440 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8004434:	4b67      	ldr	r3, [pc, #412]	@ (80045d4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	0f1b      	lsrs	r3, r3, #28
 800443a:	f003 030f 	and.w	r3, r3, #15
 800443e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004440:	4a65      	ldr	r2, [pc, #404]	@ (80045d8 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8004442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004444:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004448:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800444a:	69bb      	ldr	r3, [r7, #24]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d110      	bne.n	8004472 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004452:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004454:	e00d      	b.n	8004472 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004456:	4b5f      	ldr	r3, [pc, #380]	@ (80045d4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004458:	69db      	ldr	r3, [r3, #28]
 800445a:	f003 030c 	and.w	r3, r3, #12
 800445e:	2b04      	cmp	r3, #4
 8004460:	d102      	bne.n	8004468 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004462:	4b5e      	ldr	r3, [pc, #376]	@ (80045dc <HAL_RCC_GetSysClockFreq+0x1f8>)
 8004464:	623b      	str	r3, [r7, #32]
 8004466:	e004      	b.n	8004472 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004468:	69bb      	ldr	r3, [r7, #24]
 800446a:	2b08      	cmp	r3, #8
 800446c:	d101      	bne.n	8004472 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800446e:	4b5b      	ldr	r3, [pc, #364]	@ (80045dc <HAL_RCC_GetSysClockFreq+0x1f8>)
 8004470:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004472:	69bb      	ldr	r3, [r7, #24]
 8004474:	2b0c      	cmp	r3, #12
 8004476:	f040 80a5 	bne.w	80045c4 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800447a:	4b56      	ldr	r3, [pc, #344]	@ (80045d4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800447c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800447e:	f003 0303 	and.w	r3, r3, #3
 8004482:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8004484:	4b53      	ldr	r3, [pc, #332]	@ (80045d4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004486:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004488:	0a1b      	lsrs	r3, r3, #8
 800448a:	f003 030f 	and.w	r3, r3, #15
 800448e:	3301      	adds	r3, #1
 8004490:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8004492:	4b50      	ldr	r3, [pc, #320]	@ (80045d4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004494:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004496:	091b      	lsrs	r3, r3, #4
 8004498:	f003 0301 	and.w	r3, r3, #1
 800449c:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800449e:	4b4d      	ldr	r3, [pc, #308]	@ (80045d4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80044a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044a2:	08db      	lsrs	r3, r3, #3
 80044a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80044a8:	68ba      	ldr	r2, [r7, #8]
 80044aa:	fb02 f303 	mul.w	r3, r2, r3
 80044ae:	ee07 3a90 	vmov	s15, r3
 80044b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044b6:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	2b02      	cmp	r3, #2
 80044be:	d003      	beq.n	80044c8 <HAL_RCC_GetSysClockFreq+0xe4>
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	2b03      	cmp	r3, #3
 80044c4:	d022      	beq.n	800450c <HAL_RCC_GetSysClockFreq+0x128>
 80044c6:	e043      	b.n	8004550 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	ee07 3a90 	vmov	s15, r3
 80044ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044d2:	eddf 6a43 	vldr	s13, [pc, #268]	@ 80045e0 <HAL_RCC_GetSysClockFreq+0x1fc>
 80044d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044da:	4b3e      	ldr	r3, [pc, #248]	@ (80045d4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80044dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044e2:	ee07 3a90 	vmov	s15, r3
 80044e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80044ea:	ed97 6a01 	vldr	s12, [r7, #4]
 80044ee:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 80045e4 <HAL_RCC_GetSysClockFreq+0x200>
 80044f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80044f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80044fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80044fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004502:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004506:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800450a:	e046      	b.n	800459a <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	ee07 3a90 	vmov	s15, r3
 8004512:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004516:	eddf 6a32 	vldr	s13, [pc, #200]	@ 80045e0 <HAL_RCC_GetSysClockFreq+0x1fc>
 800451a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800451e:	4b2d      	ldr	r3, [pc, #180]	@ (80045d4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8004520:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004522:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004526:	ee07 3a90 	vmov	s15, r3
 800452a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800452e:	ed97 6a01 	vldr	s12, [r7, #4]
 8004532:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 80045e4 <HAL_RCC_GetSysClockFreq+0x200>
 8004536:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800453a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800453e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004542:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004546:	ee67 7a27 	vmul.f32	s15, s14, s15
 800454a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800454e:	e024      	b.n	800459a <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004552:	ee07 3a90 	vmov	s15, r3
 8004556:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	ee07 3a90 	vmov	s15, r3
 8004560:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004564:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004568:	4b1a      	ldr	r3, [pc, #104]	@ (80045d4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800456a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800456c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004570:	ee07 3a90 	vmov	s15, r3
 8004574:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004578:	ed97 6a01 	vldr	s12, [r7, #4]
 800457c:	eddf 5a19 	vldr	s11, [pc, #100]	@ 80045e4 <HAL_RCC_GetSysClockFreq+0x200>
 8004580:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004584:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8004588:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800458c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8004590:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004594:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004598:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 800459a:	4b0e      	ldr	r3, [pc, #56]	@ (80045d4 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800459c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800459e:	0e1b      	lsrs	r3, r3, #24
 80045a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80045a4:	3301      	adds	r3, #1
 80045a6:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	ee07 3a90 	vmov	s15, r3
 80045ae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80045b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80045b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045be:	ee17 3a90 	vmov	r3, s15
 80045c2:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 80045c4:	6a3b      	ldr	r3, [r7, #32]
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	372c      	adds	r7, #44	@ 0x2c
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr
 80045d2:	bf00      	nop
 80045d4:	46020c00 	.word	0x46020c00
 80045d8:	0800bef8 	.word	0x0800bef8
 80045dc:	00f42400 	.word	0x00f42400
 80045e0:	4b742400 	.word	0x4b742400
 80045e4:	46000000 	.word	0x46000000

080045e8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80045ec:	f7ff fefa 	bl	80043e4 <HAL_RCC_GetSysClockFreq>
 80045f0:	4602      	mov	r2, r0
 80045f2:	4b07      	ldr	r3, [pc, #28]	@ (8004610 <HAL_RCC_GetHCLKFreq+0x28>)
 80045f4:	6a1b      	ldr	r3, [r3, #32]
 80045f6:	f003 030f 	and.w	r3, r3, #15
 80045fa:	4906      	ldr	r1, [pc, #24]	@ (8004614 <HAL_RCC_GetHCLKFreq+0x2c>)
 80045fc:	5ccb      	ldrb	r3, [r1, r3]
 80045fe:	fa22 f303 	lsr.w	r3, r2, r3
 8004602:	4a05      	ldr	r2, [pc, #20]	@ (8004618 <HAL_RCC_GetHCLKFreq+0x30>)
 8004604:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8004606:	4b04      	ldr	r3, [pc, #16]	@ (8004618 <HAL_RCC_GetHCLKFreq+0x30>)
 8004608:	681b      	ldr	r3, [r3, #0]
}
 800460a:	4618      	mov	r0, r3
 800460c:	bd80      	pop	{r7, pc}
 800460e:	bf00      	nop
 8004610:	46020c00 	.word	0x46020c00
 8004614:	0800bee0 	.word	0x0800bee0
 8004618:	20000008 	.word	0x20000008

0800461c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8004620:	f7ff ffe2 	bl	80045e8 <HAL_RCC_GetHCLKFreq>
 8004624:	4602      	mov	r2, r0
 8004626:	4b05      	ldr	r3, [pc, #20]	@ (800463c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004628:	6a1b      	ldr	r3, [r3, #32]
 800462a:	091b      	lsrs	r3, r3, #4
 800462c:	f003 0307 	and.w	r3, r3, #7
 8004630:	4903      	ldr	r1, [pc, #12]	@ (8004640 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004632:	5ccb      	ldrb	r3, [r1, r3]
 8004634:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004638:	4618      	mov	r0, r3
 800463a:	bd80      	pop	{r7, pc}
 800463c:	46020c00 	.word	0x46020c00
 8004640:	0800bef0 	.word	0x0800bef0

08004644 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8004648:	f7ff ffce 	bl	80045e8 <HAL_RCC_GetHCLKFreq>
 800464c:	4602      	mov	r2, r0
 800464e:	4b05      	ldr	r3, [pc, #20]	@ (8004664 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004650:	6a1b      	ldr	r3, [r3, #32]
 8004652:	0a1b      	lsrs	r3, r3, #8
 8004654:	f003 0307 	and.w	r3, r3, #7
 8004658:	4903      	ldr	r1, [pc, #12]	@ (8004668 <HAL_RCC_GetPCLK2Freq+0x24>)
 800465a:	5ccb      	ldrb	r3, [r1, r3]
 800465c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004660:	4618      	mov	r0, r3
 8004662:	bd80      	pop	{r7, pc}
 8004664:	46020c00 	.word	0x46020c00
 8004668:	0800bef0 	.word	0x0800bef0

0800466c <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8004670:	f7ff ffba 	bl	80045e8 <HAL_RCC_GetHCLKFreq>
 8004674:	4602      	mov	r2, r0
 8004676:	4b05      	ldr	r3, [pc, #20]	@ (800468c <HAL_RCC_GetPCLK3Freq+0x20>)
 8004678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800467a:	091b      	lsrs	r3, r3, #4
 800467c:	f003 0307 	and.w	r3, r3, #7
 8004680:	4903      	ldr	r1, [pc, #12]	@ (8004690 <HAL_RCC_GetPCLK3Freq+0x24>)
 8004682:	5ccb      	ldrb	r3, [r1, r3]
 8004684:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004688:	4618      	mov	r0, r3
 800468a:	bd80      	pop	{r7, pc}
 800468c:	46020c00 	.word	0x46020c00
 8004690:	0800bef0 	.word	0x0800bef0

08004694 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b086      	sub	sp, #24
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 800469c:	4b3e      	ldr	r3, [pc, #248]	@ (8004798 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800469e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046a2:	f003 0304 	and.w	r3, r3, #4
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d003      	beq.n	80046b2 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80046aa:	f7fe fdbf 	bl	800322c <HAL_PWREx_GetVoltageRange>
 80046ae:	6178      	str	r0, [r7, #20]
 80046b0:	e019      	b.n	80046e6 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80046b2:	4b39      	ldr	r3, [pc, #228]	@ (8004798 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80046b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046b8:	4a37      	ldr	r2, [pc, #220]	@ (8004798 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80046ba:	f043 0304 	orr.w	r3, r3, #4
 80046be:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80046c2:	4b35      	ldr	r3, [pc, #212]	@ (8004798 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80046c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046c8:	f003 0304 	and.w	r3, r3, #4
 80046cc:	60fb      	str	r3, [r7, #12]
 80046ce:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80046d0:	f7fe fdac 	bl	800322c <HAL_PWREx_GetVoltageRange>
 80046d4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80046d6:	4b30      	ldr	r3, [pc, #192]	@ (8004798 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80046d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80046dc:	4a2e      	ldr	r2, [pc, #184]	@ (8004798 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80046de:	f023 0304 	bic.w	r3, r3, #4
 80046e2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80046ec:	d003      	beq.n	80046f6 <RCC_SetFlashLatencyFromMSIRange+0x62>
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80046f4:	d109      	bne.n	800470a <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80046fc:	d202      	bcs.n	8004704 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 80046fe:	2301      	movs	r3, #1
 8004700:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8004702:	e033      	b.n	800476c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8004704:	2300      	movs	r3, #0
 8004706:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8004708:	e030      	b.n	800476c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004710:	d208      	bcs.n	8004724 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004718:	d102      	bne.n	8004720 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 800471a:	2303      	movs	r3, #3
 800471c:	613b      	str	r3, [r7, #16]
 800471e:	e025      	b.n	800476c <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	e035      	b.n	8004790 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800472a:	d90f      	bls.n	800474c <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d109      	bne.n	8004746 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004738:	d902      	bls.n	8004740 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800473a:	2300      	movs	r3, #0
 800473c:	613b      	str	r3, [r7, #16]
 800473e:	e015      	b.n	800476c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8004740:	2301      	movs	r3, #1
 8004742:	613b      	str	r3, [r7, #16]
 8004744:	e012      	b.n	800476c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8004746:	2300      	movs	r3, #0
 8004748:	613b      	str	r3, [r7, #16]
 800474a:	e00f      	b.n	800476c <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004752:	d109      	bne.n	8004768 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800475a:	d102      	bne.n	8004762 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 800475c:	2301      	movs	r3, #1
 800475e:	613b      	str	r3, [r7, #16]
 8004760:	e004      	b.n	800476c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8004762:	2302      	movs	r3, #2
 8004764:	613b      	str	r3, [r7, #16]
 8004766:	e001      	b.n	800476c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8004768:	2301      	movs	r3, #1
 800476a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800476c:	4b0b      	ldr	r3, [pc, #44]	@ (800479c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f023 020f 	bic.w	r2, r3, #15
 8004774:	4909      	ldr	r1, [pc, #36]	@ (800479c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	4313      	orrs	r3, r2
 800477a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800477c:	4b07      	ldr	r3, [pc, #28]	@ (800479c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 030f 	and.w	r3, r3, #15
 8004784:	693a      	ldr	r2, [r7, #16]
 8004786:	429a      	cmp	r2, r3
 8004788:	d001      	beq.n	800478e <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e000      	b.n	8004790 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800478e:	2300      	movs	r3, #0
}
 8004790:	4618      	mov	r0, r3
 8004792:	3718      	adds	r7, #24
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}
 8004798:	46020c00 	.word	0x46020c00
 800479c:	40022000 	.word	0x40022000

080047a0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 80047a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047a4:	b0c4      	sub	sp, #272	@ 0x110
 80047a6:	af00      	add	r7, sp, #0
 80047a8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80047ac:	2300      	movs	r3, #0
 80047ae:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80047b2:	2300      	movs	r3, #0
 80047b4:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80047b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80047bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047c0:	f002 0401 	and.w	r4, r2, #1
 80047c4:	2500      	movs	r5, #0
 80047c6:	ea54 0305 	orrs.w	r3, r4, r5
 80047ca:	d00b      	beq.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 80047cc:	4bd5      	ldr	r3, [pc, #852]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80047ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80047d2:	f023 0103 	bic.w	r1, r3, #3
 80047d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80047da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047dc:	4ad1      	ldr	r2, [pc, #836]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80047de:	430b      	orrs	r3, r1
 80047e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80047e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80047e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ec:	f002 0802 	and.w	r8, r2, #2
 80047f0:	f04f 0900 	mov.w	r9, #0
 80047f4:	ea58 0309 	orrs.w	r3, r8, r9
 80047f8:	d00b      	beq.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 80047fa:	4bca      	ldr	r3, [pc, #808]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80047fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004800:	f023 010c 	bic.w	r1, r3, #12
 8004804:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004808:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800480a:	4ac6      	ldr	r2, [pc, #792]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800480c:	430b      	orrs	r3, r1
 800480e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004812:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800481a:	f002 0a04 	and.w	sl, r2, #4
 800481e:	f04f 0b00 	mov.w	fp, #0
 8004822:	ea5a 030b 	orrs.w	r3, sl, fp
 8004826:	d00b      	beq.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8004828:	4bbe      	ldr	r3, [pc, #760]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800482a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800482e:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004832:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004836:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004838:	4aba      	ldr	r2, [pc, #744]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800483a:	430b      	orrs	r3, r1
 800483c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004840:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004848:	f002 0308 	and.w	r3, r2, #8
 800484c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004850:	2300      	movs	r3, #0
 8004852:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004856:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800485a:	460b      	mov	r3, r1
 800485c:	4313      	orrs	r3, r2
 800485e:	d00b      	beq.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8004860:	4bb0      	ldr	r3, [pc, #704]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004862:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004866:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800486a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800486e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004870:	4aac      	ldr	r2, [pc, #688]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004872:	430b      	orrs	r3, r1
 8004874:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004878:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800487c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004880:	f002 0310 	and.w	r3, r2, #16
 8004884:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004888:	2300      	movs	r3, #0
 800488a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800488e:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004892:	460b      	mov	r3, r1
 8004894:	4313      	orrs	r3, r2
 8004896:	d00b      	beq.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8004898:	4ba2      	ldr	r3, [pc, #648]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800489a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800489e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80048a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80048a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048a8:	4a9e      	ldr	r2, [pc, #632]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80048aa:	430b      	orrs	r3, r1
 80048ac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#if defined(USART6)
  /*-------------------------- USART6 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80048b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80048b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048b8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80048bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80048c0:	2300      	movs	r3, #0
 80048c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80048c6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80048ca:	460b      	mov	r3, r1
 80048cc:	4313      	orrs	r3, r2
 80048ce:	d00b      	beq.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(pPeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
 80048d0:	4b94      	ldr	r3, [pc, #592]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80048d2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80048d6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80048da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80048de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80048e0:	4a90      	ldr	r2, [pc, #576]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80048e2:	430b      	orrs	r3, r1
 80048e4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80048e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80048ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048f0:	f002 0320 	and.w	r3, r2, #32
 80048f4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80048f8:	2300      	movs	r3, #0
 80048fa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80048fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004902:	460b      	mov	r3, r1
 8004904:	4313      	orrs	r3, r2
 8004906:	d00b      	beq.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8004908:	4b86      	ldr	r3, [pc, #536]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800490a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800490e:	f023 0107 	bic.w	r1, r3, #7
 8004912:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004916:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004918:	4a82      	ldr	r2, [pc, #520]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800491a:	430b      	orrs	r3, r1
 800491c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004920:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004928:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800492c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004930:	2300      	movs	r3, #0
 8004932:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004936:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800493a:	460b      	mov	r3, r1
 800493c:	4313      	orrs	r3, r2
 800493e:	d00b      	beq.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8004940:	4b78      	ldr	r3, [pc, #480]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004942:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004946:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 800494a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800494e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004950:	4a74      	ldr	r2, [pc, #464]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004952:	430b      	orrs	r3, r1
 8004954:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004958:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800495c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004960:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004964:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004968:	2300      	movs	r3, #0
 800496a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800496e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004972:	460b      	mov	r3, r1
 8004974:	4313      	orrs	r3, r2
 8004976:	d00b      	beq.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8004978:	4b6a      	ldr	r3, [pc, #424]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800497a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800497e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004982:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004986:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004988:	4a66      	ldr	r2, [pc, #408]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 800498a:	430b      	orrs	r3, r1
 800498c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004990:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004998:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 800499c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80049a0:	2300      	movs	r3, #0
 80049a2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80049a6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80049aa:	460b      	mov	r3, r1
 80049ac:	4313      	orrs	r3, r2
 80049ae:	d00b      	beq.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 80049b0:	4b5c      	ldr	r3, [pc, #368]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80049b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80049b6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80049ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80049be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049c0:	4a58      	ldr	r2, [pc, #352]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80049c2:	430b      	orrs	r3, r1
 80049c4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80049c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80049cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049d0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80049d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80049d8:	2300      	movs	r3, #0
 80049da:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80049de:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80049e2:	460b      	mov	r3, r1
 80049e4:	4313      	orrs	r3, r2
 80049e6:	d00b      	beq.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 80049e8:	4b4e      	ldr	r3, [pc, #312]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80049ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80049ee:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 80049f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80049f6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80049f8:	4a4a      	ldr	r2, [pc, #296]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 80049fa:	430b      	orrs	r3, r1
 80049fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(I2C5)
  /*-------------------------- I2C5 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C5) == RCC_PERIPHCLK_I2C5)
 8004a00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a08:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004a0c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004a10:	2300      	movs	r3, #0
 8004a12:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004a16:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004a1a:	460b      	mov	r3, r1
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	d00b      	beq.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C5CLKSOURCE(pPeriphClkInit->I2c5ClockSelection));

    /* Configure the I2C5 clock source */
    __HAL_RCC_I2C5_CONFIG(pPeriphClkInit->I2c5ClockSelection);
 8004a20:	4b40      	ldr	r3, [pc, #256]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004a22:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004a26:	f023 7140 	bic.w	r1, r3, #50331648	@ 0x3000000
 8004a2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a2e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004a30:	4a3c      	ldr	r2, [pc, #240]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004a32:	430b      	orrs	r3, r1
 8004a34:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C5 */

#if defined(I2C6)
  /*-------------------------- I2C6 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C6) == RCC_PERIPHCLK_I2C6)
 8004a38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a40:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004a44:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004a48:	2300      	movs	r3, #0
 8004a4a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004a4e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004a52:	460b      	mov	r3, r1
 8004a54:	4313      	orrs	r3, r2
 8004a56:	d00c      	beq.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C6CLKSOURCE(pPeriphClkInit->I2c6ClockSelection));

    /* Configure the I2C6 clock source */
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
 8004a58:	4b32      	ldr	r3, [pc, #200]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004a5a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004a5e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8004a62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a6a:	4a2e      	ldr	r2, [pc, #184]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004a6c:	430b      	orrs	r3, r1
 8004a6e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004a72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a7a:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8004a7e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004a82:	2300      	movs	r3, #0
 8004a84:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004a88:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004a8c:	460b      	mov	r3, r1
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	d00c      	beq.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x30c>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8004a92:	4b24      	ldr	r3, [pc, #144]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004a94:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004a98:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8004a9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004aa0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004aa4:	4a1f      	ldr	r2, [pc, #124]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004aa6:	430b      	orrs	r3, r1
 8004aa8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004aac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ab4:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004ab8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004abc:	2300      	movs	r3, #0
 8004abe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004ac2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004ac6:	460b      	mov	r3, r1
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	d00c      	beq.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8004acc:	4b15      	ldr	r3, [pc, #84]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004ace:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004ad2:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8004ad6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ade:	4a11      	ldr	r2, [pc, #68]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004ae0:	430b      	orrs	r3, r1
 8004ae2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8004ae6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aee:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004af2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004af6:	2300      	movs	r3, #0
 8004af8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004afc:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004b00:	460b      	mov	r3, r1
 8004b02:	4313      	orrs	r3, r2
 8004b04:	d010      	beq.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x388>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8004b06:	4b07      	ldr	r3, [pc, #28]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004b08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004b0c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004b10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b14:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004b18:	4a02      	ldr	r2, [pc, #8]	@ (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x384>)
 8004b1a:	430b      	orrs	r3, r1
 8004b1c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004b20:	e002      	b.n	8004b28 <HAL_RCCEx_PeriphCLKConfig+0x388>
 8004b22:	bf00      	nop
 8004b24:	46020c00 	.word	0x46020c00
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004b28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b30:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004b34:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004b38:	2300      	movs	r3, #0
 8004b3a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004b3e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004b42:	460b      	mov	r3, r1
 8004b44:	4313      	orrs	r3, r2
 8004b46:	d04c      	beq.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8004b48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b4c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004b50:	2b80      	cmp	r3, #128	@ 0x80
 8004b52:	d02d      	beq.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8004b54:	2b80      	cmp	r3, #128	@ 0x80
 8004b56:	d827      	bhi.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8004b58:	2b60      	cmp	r3, #96	@ 0x60
 8004b5a:	d02b      	beq.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8004b5c:	2b60      	cmp	r3, #96	@ 0x60
 8004b5e:	d823      	bhi.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8004b60:	2b40      	cmp	r3, #64	@ 0x40
 8004b62:	d006      	beq.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 8004b64:	2b40      	cmp	r3, #64	@ 0x40
 8004b66:	d81f      	bhi.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d009      	beq.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004b6c:	2b20      	cmp	r3, #32
 8004b6e:	d011      	beq.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8004b70:	e01a      	b.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004b72:	4bbe      	ldr	r3, [pc, #760]	@ (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b76:	4abd      	ldr	r2, [pc, #756]	@ (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b7c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004b7e:	e01a      	b.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004b80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b84:	3308      	adds	r3, #8
 8004b86:	4618      	mov	r0, r3
 8004b88:	f002 fc32 	bl	80073f0 <RCCEx_PLL2_Config>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004b92:	e010      	b.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x416>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004b94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b98:	332c      	adds	r3, #44	@ 0x2c
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f002 fcc0 	bl	8007520 <RCCEx_PLL3_Config>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004ba6:	e006      	b.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x416>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8004bae:	e002      	b.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 8004bb0:	bf00      	nop
 8004bb2:	e000      	b.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x416>
        break;
 8004bb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bb6:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d10d      	bne.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8004bbe:	4bab      	ldr	r3, [pc, #684]	@ (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bc0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004bc4:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 8004bc8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004bcc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004bd0:	4aa6      	ldr	r2, [pc, #664]	@ (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bd2:	430b      	orrs	r3, r1
 8004bd4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004bd8:	e003      	b.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bda:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8004bde:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004be2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bea:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004bee:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004bf8:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004bfc:	460b      	mov	r3, r1
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	d053      	beq.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8004c02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c06:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004c0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c0e:	d033      	beq.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
 8004c10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c14:	d82c      	bhi.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8004c16:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004c1a:	d02f      	beq.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
 8004c1c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004c20:	d826      	bhi.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8004c22:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c26:	d008      	beq.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x49a>
 8004c28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c2c:	d820      	bhi.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d00a      	beq.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8004c32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c36:	d011      	beq.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8004c38:	e01a      	b.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004c3a:	4b8c      	ldr	r3, [pc, #560]	@ (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c3e:	4a8b      	ldr	r2, [pc, #556]	@ (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c44:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004c46:	e01a      	b.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004c48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c4c:	3308      	adds	r3, #8
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f002 fbce 	bl	80073f0 <RCCEx_PLL2_Config>
 8004c54:	4603      	mov	r3, r0
 8004c56:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004c5a:	e010      	b.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x4de>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004c5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c60:	332c      	adds	r3, #44	@ 0x2c
 8004c62:	4618      	mov	r0, r3
 8004c64:	f002 fc5c 	bl	8007520 <RCCEx_PLL3_Config>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004c6e:	e006      	b.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x4de>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8004c76:	e002      	b.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 8004c78:	bf00      	nop
 8004c7a:	e000      	b.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x4de>
        break;
 8004c7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c7e:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d10d      	bne.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8004c86:	4b79      	ldr	r3, [pc, #484]	@ (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c88:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004c8c:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8004c90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c94:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004c98:	4a74      	ldr	r2, [pc, #464]	@ (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c9a:	430b      	orrs	r3, r1
 8004c9c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004ca0:	e003      	b.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x50a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ca2:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8004ca6:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8004caa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cb2:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004cb6:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004cb8:	2300      	movs	r3, #0
 8004cba:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004cbc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004cc0:	460b      	mov	r3, r1
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	d046      	beq.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8004cc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004cca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004cce:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004cd2:	d028      	beq.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8004cd4:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8004cd8:	d821      	bhi.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x57e>
 8004cda:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004cde:	d022      	beq.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8004ce0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004ce4:	d81b      	bhi.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x57e>
 8004ce6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004cea:	d01c      	beq.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8004cec:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004cf0:	d815      	bhi.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x57e>
 8004cf2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004cf6:	d008      	beq.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x56a>
 8004cf8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004cfc:	d80f      	bhi.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x57e>
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d011      	beq.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8004d02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d06:	d00e      	beq.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8004d08:	e009      	b.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x57e>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8004d0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d0e:	3308      	adds	r3, #8
 8004d10:	4618      	mov	r0, r3
 8004d12:	f002 fb6d 	bl	80073f0 <RCCEx_PLL2_Config>
 8004d16:	4603      	mov	r3, r0
 8004d18:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8004d1c:	e004      	b.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x588>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8004d24:	e000      	b.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x588>
        break;
 8004d26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d28:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d10d      	bne.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x5ac>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8004d30:	4b4e      	ldr	r3, [pc, #312]	@ (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d32:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004d36:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004d3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d3e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004d42:	4a4a      	ldr	r2, [pc, #296]	@ (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d44:	430b      	orrs	r3, r1
 8004d46:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004d4a:	e003      	b.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d4c:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8004d50:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8004d54:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d5c:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004d60:	673b      	str	r3, [r7, #112]	@ 0x70
 8004d62:	2300      	movs	r3, #0
 8004d64:	677b      	str	r3, [r7, #116]	@ 0x74
 8004d66:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004d6a:	460b      	mov	r3, r1
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	d03f      	beq.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8004d70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d74:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d78:	2b04      	cmp	r3, #4
 8004d7a:	d81e      	bhi.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x61a>
 8004d7c:	a201      	add	r2, pc, #4	@ (adr r2, 8004d84 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004d7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d82:	bf00      	nop
 8004d84:	08004dc3 	.word	0x08004dc3
 8004d88:	08004d99 	.word	0x08004d99
 8004d8c:	08004da7 	.word	0x08004da7
 8004d90:	08004dc3 	.word	0x08004dc3
 8004d94:	08004dc3 	.word	0x08004dc3
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004d98:	4b34      	ldr	r3, [pc, #208]	@ (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d9c:	4a33      	ldr	r2, [pc, #204]	@ (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d9e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004da2:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8004da4:	e00e      	b.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x624>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004da6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004daa:	332c      	adds	r3, #44	@ 0x2c
 8004dac:	4618      	mov	r0, r3
 8004dae:	f002 fbb7 	bl	8007520 <RCCEx_PLL3_Config>
 8004db2:	4603      	mov	r3, r0
 8004db4:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8004db8:	e004      	b.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x624>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8004dc0:	e000      	b.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x624>
        break;
 8004dc2:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004dc4:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d10d      	bne.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8004dcc:	4b27      	ldr	r3, [pc, #156]	@ (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004dce:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8004dd2:	f023 0107 	bic.w	r1, r3, #7
 8004dd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004dda:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004dde:	4a23      	ldr	r2, [pc, #140]	@ (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004de0:	430b      	orrs	r3, r1
 8004de2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8004de6:	e003      	b.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x650>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004de8:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8004dec:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8004df0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004df8:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004dfc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004dfe:	2300      	movs	r3, #0
 8004e00:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004e02:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004e06:	460b      	mov	r3, r1
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	d04c      	beq.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x706>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8004e0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e10:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004e14:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004e18:	d02a      	beq.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
 8004e1a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004e1e:	d821      	bhi.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 8004e20:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004e24:	d026      	beq.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
 8004e26:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004e2a:	d81b      	bhi.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 8004e2c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004e30:	d00e      	beq.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 8004e32:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004e36:	d815      	bhi.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d01d      	beq.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
 8004e3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e40:	d110      	bne.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x6c4>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004e42:	4b0a      	ldr	r3, [pc, #40]	@ (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e46:	4a09      	ldr	r2, [pc, #36]	@ (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004e48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e4c:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8004e4e:	e014      	b.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x6da>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8004e50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e54:	332c      	adds	r3, #44	@ 0x2c
 8004e56:	4618      	mov	r0, r3
 8004e58:	f002 fb62 	bl	8007520 <RCCEx_PLL3_Config>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8004e62:	e00a      	b.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x6da>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8004e6a:	e006      	b.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x6da>
 8004e6c:	46020c00 	.word	0x46020c00
        break;
 8004e70:	bf00      	nop
 8004e72:	e002      	b.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x6da>
        break;
 8004e74:	bf00      	nop
 8004e76:	e000      	b.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x6da>
        break;
 8004e78:	bf00      	nop
    }
    if (ret == HAL_OK)
 8004e7a:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d10d      	bne.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8004e82:	4baf      	ldr	r3, [pc, #700]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8004e84:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8004e88:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004e8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e90:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004e94:	4aaa      	ldr	r2, [pc, #680]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8004e96:	430b      	orrs	r3, r1
 8004e98:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8004e9c:	e003      	b.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x706>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e9e:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8004ea2:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004ea6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eae:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004eb2:	663b      	str	r3, [r7, #96]	@ 0x60
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	667b      	str	r3, [r7, #100]	@ 0x64
 8004eb8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004ebc:	460b      	mov	r3, r1
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	f000 80b5 	beq.w	800502e <HAL_RCCEx_PeriphCLKConfig+0x88e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	f887 3109 	strb.w	r3, [r7, #265]	@ 0x109
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004eca:	4b9d      	ldr	r3, [pc, #628]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8004ecc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ed0:	f003 0304 	and.w	r3, r3, #4
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d113      	bne.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x760>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ed8:	4b99      	ldr	r3, [pc, #612]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8004eda:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ede:	4a98      	ldr	r2, [pc, #608]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8004ee0:	f043 0304 	orr.w	r3, r3, #4
 8004ee4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004ee8:	4b95      	ldr	r3, [pc, #596]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8004eea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004eee:	f003 0304 	and.w	r3, r3, #4
 8004ef2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004ef6:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
      pwrclkchanged = SET;
 8004efa:	2301      	movs	r3, #1
 8004efc:	f887 3109 	strb.w	r3, [r7, #265]	@ 0x109
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8004f00:	4b90      	ldr	r3, [pc, #576]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 8004f02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f04:	4a8f      	ldr	r2, [pc, #572]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 8004f06:	f043 0301 	orr.w	r3, r3, #1
 8004f0a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004f0c:	f7fd fd22 	bl	8002954 <HAL_GetTick>
 8004f10:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004f14:	e00b      	b.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x78e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f16:	f7fd fd1d 	bl	8002954 <HAL_GetTick>
 8004f1a:	4602      	mov	r2, r0
 8004f1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f20:	1ad3      	subs	r3, r2, r3
 8004f22:	2b02      	cmp	r3, #2
 8004f24:	d903      	bls.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x78e>
      {
        ret = HAL_TIMEOUT;
 8004f26:	2303      	movs	r3, #3
 8004f28:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8004f2c:	e005      	b.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x79a>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004f2e:	4b85      	ldr	r3, [pc, #532]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x9a4>)
 8004f30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f32:	f003 0301 	and.w	r3, r3, #1
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d0ed      	beq.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x776>
      }
    }

    if (ret == HAL_OK)
 8004f3a:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d165      	bne.n	800500e <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004f42:	4b7f      	ldr	r3, [pc, #508]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8004f44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004f48:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f4c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8004f50:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d023      	beq.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x800>
 8004f58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f5c:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8004f60:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d01b      	beq.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x800>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004f68:	4b75      	ldr	r3, [pc, #468]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8004f6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004f6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f72:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004f76:	4b72      	ldr	r3, [pc, #456]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8004f78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004f7c:	4a70      	ldr	r2, [pc, #448]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8004f7e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f82:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004f86:	4b6e      	ldr	r3, [pc, #440]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8004f88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004f8c:	4a6c      	ldr	r2, [pc, #432]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8004f8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f92:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004f96:	4a6a      	ldr	r2, [pc, #424]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8004f98:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004f9c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004fa0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004fa4:	f003 0301 	and.w	r3, r3, #1
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d019      	beq.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x840>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fac:	f7fd fcd2 	bl	8002954 <HAL_GetTick>
 8004fb0:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004fb4:	e00d      	b.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x832>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fb6:	f7fd fccd 	bl	8002954 <HAL_GetTick>
 8004fba:	4602      	mov	r2, r0
 8004fbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fc0:	1ad2      	subs	r2, r2, r3
 8004fc2:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d903      	bls.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x832>
          {
            ret = HAL_TIMEOUT;
 8004fca:	2303      	movs	r3, #3
 8004fcc:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
            break;
 8004fd0:	e006      	b.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x840>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004fd2:	4b5b      	ldr	r3, [pc, #364]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8004fd4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004fd8:	f003 0302 	and.w	r3, r3, #2
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d0ea      	beq.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x816>
          }
        }
      }

      if (ret == HAL_OK)
 8004fe0:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d10d      	bne.n	8005004 <HAL_RCCEx_PeriphCLKConfig+0x864>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8004fe8:	4b55      	ldr	r3, [pc, #340]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8004fea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004fee:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004ff2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ff6:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8004ffa:	4a51      	ldr	r2, [pc, #324]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8004ffc:	430b      	orrs	r3, r1
 8004ffe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005002:	e008      	b.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x876>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005004:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005008:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
 800500c:	e003      	b.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x876>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800500e:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005012:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005016:	f897 3109 	ldrb.w	r3, [r7, #265]	@ 0x109
 800501a:	2b01      	cmp	r3, #1
 800501c:	d107      	bne.n	800502e <HAL_RCCEx_PeriphCLKConfig+0x88e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800501e:	4b48      	ldr	r3, [pc, #288]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005020:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005024:	4a46      	ldr	r2, [pc, #280]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005026:	f023 0304 	bic.w	r3, r3, #4
 800502a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 800502e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005036:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800503a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800503c:	2300      	movs	r3, #0
 800503e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005040:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005044:	460b      	mov	r3, r1
 8005046:	4313      	orrs	r3, r2
 8005048:	d042      	beq.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x930>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 800504a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800504e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005052:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005056:	d022      	beq.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 8005058:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800505c:	d81b      	bhi.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 800505e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005062:	d011      	beq.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
 8005064:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005068:	d815      	bhi.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
 800506a:	2b00      	cmp	r3, #0
 800506c:	d019      	beq.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x902>
 800506e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005072:	d110      	bne.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x8f6>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005074:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005078:	3308      	adds	r3, #8
 800507a:	4618      	mov	r0, r3
 800507c:	f002 f9b8 	bl	80073f0 <RCCEx_PLL2_Config>
 8005080:	4603      	mov	r3, r0
 8005082:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8005086:	e00d      	b.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x904>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005088:	4b2d      	ldr	r3, [pc, #180]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800508a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800508c:	4a2c      	ldr	r2, [pc, #176]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 800508e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005092:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8005094:	e006      	b.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x904>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 800509c:	e002      	b.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x904>
        break;
 800509e:	bf00      	nop
 80050a0:	e000      	b.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x904>
        break;
 80050a2:	bf00      	nop
    }
    if (ret == HAL_OK)
 80050a4:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d10d      	bne.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x928>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 80050ac:	4b24      	ldr	r3, [pc, #144]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80050ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80050b2:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80050b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80050ba:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80050be:	4a20      	ldr	r2, [pc, #128]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 80050c0:	430b      	orrs	r3, r1
 80050c2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80050c6:	e003      	b.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x930>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050c8:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80050cc:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80050d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80050d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050d8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80050dc:	653b      	str	r3, [r7, #80]	@ 0x50
 80050de:	2300      	movs	r3, #0
 80050e0:	657b      	str	r3, [r7, #84]	@ 0x54
 80050e2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80050e6:	460b      	mov	r3, r1
 80050e8:	4313      	orrs	r3, r2
 80050ea:	d031      	beq.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 80050ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80050f0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80050f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80050f8:	d00b      	beq.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x972>
 80050fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80050fe:	d804      	bhi.n	800510a <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8005100:	2b00      	cmp	r3, #0
 8005102:	d008      	beq.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0x976>
 8005104:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005108:	d007      	beq.n	800511a <HAL_RCCEx_PeriphCLKConfig+0x97a>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 8005110:	e004      	b.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 8005112:	bf00      	nop
 8005114:	e002      	b.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 8005116:	bf00      	nop
 8005118:	e000      	b.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x97c>
        break;
 800511a:	bf00      	nop
    }
    if (ret == HAL_OK)
 800511c:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005120:	2b00      	cmp	r3, #0
 8005122:	d111      	bne.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8005124:	4b06      	ldr	r3, [pc, #24]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005126:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800512a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800512e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005132:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005136:	4a02      	ldr	r2, [pc, #8]	@ (8005140 <HAL_RCCEx_PeriphCLKConfig+0x9a0>)
 8005138:	430b      	orrs	r3, r1
 800513a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800513e:	e007      	b.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
 8005140:	46020c00 	.word	0x46020c00
 8005144:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005148:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 800514c:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

#if defined(SAES)
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8005150:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005158:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800515c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800515e:	2300      	movs	r3, #0
 8005160:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005162:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005166:	460b      	mov	r3, r1
 8005168:	4313      	orrs	r3, r2
 800516a:	d00c      	beq.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 800516c:	4bb2      	ldr	r3, [pc, #712]	@ (8005438 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800516e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005172:	f423 6100 	bic.w	r1, r3, #2048	@ 0x800
 8005176:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800517a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800517e:	4aae      	ldr	r2, [pc, #696]	@ (8005438 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005180:	430b      	orrs	r3, r1
 8005182:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8005186:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800518a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800518e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8005192:	643b      	str	r3, [r7, #64]	@ 0x40
 8005194:	2300      	movs	r3, #0
 8005196:	647b      	str	r3, [r7, #68]	@ 0x44
 8005198:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800519c:	460b      	mov	r3, r1
 800519e:	4313      	orrs	r3, r2
 80051a0:	d019      	beq.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0xa36>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 80051a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80051a6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80051aa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80051ae:	d105      	bne.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0xa1c>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80051b0:	4ba1      	ldr	r3, [pc, #644]	@ (8005438 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80051b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051b4:	4aa0      	ldr	r2, [pc, #640]	@ (8005438 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80051b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051ba:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 80051bc:	4b9e      	ldr	r3, [pc, #632]	@ (8005438 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80051be:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80051c2:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80051c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80051ca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80051ce:	4a9a      	ldr	r2, [pc, #616]	@ (8005438 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80051d0:	430b      	orrs	r3, r1
 80051d2:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80051d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80051da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051de:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80051e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80051e4:	2300      	movs	r3, #0
 80051e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80051e8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80051ec:	460b      	mov	r3, r1
 80051ee:	4313      	orrs	r3, r2
 80051f0:	d00c      	beq.n	800520c <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80051f2:	4b91      	ldr	r3, [pc, #580]	@ (8005438 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80051f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80051f8:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80051fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005200:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005204:	4a8c      	ldr	r2, [pc, #560]	@ (8005438 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005206:	430b      	orrs	r3, r1
 8005208:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800520c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005214:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005218:	633b      	str	r3, [r7, #48]	@ 0x30
 800521a:	2300      	movs	r3, #0
 800521c:	637b      	str	r3, [r7, #52]	@ 0x34
 800521e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005222:	460b      	mov	r3, r1
 8005224:	4313      	orrs	r3, r2
 8005226:	d00c      	beq.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8005228:	4b83      	ldr	r3, [pc, #524]	@ (8005438 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800522a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800522e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005232:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005236:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800523a:	4a7f      	ldr	r2, [pc, #508]	@ (8005438 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800523c:	430b      	orrs	r3, r1
 800523e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8005242:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800524a:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800524e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005250:	2300      	movs	r3, #0
 8005252:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005254:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005258:	460b      	mov	r3, r1
 800525a:	4313      	orrs	r3, r2
 800525c:	d00c      	beq.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0xad8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800525e:	4b76      	ldr	r3, [pc, #472]	@ (8005438 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005260:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005264:	f023 0218 	bic.w	r2, r3, #24
 8005268:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800526c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8005270:	4971      	ldr	r1, [pc, #452]	@ (8005438 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005272:	4313      	orrs	r3, r2
 8005274:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005278:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800527c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005280:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8005284:	623b      	str	r3, [r7, #32]
 8005286:	2300      	movs	r3, #0
 8005288:	627b      	str	r3, [r7, #36]	@ 0x24
 800528a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800528e:	460b      	mov	r3, r1
 8005290:	4313      	orrs	r3, r2
 8005292:	d032      	beq.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8005294:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005298:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800529c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80052a0:	d105      	bne.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052a2:	4b65      	ldr	r3, [pc, #404]	@ (8005438 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80052a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052a6:	4a64      	ldr	r2, [pc, #400]	@ (8005438 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80052a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80052ac:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 80052ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052b2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80052b6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80052ba:	d108      	bne.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0xb2e>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80052bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052c0:	3308      	adds	r3, #8
 80052c2:	4618      	mov	r0, r3
 80052c4:	f002 f894 	bl	80073f0 <RCCEx_PLL2_Config>
 80052c8:	4603      	mov	r3, r0
 80052ca:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
    }
    if (ret == HAL_OK)
 80052ce:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d10d      	bne.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0xb52>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 80052d6:	4b58      	ldr	r3, [pc, #352]	@ (8005438 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80052d8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80052dc:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80052e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052e4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80052e8:	4953      	ldr	r1, [pc, #332]	@ (8005438 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80052ea:	4313      	orrs	r3, r2
 80052ec:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80052f0:	e003      	b.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0xb5a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052f2:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80052f6:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

#if defined(HSPI1)
  /*-------------------------- HSPIx kernel clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSPI) == RCC_PERIPHCLK_HSPI)
 80052fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005302:	2100      	movs	r1, #0
 8005304:	61b9      	str	r1, [r7, #24]
 8005306:	f003 0301 	and.w	r3, r3, #1
 800530a:	61fb      	str	r3, [r7, #28]
 800530c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005310:	460b      	mov	r3, r1
 8005312:	4313      	orrs	r3, r2
 8005314:	d04a      	beq.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0xc0c>
  {

    /* Check the parameters */
    assert_param(IS_RCC_HSPICLKSOURCE(pPeriphClkInit->HspiClockSelection));

    switch (pPeriphClkInit->HspiClockSelection)
 8005316:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800531a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800531e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005322:	d01e      	beq.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0xbc2>
 8005324:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8005328:	d825      	bhi.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
 800532a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800532e:	d00e      	beq.n	800534e <HAL_RCCEx_PeriphCLKConfig+0xbae>
 8005330:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005334:	d81f      	bhi.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
 8005336:	2b00      	cmp	r3, #0
 8005338:	d021      	beq.n	800537e <HAL_RCCEx_PeriphCLKConfig+0xbde>
 800533a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800533e:	d11a      	bne.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
        /* HSPI kernel clock source config set later after clock selection check */
        break;

      case RCC_HSPICLKSOURCE_PLL1:  /* PLL1 is used as clock source for HSPI kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005340:	4b3d      	ldr	r3, [pc, #244]	@ (8005438 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005342:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005344:	4a3c      	ldr	r2, [pc, #240]	@ (8005438 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 8005346:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800534a:	6293      	str	r3, [r2, #40]	@ 0x28
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 800534c:	e018      	b.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      case RCC_HSPICLKSOURCE_PLL2:  /* PLL2 is used as clock source for HSPI kernel clock*/
        /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800534e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005352:	3308      	adds	r3, #8
 8005354:	4618      	mov	r0, r3
 8005356:	f002 f84b 	bl	80073f0 <RCCEx_PLL2_Config>
 800535a:	4603      	mov	r3, r0
 800535c:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8005360:	e00e      	b.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      case RCC_HSPICLKSOURCE_PLL3:  /* PLL3 is used as clock source for HSPI kernel clock*/
        /* PLL3 input clock, parameters M, N & R configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005362:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005366:	332c      	adds	r3, #44	@ 0x2c
 8005368:	4618      	mov	r0, r3
 800536a:	f002 f8d9 	bl	8007520 <RCCEx_PLL3_Config>
 800536e:	4603      	mov	r3, r0
 8005370:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* HSPI kernel clock source config set later after clock selection check */
        break;
 8005374:	e004      	b.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0xbe0>

      default:
        ret = HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 800537c:	e000      	b.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0xbe0>
        break;
 800537e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005380:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005384:	2b00      	cmp	r3, #0
 8005386:	d10d      	bne.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0xc04>
    {
      /* Set the source of HSPI kernel clock*/
      __HAL_RCC_HSPI_CONFIG(pPeriphClkInit->HspiClockSelection);
 8005388:	4b2b      	ldr	r3, [pc, #172]	@ (8005438 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800538a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800538e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005392:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005396:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800539a:	4927      	ldr	r1, [pc, #156]	@ (8005438 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800539c:	4313      	orrs	r3, r2
 800539e:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80053a2:	e003      	b.n	80053ac <HAL_RCCEx_PeriphCLKConfig+0xc0c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053a4:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80053a8:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 80053ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80053b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053b4:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 80053b8:	613b      	str	r3, [r7, #16]
 80053ba:	2300      	movs	r3, #0
 80053bc:	617b      	str	r3, [r7, #20]
 80053be:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80053c2:	460b      	mov	r3, r1
 80053c4:	4313      	orrs	r3, r2
 80053c6:	d03d      	beq.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0xca4>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 80053c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80053cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053d0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80053d4:	d00e      	beq.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 80053d6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80053da:	d815      	bhi.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d017      	beq.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80053e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80053e4:	d110      	bne.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0xc68>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053e6:	4b14      	ldr	r3, [pc, #80]	@ (8005438 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80053e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053ea:	4a13      	ldr	r2, [pc, #76]	@ (8005438 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 80053ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80053f0:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80053f2:	e00e      	b.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0xc72>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80053f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80053f8:	3308      	adds	r3, #8
 80053fa:	4618      	mov	r0, r3
 80053fc:	f001 fff8 	bl	80073f0 <RCCEx_PLL2_Config>
 8005400:	4603      	mov	r3, r0
 8005402:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8005406:	e004      	b.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0xc72>
      default:
        ret = HAL_ERROR;
 8005408:	2301      	movs	r3, #1
 800540a:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 800540e:	e000      	b.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0xc72>
        break;
 8005410:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005412:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005416:	2b00      	cmp	r3, #0
 8005418:	d110      	bne.n	800543c <HAL_RCCEx_PeriphCLKConfig+0xc9c>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800541a:	4b07      	ldr	r3, [pc, #28]	@ (8005438 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800541c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005420:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005424:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005428:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800542c:	4902      	ldr	r1, [pc, #8]	@ (8005438 <HAL_RCCEx_PeriphCLKConfig+0xc98>)
 800542e:	4313      	orrs	r3, r2
 8005430:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8005434:	e006      	b.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0xca4>
 8005436:	bf00      	nop
 8005438:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800543c:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005440:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8005444:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800544c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8005450:	60bb      	str	r3, [r7, #8]
 8005452:	2300      	movs	r3, #0
 8005454:	60fb      	str	r3, [r7, #12]
 8005456:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800545a:	460b      	mov	r3, r1
 800545c:	4313      	orrs	r3, r2
 800545e:	d00c      	beq.n	800547a <HAL_RCCEx_PeriphCLKConfig+0xcda>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8005460:	4b2c      	ldr	r3, [pc, #176]	@ (8005514 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8005462:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005466:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 800546a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800546e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005472:	4928      	ldr	r1, [pc, #160]	@ (8005514 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 8005474:	4313      	orrs	r3, r2
 8005476:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
#endif /* defined(DSI) */

#if defined(USB_OTG_HS)

  /*-------------------------- USB PHY clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USBPHY) == RCC_PERIPHCLK_USBPHY)
 800547a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800547e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005482:	2100      	movs	r1, #0
 8005484:	6039      	str	r1, [r7, #0]
 8005486:	f003 0308 	and.w	r3, r3, #8
 800548a:	607b      	str	r3, [r7, #4]
 800548c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005490:	460b      	mov	r3, r1
 8005492:	4313      	orrs	r3, r2
 8005494:	d036      	beq.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {

    /* Check the parameters */
    assert_param(IS_RCC_USBPHYCLKSOURCE(pPeriphClkInit->UsbPhyClockSelection));

    switch (pPeriphClkInit->UsbPhyClockSelection)
 8005496:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800549a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800549e:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80054a2:	d00d      	beq.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80054a4:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80054a8:	d811      	bhi.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0xd2e>
 80054aa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80054ae:	d012      	beq.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80054b0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80054b4:	d80b      	bhi.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0xd2e>
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d00d      	beq.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80054ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054be:	d106      	bne.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0xd2e>
        break;

      case RCC_USBPHYCLKSOURCE_PLL1:      /* PLL1 P divider clock selected as USB PHY clock */
      case RCC_USBPHYCLKSOURCE_PLL1_DIV2: /* PLL1 P divider clock div 2 selected as USB PHY clock */
        /* Enable P Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80054c0:	4b14      	ldr	r3, [pc, #80]	@ (8005514 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 80054c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054c4:	4a13      	ldr	r2, [pc, #76]	@ (8005514 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 80054c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054ca:	6293      	str	r3, [r2, #40]	@ 0x28
        /* USB-PHY clock source config set later after clock selection check */
        break;
 80054cc:	e004      	b.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>

      default:
        ret = HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
        break;
 80054d4:	e000      	b.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0xd38>
        break;
 80054d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054d8:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d10d      	bne.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0xd5c>
    {
      /* Set the source of USBPHY clock*/
      __HAL_RCC_USBPHY_CONFIG(pPeriphClkInit->UsbPhyClockSelection);
 80054e0:	4b0c      	ldr	r3, [pc, #48]	@ (8005514 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 80054e2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80054e6:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80054ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80054ee:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80054f2:	4908      	ldr	r1, [pc, #32]	@ (8005514 <HAL_RCCEx_PeriphCLKConfig+0xd74>)
 80054f4:	4313      	orrs	r3, r2
 80054f6:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80054fa:	e003      	b.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0xd64>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054fc:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8005500:	f887 310a 	strb.w	r3, [r7, #266]	@ 0x10a
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8005504:	f897 310a 	ldrb.w	r3, [r7, #266]	@ 0x10a
}
 8005508:	4618      	mov	r0, r3
 800550a:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 800550e:	46bd      	mov	sp, r7
 8005510:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005514:	46020c00 	.word	0x46020c00

08005518 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8005518:	b480      	push	{r7}
 800551a:	b089      	sub	sp, #36	@ 0x24
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8005520:	4ba6      	ldr	r3, [pc, #664]	@ (80057bc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005522:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005524:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005528:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800552a:	4ba4      	ldr	r3, [pc, #656]	@ (80057bc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800552c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800552e:	f003 0303 	and.w	r3, r3, #3
 8005532:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8005534:	4ba1      	ldr	r3, [pc, #644]	@ (80057bc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005536:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005538:	0a1b      	lsrs	r3, r3, #8
 800553a:	f003 030f 	and.w	r3, r3, #15
 800553e:	3301      	adds	r3, #1
 8005540:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8005542:	4b9e      	ldr	r3, [pc, #632]	@ (80057bc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005544:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005546:	091b      	lsrs	r3, r3, #4
 8005548:	f003 0301 	and.w	r3, r3, #1
 800554c:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800554e:	4b9b      	ldr	r3, [pc, #620]	@ (80057bc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005550:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005552:	08db      	lsrs	r3, r3, #3
 8005554:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005558:	68fa      	ldr	r2, [r7, #12]
 800555a:	fb02 f303 	mul.w	r3, r2, r3
 800555e:	ee07 3a90 	vmov	s15, r3
 8005562:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005566:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  switch (pll1source)
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	2b03      	cmp	r3, #3
 800556e:	d062      	beq.n	8005636 <HAL_RCCEx_GetPLL1ClockFreq+0x11e>
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	2b03      	cmp	r3, #3
 8005574:	f200 8081 	bhi.w	800567a <HAL_RCCEx_GetPLL1ClockFreq+0x162>
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	2b01      	cmp	r3, #1
 800557c:	d024      	beq.n	80055c8 <HAL_RCCEx_GetPLL1ClockFreq+0xb0>
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	2b02      	cmp	r3, #2
 8005582:	d17a      	bne.n	800567a <HAL_RCCEx_GetPLL1ClockFreq+0x162>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	ee07 3a90 	vmov	s15, r3
 800558a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800558e:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 80057c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8005592:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005596:	4b89      	ldr	r3, [pc, #548]	@ (80057bc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005598:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800559a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800559e:	ee07 3a90 	vmov	s15, r3
 80055a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80055a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80055aa:	eddf 5a86 	vldr	s11, [pc, #536]	@ 80057c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80055ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80055b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 80055b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80055ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80055be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80055c6:	e08f      	b.n	80056e8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80055c8:	4b7c      	ldr	r3, [pc, #496]	@ (80057bc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d005      	beq.n	80055e0 <HAL_RCCEx_GetPLL1ClockFreq+0xc8>
 80055d4:	4b79      	ldr	r3, [pc, #484]	@ (80057bc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	0f1b      	lsrs	r3, r3, #28
 80055da:	f003 030f 	and.w	r3, r3, #15
 80055de:	e006      	b.n	80055ee <HAL_RCCEx_GetPLL1ClockFreq+0xd6>
 80055e0:	4b76      	ldr	r3, [pc, #472]	@ (80057bc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80055e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80055e6:	041b      	lsls	r3, r3, #16
 80055e8:	0f1b      	lsrs	r3, r3, #28
 80055ea:	f003 030f 	and.w	r3, r3, #15
 80055ee:	4a76      	ldr	r2, [pc, #472]	@ (80057c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 80055f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055f4:	ee07 3a90 	vmov	s15, r3
 80055f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	ee07 3a90 	vmov	s15, r3
 8005602:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005606:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800560a:	69bb      	ldr	r3, [r7, #24]
 800560c:	ee07 3a90 	vmov	s15, r3
 8005610:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005614:	ed97 6a02 	vldr	s12, [r7, #8]
 8005618:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 80057c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 800561c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005620:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005624:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005628:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800562c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005630:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005634:	e058      	b.n	80056e8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	ee07 3a90 	vmov	s15, r3
 800563c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005640:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80057c0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a8>
 8005644:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005648:	4b5c      	ldr	r3, [pc, #368]	@ (80057bc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800564a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800564c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005650:	ee07 3a90 	vmov	s15, r3
 8005654:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8005658:	ed97 6a02 	vldr	s12, [r7, #8]
 800565c:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80057c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 8005660:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005664:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1);
 8005668:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800566c:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005670:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005674:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005678:	e036      	b.n	80056e8 <HAL_RCCEx_GetPLL1ClockFreq+0x1d0>
    default:
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800567a:	4b50      	ldr	r3, [pc, #320]	@ (80057bc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005682:	2b00      	cmp	r3, #0
 8005684:	d005      	beq.n	8005692 <HAL_RCCEx_GetPLL1ClockFreq+0x17a>
 8005686:	4b4d      	ldr	r3, [pc, #308]	@ (80057bc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	0f1b      	lsrs	r3, r3, #28
 800568c:	f003 030f 	and.w	r3, r3, #15
 8005690:	e006      	b.n	80056a0 <HAL_RCCEx_GetPLL1ClockFreq+0x188>
 8005692:	4b4a      	ldr	r3, [pc, #296]	@ (80057bc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005694:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005698:	041b      	lsls	r3, r3, #16
 800569a:	0f1b      	lsrs	r3, r3, #28
 800569c:	f003 030f 	and.w	r3, r3, #15
 80056a0:	4a49      	ldr	r2, [pc, #292]	@ (80057c8 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>)
 80056a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056a6:	ee07 3a90 	vmov	s15, r3
 80056aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	ee07 3a90 	vmov	s15, r3
 80056b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80056bc:	69bb      	ldr	r3, [r7, #24]
 80056be:	ee07 3a90 	vmov	s15, r3
 80056c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80056ca:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 80057c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2ac>
 80056ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80056da:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80056de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056e2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80056e6:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 80056e8:	4b34      	ldr	r3, [pc, #208]	@ (80057bc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80056ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d017      	beq.n	8005724 <HAL_RCCEx_GetPLL1ClockFreq+0x20c>
  {
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80056f4:	4b31      	ldr	r3, [pc, #196]	@ (80057bc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 80056f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056f8:	0a5b      	lsrs	r3, r3, #9
 80056fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80056fe:	ee07 3a90 	vmov	s15, r3
 8005702:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8005706:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800570a:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800570e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005712:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005716:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800571a:	ee17 2a90 	vmov	r2, s15
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	601a      	str	r2, [r3, #0]
 8005722:	e002      	b.n	800572a <HAL_RCCEx_GetPLL1ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2200      	movs	r2, #0
 8005728:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800572a:	4b24      	ldr	r3, [pc, #144]	@ (80057bc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800572c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800572e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005732:	2b00      	cmp	r3, #0
 8005734:	d017      	beq.n	8005766 <HAL_RCCEx_GetPLL1ClockFreq+0x24e>
  {
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005736:	4b21      	ldr	r3, [pc, #132]	@ (80057bc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 8005738:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800573a:	0c1b      	lsrs	r3, r3, #16
 800573c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005740:	ee07 3a90 	vmov	s15, r3
 8005744:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8005748:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800574c:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005750:	edd7 6a07 	vldr	s13, [r7, #28]
 8005754:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005758:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800575c:	ee17 2a90 	vmov	r2, s15
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	605a      	str	r2, [r3, #4]
 8005764:	e002      	b.n	800576c <HAL_RCCEx_GetPLL1ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2200      	movs	r2, #0
 800576a:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800576c:	4b13      	ldr	r3, [pc, #76]	@ (80057bc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800576e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005770:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005774:	2b00      	cmp	r3, #0
 8005776:	d017      	beq.n	80057a8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
  {
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005778:	4b10      	ldr	r3, [pc, #64]	@ (80057bc <HAL_RCCEx_GetPLL1ClockFreq+0x2a4>)
 800577a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800577c:	0e1b      	lsrs	r3, r3, #24
 800577e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005782:	ee07 3a90 	vmov	s15, r3
 8005786:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 800578a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800578e:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8005792:	edd7 6a07 	vldr	s13, [r7, #28]
 8005796:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800579a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800579e:	ee17 2a90 	vmov	r2, s15
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	609a      	str	r2, [r3, #8]
  else
  {
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80057a6:	e002      	b.n	80057ae <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2200      	movs	r2, #0
 80057ac:	609a      	str	r2, [r3, #8]
}
 80057ae:	bf00      	nop
 80057b0:	3724      	adds	r7, #36	@ 0x24
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr
 80057ba:	bf00      	nop
 80057bc:	46020c00 	.word	0x46020c00
 80057c0:	4b742400 	.word	0x4b742400
 80057c4:	46000000 	.word	0x46000000
 80057c8:	0800bef8 	.word	0x0800bef8

080057cc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b089      	sub	sp, #36	@ 0x24
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 80057d4:	4ba6      	ldr	r3, [pc, #664]	@ (8005a70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80057d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057dc:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 80057de:	4ba4      	ldr	r3, [pc, #656]	@ (8005a70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80057e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057e2:	f003 0303 	and.w	r3, r3, #3
 80057e6:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 80057e8:	4ba1      	ldr	r3, [pc, #644]	@ (8005a70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80057ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057ec:	0a1b      	lsrs	r3, r3, #8
 80057ee:	f003 030f 	and.w	r3, r3, #15
 80057f2:	3301      	adds	r3, #1
 80057f4:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 80057f6:	4b9e      	ldr	r3, [pc, #632]	@ (8005a70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80057f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057fa:	091b      	lsrs	r3, r3, #4
 80057fc:	f003 0301 	and.w	r3, r3, #1
 8005800:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8005802:	4b9b      	ldr	r3, [pc, #620]	@ (8005a70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005806:	08db      	lsrs	r3, r3, #3
 8005808:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800580c:	68fa      	ldr	r2, [r7, #12]
 800580e:	fb02 f303 	mul.w	r3, r2, r3
 8005812:	ee07 3a90 	vmov	s15, r3
 8005816:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800581a:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  switch (pll2source)
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	2b03      	cmp	r3, #3
 8005822:	d062      	beq.n	80058ea <HAL_RCCEx_GetPLL2ClockFreq+0x11e>
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	2b03      	cmp	r3, #3
 8005828:	f200 8081 	bhi.w	800592e <HAL_RCCEx_GetPLL2ClockFreq+0x162>
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	2b01      	cmp	r3, #1
 8005830:	d024      	beq.n	800587c <HAL_RCCEx_GetPLL2ClockFreq+0xb0>
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	2b02      	cmp	r3, #2
 8005836:	d17a      	bne.n	800592e <HAL_RCCEx_GetPLL2ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	ee07 3a90 	vmov	s15, r3
 800583e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005842:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8005a74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 8005846:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800584a:	4b89      	ldr	r3, [pc, #548]	@ (8005a70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800584c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800584e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005852:	ee07 3a90 	vmov	s15, r3
 8005856:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800585a:	ed97 6a02 	vldr	s12, [r7, #8]
 800585e:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8005a78 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8005862:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005866:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800586a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800586e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005872:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005876:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800587a:	e08f      	b.n	800599c <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800587c:	4b7c      	ldr	r3, [pc, #496]	@ (8005a70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005884:	2b00      	cmp	r3, #0
 8005886:	d005      	beq.n	8005894 <HAL_RCCEx_GetPLL2ClockFreq+0xc8>
 8005888:	4b79      	ldr	r3, [pc, #484]	@ (8005a70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800588a:	689b      	ldr	r3, [r3, #8]
 800588c:	0f1b      	lsrs	r3, r3, #28
 800588e:	f003 030f 	and.w	r3, r3, #15
 8005892:	e006      	b.n	80058a2 <HAL_RCCEx_GetPLL2ClockFreq+0xd6>
 8005894:	4b76      	ldr	r3, [pc, #472]	@ (8005a70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005896:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800589a:	041b      	lsls	r3, r3, #16
 800589c:	0f1b      	lsrs	r3, r3, #28
 800589e:	f003 030f 	and.w	r3, r3, #15
 80058a2:	4a76      	ldr	r2, [pc, #472]	@ (8005a7c <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 80058a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058a8:	ee07 3a90 	vmov	s15, r3
 80058ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	ee07 3a90 	vmov	s15, r3
 80058b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80058be:	69bb      	ldr	r3, [r7, #24]
 80058c0:	ee07 3a90 	vmov	s15, r3
 80058c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058c8:	ed97 6a02 	vldr	s12, [r7, #8]
 80058cc:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8005a78 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 80058d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058d8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80058dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 80058e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058e4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80058e8:	e058      	b.n	800599c <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	ee07 3a90 	vmov	s15, r3
 80058f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058f4:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005a74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a8>
 80058f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058fc:	4b5c      	ldr	r3, [pc, #368]	@ (8005a70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80058fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005900:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005904:	ee07 3a90 	vmov	s15, r3
 8005908:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800590c:	ed97 6a02 	vldr	s12, [r7, #8]
 8005910:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8005a78 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8005914:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005918:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn2 / (float_t)0x2000) + (float_t)1);
 800591c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005920:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8005924:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005928:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800592c:	e036      	b.n	800599c <HAL_RCCEx_GetPLL2ClockFreq+0x1d0>

    default:
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800592e:	4b50      	ldr	r3, [pc, #320]	@ (8005a70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005936:	2b00      	cmp	r3, #0
 8005938:	d005      	beq.n	8005946 <HAL_RCCEx_GetPLL2ClockFreq+0x17a>
 800593a:	4b4d      	ldr	r3, [pc, #308]	@ (8005a70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	0f1b      	lsrs	r3, r3, #28
 8005940:	f003 030f 	and.w	r3, r3, #15
 8005944:	e006      	b.n	8005954 <HAL_RCCEx_GetPLL2ClockFreq+0x188>
 8005946:	4b4a      	ldr	r3, [pc, #296]	@ (8005a70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005948:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800594c:	041b      	lsls	r3, r3, #16
 800594e:	0f1b      	lsrs	r3, r3, #28
 8005950:	f003 030f 	and.w	r3, r3, #15
 8005954:	4a49      	ldr	r2, [pc, #292]	@ (8005a7c <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>)
 8005956:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800595a:	ee07 3a90 	vmov	s15, r3
 800595e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	ee07 3a90 	vmov	s15, r3
 8005968:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800596c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005970:	69bb      	ldr	r3, [r7, #24]
 8005972:	ee07 3a90 	vmov	s15, r3
 8005976:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800597a:	ed97 6a02 	vldr	s12, [r7, #8]
 800597e:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8005a78 <HAL_RCCEx_GetPLL2ClockFreq+0x2ac>
 8005982:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005986:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800598a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800598e:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8005992:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005996:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800599a:	bf00      	nop
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800599c:	4b34      	ldr	r3, [pc, #208]	@ (8005a70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 800599e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d017      	beq.n	80059d8 <HAL_RCCEx_GetPLL2ClockFreq+0x20c>
  {
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80059a8:	4b31      	ldr	r3, [pc, #196]	@ (8005a70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80059aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059ac:	0a5b      	lsrs	r3, r3, #9
 80059ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80059b2:	ee07 3a90 	vmov	s15, r3
 80059b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 80059ba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80059be:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80059c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80059c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80059ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80059ce:	ee17 2a90 	vmov	r2, s15
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	601a      	str	r2, [r3, #0]
 80059d6:	e002      	b.n	80059de <HAL_RCCEx_GetPLL2ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2200      	movs	r2, #0
 80059dc:	601a      	str	r2, [r3, #0]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 80059de:	4b24      	ldr	r3, [pc, #144]	@ (8005a70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80059e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d017      	beq.n	8005a1a <HAL_RCCEx_GetPLL2ClockFreq+0x24e>
  {
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80059ea:	4b21      	ldr	r3, [pc, #132]	@ (8005a70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 80059ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059ee:	0c1b      	lsrs	r3, r3, #16
 80059f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80059f4:	ee07 3a90 	vmov	s15, r3
 80059f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 80059fc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005a00:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005a04:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a10:	ee17 2a90 	vmov	r2, s15
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	605a      	str	r2, [r3, #4]
 8005a18:	e002      	b.n	8005a20 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	605a      	str	r2, [r3, #4]
  }
  if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8005a20:	4b13      	ldr	r3, [pc, #76]	@ (8005a70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a24:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d017      	beq.n	8005a5c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
  {
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005a2c:	4b10      	ldr	r3, [pc, #64]	@ (8005a70 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>)
 8005a2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a30:	0e1b      	lsrs	r3, r3, #24
 8005a32:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a36:	ee07 3a90 	vmov	s15, r3
 8005a3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8005a3e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005a42:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8005a46:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a52:	ee17 2a90 	vmov	r2, s15
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005a5a:	e002      	b.n	8005a62 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	609a      	str	r2, [r3, #8]
}
 8005a62:	bf00      	nop
 8005a64:	3724      	adds	r7, #36	@ 0x24
 8005a66:	46bd      	mov	sp, r7
 8005a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6c:	4770      	bx	lr
 8005a6e:	bf00      	nop
 8005a70:	46020c00 	.word	0x46020c00
 8005a74:	4b742400 	.word	0x4b742400
 8005a78:	46000000 	.word	0x46000000
 8005a7c:	0800bef8 	.word	0x0800bef8

08005a80 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b089      	sub	sp, #36	@ 0x24
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8005a88:	4ba6      	ldr	r3, [pc, #664]	@ (8005d24 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005a8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a90:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8005a92:	4ba4      	ldr	r3, [pc, #656]	@ (8005d24 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a96:	f003 0303 	and.w	r3, r3, #3
 8005a9a:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8005a9c:	4ba1      	ldr	r3, [pc, #644]	@ (8005d24 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005a9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005aa0:	0a1b      	lsrs	r3, r3, #8
 8005aa2:	f003 030f 	and.w	r3, r3, #15
 8005aa6:	3301      	adds	r3, #1
 8005aa8:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8005aaa:	4b9e      	ldr	r3, [pc, #632]	@ (8005d24 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005aae:	091b      	lsrs	r3, r3, #4
 8005ab0:	f003 0301 	and.w	r3, r3, #1
 8005ab4:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8005ab6:	4b9b      	ldr	r3, [pc, #620]	@ (8005d24 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005ab8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005aba:	08db      	lsrs	r3, r3, #3
 8005abc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005ac0:	68fa      	ldr	r2, [r7, #12]
 8005ac2:	fb02 f303 	mul.w	r3, r2, r3
 8005ac6:	ee07 3a90 	vmov	s15, r3
 8005aca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ace:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  switch (pll3source)
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	2b03      	cmp	r3, #3
 8005ad6:	d062      	beq.n	8005b9e <HAL_RCCEx_GetPLL3ClockFreq+0x11e>
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	2b03      	cmp	r3, #3
 8005adc:	f200 8081 	bhi.w	8005be2 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	2b01      	cmp	r3, #1
 8005ae4:	d024      	beq.n	8005b30 <HAL_RCCEx_GetPLL3ClockFreq+0xb0>
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	2b02      	cmp	r3, #2
 8005aea:	d17a      	bne.n	8005be2 <HAL_RCCEx_GetPLL3ClockFreq+0x162>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	ee07 3a90 	vmov	s15, r3
 8005af2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005af6:	eddf 6a8c 	vldr	s13, [pc, #560]	@ 8005d28 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8005afa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005afe:	4b89      	ldr	r3, [pc, #548]	@ (8005d24 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005b00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b06:	ee07 3a90 	vmov	s15, r3
 8005b0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8005b0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005b12:	eddf 5a86 	vldr	s11, [pc, #536]	@ 8005d2c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8005b16:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005b1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8005b1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b22:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005b26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b2a:	edc7 7a07 	vstr	s15, [r7, #28]

      break;
 8005b2e:	e08f      	b.n	8005c50 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005b30:	4b7c      	ldr	r3, [pc, #496]	@ (8005d24 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005b32:	689b      	ldr	r3, [r3, #8]
 8005b34:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d005      	beq.n	8005b48 <HAL_RCCEx_GetPLL3ClockFreq+0xc8>
 8005b3c:	4b79      	ldr	r3, [pc, #484]	@ (8005d24 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005b3e:	689b      	ldr	r3, [r3, #8]
 8005b40:	0f1b      	lsrs	r3, r3, #28
 8005b42:	f003 030f 	and.w	r3, r3, #15
 8005b46:	e006      	b.n	8005b56 <HAL_RCCEx_GetPLL3ClockFreq+0xd6>
 8005b48:	4b76      	ldr	r3, [pc, #472]	@ (8005d24 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005b4a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005b4e:	041b      	lsls	r3, r3, #16
 8005b50:	0f1b      	lsrs	r3, r3, #28
 8005b52:	f003 030f 	and.w	r3, r3, #15
 8005b56:	4a76      	ldr	r2, [pc, #472]	@ (8005d30 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8005b58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b5c:	ee07 3a90 	vmov	s15, r3
 8005b60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	ee07 3a90 	vmov	s15, r3
 8005b6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005b72:	69bb      	ldr	r3, [r7, #24]
 8005b74:	ee07 3a90 	vmov	s15, r3
 8005b78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b7c:	ed97 6a02 	vldr	s12, [r7, #8]
 8005b80:	eddf 5a6a 	vldr	s11, [pc, #424]	@ 8005d2c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8005b84:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b88:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b8c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b90:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005b94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b98:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005b9c:	e058      	b.n	8005c50 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	ee07 3a90 	vmov	s15, r3
 8005ba4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ba8:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005d28 <HAL_RCCEx_GetPLL3ClockFreq+0x2a8>
 8005bac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bb0:	4b5c      	ldr	r3, [pc, #368]	@ (8005d24 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005bb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bb8:	ee07 3a90 	vmov	s15, r3
 8005bbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8005bc0:	ed97 6a02 	vldr	s12, [r7, #8]
 8005bc4:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8005d2c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8005bc8:	eec6 7a25 	vdiv.f32	s15, s12, s11
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005bcc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn3 / (float_t)0x2000) + (float_t)1);
 8005bd0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005bd4:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8005bd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bdc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005be0:	e036      	b.n	8005c50 <HAL_RCCEx_GetPLL3ClockFreq+0x1d0>

    default:
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005be2:	4b50      	ldr	r3, [pc, #320]	@ (8005d24 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d005      	beq.n	8005bfa <HAL_RCCEx_GetPLL3ClockFreq+0x17a>
 8005bee:	4b4d      	ldr	r3, [pc, #308]	@ (8005d24 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005bf0:	689b      	ldr	r3, [r3, #8]
 8005bf2:	0f1b      	lsrs	r3, r3, #28
 8005bf4:	f003 030f 	and.w	r3, r3, #15
 8005bf8:	e006      	b.n	8005c08 <HAL_RCCEx_GetPLL3ClockFreq+0x188>
 8005bfa:	4b4a      	ldr	r3, [pc, #296]	@ (8005d24 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005bfc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005c00:	041b      	lsls	r3, r3, #16
 8005c02:	0f1b      	lsrs	r3, r3, #28
 8005c04:	f003 030f 	and.w	r3, r3, #15
 8005c08:	4a49      	ldr	r2, [pc, #292]	@ (8005d30 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>)
 8005c0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c0e:	ee07 3a90 	vmov	s15, r3
 8005c12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	ee07 3a90 	vmov	s15, r3
 8005c1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005c24:	69bb      	ldr	r3, [r7, #24]
 8005c26:	ee07 3a90 	vmov	s15, r3
 8005c2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c2e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005c32:	eddf 5a3e 	vldr	s11, [pc, #248]	@ 8005d2c <HAL_RCCEx_GetPLL3ClockFreq+0x2ac>
 8005c36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005c42:	ee77 7aa6 	vadd.f32	s15, s15, s13
      pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8005c46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c4a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005c4e:	bf00      	nop
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8005c50:	4b34      	ldr	r3, [pc, #208]	@ (8005d24 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005c52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d017      	beq.n	8005c8c <HAL_RCCEx_GetPLL3ClockFreq+0x20c>
  {
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005c5c:	4b31      	ldr	r3, [pc, #196]	@ (8005d24 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005c5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c60:	0a5b      	lsrs	r3, r3, #9
 8005c62:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005c66:	ee07 3a90 	vmov	s15, r3
 8005c6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8005c6e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005c72:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005c76:	edd7 6a07 	vldr	s13, [r7, #28]
 8005c7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c82:	ee17 2a90 	vmov	r2, s15
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	601a      	str	r2, [r3, #0]
 8005c8a:	e002      	b.n	8005c92 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8005c92:	4b24      	ldr	r3, [pc, #144]	@ (8005d24 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d017      	beq.n	8005cce <HAL_RCCEx_GetPLL3ClockFreq+0x24e>
  {
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005c9e:	4b21      	ldr	r3, [pc, #132]	@ (8005d24 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005ca0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ca2:	0c1b      	lsrs	r3, r3, #16
 8005ca4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ca8:	ee07 3a90 	vmov	s15, r3
 8005cac:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8005cb0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005cb4:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005cb8:	edd7 6a07 	vldr	s13, [r7, #28]
 8005cbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005cc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005cc4:	ee17 2a90 	vmov	r2, s15
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	605a      	str	r2, [r3, #4]
 8005ccc:	e002      	b.n	8005cd4 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
                                                                   (float_t)1));
  }
  else
  {
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8005cd4:	4b13      	ldr	r3, [pc, #76]	@ (8005d24 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005cd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cd8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d017      	beq.n	8005d10 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
  {
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005ce0:	4b10      	ldr	r3, [pc, #64]	@ (8005d24 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>)
 8005ce2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ce4:	0e1b      	lsrs	r3, r3, #24
 8005ce6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005cea:	ee07 3a90 	vmov	s15, r3
 8005cee:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                   RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8005cf2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005cf6:	ee37 7a87 	vadd.f32	s14, s15, s14
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8005cfa:	edd7 6a07 	vldr	s13, [r7, #28]
 8005cfe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d06:	ee17 2a90 	vmov	r2, s15
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	609a      	str	r2, [r3, #8]
  else
  {
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005d0e:	e002      	b.n	8005d16 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2200      	movs	r2, #0
 8005d14:	609a      	str	r2, [r3, #8]
}
 8005d16:	bf00      	nop
 8005d18:	3724      	adds	r7, #36	@ 0x24
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr
 8005d22:	bf00      	nop
 8005d24:	46020c00 	.word	0x46020c00
 8005d28:	4b742400 	.word	0x4b742400
 8005d2c:	46000000 	.word	0x46000000
 8005d30:	0800bef8 	.word	0x0800bef8

08005d34 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b08e      	sub	sp, #56	@ 0x38
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8005d3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d42:	f5a2 2180 	sub.w	r1, r2, #262144	@ 0x40000
 8005d46:	430b      	orrs	r3, r1
 8005d48:	d145      	bne.n	8005dd6 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005d4a:	4ba7      	ldr	r3, [pc, #668]	@ (8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005d4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005d50:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d54:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8005d56:	4ba4      	ldr	r3, [pc, #656]	@ (8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005d58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005d5c:	f003 0302 	and.w	r3, r3, #2
 8005d60:	2b02      	cmp	r3, #2
 8005d62:	d108      	bne.n	8005d76 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8005d64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d6a:	d104      	bne.n	8005d76 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8005d6c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d70:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d72:	f001 bb31 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8005d76:	4b9c      	ldr	r3, [pc, #624]	@ (8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005d78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005d7c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005d80:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005d84:	d114      	bne.n	8005db0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8005d86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d8c:	d110      	bne.n	8005db0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005d8e:	4b96      	ldr	r3, [pc, #600]	@ (8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005d90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8005d94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d98:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005d9c:	d103      	bne.n	8005da6 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8005d9e:	23fa      	movs	r3, #250	@ 0xfa
 8005da0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005da2:	f001 bb19 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = LSI_VALUE;
 8005da6:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8005daa:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8005dac:	f001 bb14 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8005db0:	4b8d      	ldr	r3, [pc, #564]	@ (8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005db8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005dbc:	d107      	bne.n	8005dce <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8005dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dc0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005dc4:	d103      	bne.n	8005dce <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8005dc6:	4b89      	ldr	r3, [pc, #548]	@ (8005fec <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8005dc8:	637b      	str	r3, [r7, #52]	@ 0x34
 8005dca:	f001 bb05 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	637b      	str	r3, [r7, #52]	@ 0x34
 8005dd2:	f001 bb01 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005dd6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005dda:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8005dde:	430b      	orrs	r3, r1
 8005de0:	d151      	bne.n	8005e86 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8005de2:	4b81      	ldr	r3, [pc, #516]	@ (8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005de4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005de8:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8005dec:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8005dee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005df0:	2b80      	cmp	r3, #128	@ 0x80
 8005df2:	d035      	beq.n	8005e60 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8005df4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005df6:	2b80      	cmp	r3, #128	@ 0x80
 8005df8:	d841      	bhi.n	8005e7e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8005dfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dfc:	2b60      	cmp	r3, #96	@ 0x60
 8005dfe:	d02a      	beq.n	8005e56 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8005e00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e02:	2b60      	cmp	r3, #96	@ 0x60
 8005e04:	d83b      	bhi.n	8005e7e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8005e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e08:	2b40      	cmp	r3, #64	@ 0x40
 8005e0a:	d009      	beq.n	8005e20 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8005e0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e0e:	2b40      	cmp	r3, #64	@ 0x40
 8005e10:	d835      	bhi.n	8005e7e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8005e12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d00c      	beq.n	8005e32 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8005e18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e1a:	2b20      	cmp	r3, #32
 8005e1c:	d012      	beq.n	8005e44 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8005e1e:	e02e      	b.n	8005e7e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005e20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005e24:	4618      	mov	r0, r3
 8005e26:	f7ff fb77 	bl	8005518 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8005e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e2c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005e2e:	f001 bad3 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e32:	f107 0318 	add.w	r3, r7, #24
 8005e36:	4618      	mov	r0, r3
 8005e38:	f7ff fcc8 	bl	80057cc <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8005e3c:	69bb      	ldr	r3, [r7, #24]
 8005e3e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005e40:	f001 baca 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005e44:	f107 030c 	add.w	r3, r7, #12
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f7ff fe19 	bl	8005a80 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005e52:	f001 bac1 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8005e56:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8005e5a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005e5c:	f001 babc 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005e60:	4b61      	ldr	r3, [pc, #388]	@ (8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e6c:	d103      	bne.n	8005e76 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8005e6e:	4b60      	ldr	r3, [pc, #384]	@ (8005ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005e70:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005e72:	f001 bab1 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8005e76:	2300      	movs	r3, #0
 8005e78:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005e7a:	f001 baad 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default :
      {
        frequency = 0U;
 8005e7e:	2300      	movs	r3, #0
 8005e80:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005e82:	f001 baa9 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8005e86:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e8a:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8005e8e:	430b      	orrs	r3, r1
 8005e90:	d158      	bne.n	8005f44 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8005e92:	4b55      	ldr	r3, [pc, #340]	@ (8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005e94:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005e98:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005e9c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8005e9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ea0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ea4:	d03b      	beq.n	8005f1e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8005ea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ea8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005eac:	d846      	bhi.n	8005f3c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8005eae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eb0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005eb4:	d02e      	beq.n	8005f14 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8005eb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eb8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ebc:	d83e      	bhi.n	8005f3c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8005ebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ec0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ec4:	d00b      	beq.n	8005ede <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8005ec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ec8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ecc:	d836      	bhi.n	8005f3c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8005ece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d00d      	beq.n	8005ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8005ed4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ed6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005eda:	d012      	beq.n	8005f02 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8005edc:	e02e      	b.n	8005f3c <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005ede:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f7ff fb18 	bl	8005518 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8005ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eea:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005eec:	f001 ba74 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005ef0:	f107 0318 	add.w	r3, r7, #24
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	f7ff fc69 	bl	80057cc <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8005efa:	69bb      	ldr	r3, [r7, #24]
 8005efc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005efe:	f001 ba6b 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005f02:	f107 030c 	add.w	r3, r7, #12
 8005f06:	4618      	mov	r0, r3
 8005f08:	f7ff fdba 	bl	8005a80 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005f10:	f001 ba62 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8005f14:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8005f18:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005f1a:	f001 ba5d 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005f1e:	4b32      	ldr	r3, [pc, #200]	@ (8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f2a:	d103      	bne.n	8005f34 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8005f2c:	4b30      	ldr	r3, [pc, #192]	@ (8005ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005f2e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8005f30:	f001 ba52 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8005f34:	2300      	movs	r3, #0
 8005f36:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005f38:	f001 ba4e 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default :

        frequency = 0U;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8005f40:	f001 ba4a 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* SAI2 */
#if defined(SAES)
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 8005f44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f48:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8005f4c:	430b      	orrs	r3, r1
 8005f4e:	d126      	bne.n	8005f9e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 8005f50:	4b25      	ldr	r3, [pc, #148]	@ (8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005f52:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005f56:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005f5a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8005f5c:	4b22      	ldr	r3, [pc, #136]	@ (8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f68:	d106      	bne.n	8005f78 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8005f6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d103      	bne.n	8005f78 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 8005f70:	4b1f      	ldr	r3, [pc, #124]	@ (8005ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8005f72:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f74:	f001 ba30 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8005f78:	4b1b      	ldr	r3, [pc, #108]	@ (8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f84:	d107      	bne.n	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 8005f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f8c:	d103      	bne.n	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 8005f8e:	4b19      	ldr	r3, [pc, #100]	@ (8005ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8005f90:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f92:	f001 ba21 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 8005f96:	2300      	movs	r3, #0
 8005f98:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f9a:	f001 ba1d 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* SAES */
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8005f9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005fa2:	f5a2 1180 	sub.w	r1, r2, #1048576	@ 0x100000
 8005fa6:	430b      	orrs	r3, r1
 8005fa8:	d16e      	bne.n	8006088 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8005faa:	4b0f      	ldr	r3, [pc, #60]	@ (8005fe8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8005fac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005fb0:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8005fb4:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8005fb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fb8:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005fbc:	d03d      	beq.n	800603a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8005fbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fc0:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8005fc4:	d85c      	bhi.n	8006080 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8005fc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fc8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005fcc:	d014      	beq.n	8005ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8005fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fd0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005fd4:	d854      	bhi.n	8006080 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8005fd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d01f      	beq.n	800601c <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 8005fdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fde:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005fe2:	d012      	beq.n	800600a <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8005fe4:	e04c      	b.n	8006080 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8005fe6:	bf00      	nop
 8005fe8:	46020c00 	.word	0x46020c00
 8005fec:	0007a120 	.word	0x0007a120
 8005ff0:	00f42400 	.word	0x00f42400
 8005ff4:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005ff8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f7ff fa8b 	bl	8005518 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8006002:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006004:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006006:	f001 b9e7 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800600a:	f107 0318 	add.w	r3, r7, #24
 800600e:	4618      	mov	r0, r3
 8006010:	f7ff fbdc 	bl	80057cc <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8006014:	69fb      	ldr	r3, [r7, #28]
 8006016:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006018:	f001 b9de 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800601c:	4ba7      	ldr	r3, [pc, #668]	@ (80062bc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006024:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006028:	d103      	bne.n	8006032 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 800602a:	4ba5      	ldr	r3, [pc, #660]	@ (80062c0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 800602c:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800602e:	f001 b9d3 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8006032:	2300      	movs	r3, #0
 8006034:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006036:	f001 b9cf 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800603a:	4ba0      	ldr	r3, [pc, #640]	@ (80062bc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f003 0320 	and.w	r3, r3, #32
 8006042:	2b20      	cmp	r3, #32
 8006044:	d118      	bne.n	8006078 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006046:	4b9d      	ldr	r3, [pc, #628]	@ (80062bc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006048:	689b      	ldr	r3, [r3, #8]
 800604a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800604e:	2b00      	cmp	r3, #0
 8006050:	d005      	beq.n	800605e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8006052:	4b9a      	ldr	r3, [pc, #616]	@ (80062bc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006054:	689b      	ldr	r3, [r3, #8]
 8006056:	0e1b      	lsrs	r3, r3, #24
 8006058:	f003 030f 	and.w	r3, r3, #15
 800605c:	e006      	b.n	800606c <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800605e:	4b97      	ldr	r3, [pc, #604]	@ (80062bc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006060:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006064:	041b      	lsls	r3, r3, #16
 8006066:	0e1b      	lsrs	r3, r3, #24
 8006068:	f003 030f 	and.w	r3, r3, #15
 800606c:	4a95      	ldr	r2, [pc, #596]	@ (80062c4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800606e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006072:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006074:	f001 b9b0 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8006078:	2300      	movs	r3, #0
 800607a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800607c:	f001 b9ac 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default :

        frequency = 0U;
 8006080:	2300      	movs	r3, #0
 8006082:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006084:	f001 b9a8 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006088:	e9d7 2300 	ldrd	r2, r3, [r7]
 800608c:	f5a2 1100 	sub.w	r1, r2, #2097152	@ 0x200000
 8006090:	430b      	orrs	r3, r1
 8006092:	d17f      	bne.n	8006194 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006094:	4b89      	ldr	r3, [pc, #548]	@ (80062bc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006096:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800609a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800609e:	633b      	str	r3, [r7, #48]	@ 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 80060a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d165      	bne.n	8006172 <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 80060a6:	4b85      	ldr	r3, [pc, #532]	@ (80062bc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80060a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80060ac:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80060b0:	633b      	str	r3, [r7, #48]	@ 0x30

      switch (srcclk)
 80060b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060b4:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80060b8:	d034      	beq.n	8006124 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 80060ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060bc:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80060c0:	d853      	bhi.n	800616a <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 80060c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060c4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80060c8:	d00b      	beq.n	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 80060ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060cc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80060d0:	d84b      	bhi.n	800616a <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 80060d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d016      	beq.n	8006106 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 80060d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060da:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80060de:	d009      	beq.n	80060f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 80060e0:	e043      	b.n	800616a <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80060e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80060e6:	4618      	mov	r0, r3
 80060e8:	f7ff fa16 	bl	8005518 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80060ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060ee:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 80060f0:	f001 b972 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80060f4:	f107 0318 	add.w	r3, r7, #24
 80060f8:	4618      	mov	r0, r3
 80060fa:	f7ff fb67 	bl	80057cc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80060fe:	69fb      	ldr	r3, [r7, #28]
 8006100:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006102:	f001 b969 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8006106:	4b6d      	ldr	r3, [pc, #436]	@ (80062bc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800610e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006112:	d103      	bne.n	800611c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 8006114:	4b6a      	ldr	r3, [pc, #424]	@ (80062c0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8006116:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8006118:	f001 b95e 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
            frequency = 0U;
 800611c:	2300      	movs	r3, #0
 800611e:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006120:	f001 b95a 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006124:	4b65      	ldr	r3, [pc, #404]	@ (80062bc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f003 0320 	and.w	r3, r3, #32
 800612c:	2b20      	cmp	r3, #32
 800612e:	d118      	bne.n	8006162 <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006130:	4b62      	ldr	r3, [pc, #392]	@ (80062bc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006132:	689b      	ldr	r3, [r3, #8]
 8006134:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006138:	2b00      	cmp	r3, #0
 800613a:	d005      	beq.n	8006148 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 800613c:	4b5f      	ldr	r3, [pc, #380]	@ (80062bc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800613e:	689b      	ldr	r3, [r3, #8]
 8006140:	0e1b      	lsrs	r3, r3, #24
 8006142:	f003 030f 	and.w	r3, r3, #15
 8006146:	e006      	b.n	8006156 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8006148:	4b5c      	ldr	r3, [pc, #368]	@ (80062bc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800614a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800614e:	041b      	lsls	r3, r3, #16
 8006150:	0e1b      	lsrs	r3, r3, #24
 8006152:	f003 030f 	and.w	r3, r3, #15
 8006156:	4a5b      	ldr	r2, [pc, #364]	@ (80062c4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8006158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800615c:	637b      	str	r3, [r7, #52]	@ 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800615e:	f001 b93b 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
            frequency = 0U;
 8006162:	2300      	movs	r3, #0
 8006164:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 8006166:	f001 b937 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
        default :
        {
          frequency = 0U;
 800616a:	2300      	movs	r3, #0
 800616c:	637b      	str	r3, [r7, #52]	@ 0x34
          break;
 800616e:	f001 b933 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8006172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006174:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006178:	d108      	bne.n	800618c <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800617a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800617e:	4618      	mov	r0, r3
 8006180:	f7ff f9ca 	bl	8005518 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8006184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006186:	637b      	str	r3, [r7, #52]	@ 0x34
 8006188:	f001 b926 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else
    {
      frequency = 0U;
 800618c:	2300      	movs	r3, #0
 800618e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006190:	f001 b922 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8006194:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006198:	1e51      	subs	r1, r2, #1
 800619a:	430b      	orrs	r3, r1
 800619c:	d136      	bne.n	800620c <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800619e:	4b47      	ldr	r3, [pc, #284]	@ (80062bc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80061a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80061a4:	f003 0303 	and.w	r3, r3, #3
 80061a8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 80061aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d104      	bne.n	80061ba <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 80061b0:	f7fe fa48 	bl	8004644 <HAL_RCC_GetPCLK2Freq>
 80061b4:	6378      	str	r0, [r7, #52]	@ 0x34
 80061b6:	f001 b90f 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 80061ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061bc:	2b01      	cmp	r3, #1
 80061be:	d104      	bne.n	80061ca <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80061c0:	f7fe f910 	bl	80043e4 <HAL_RCC_GetSysClockFreq>
 80061c4:	6378      	str	r0, [r7, #52]	@ 0x34
 80061c6:	f001 b907 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 80061ca:	4b3c      	ldr	r3, [pc, #240]	@ (80062bc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80061d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061d6:	d106      	bne.n	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 80061d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061da:	2b02      	cmp	r3, #2
 80061dc:	d103      	bne.n	80061e6 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 80061de:	4b3a      	ldr	r3, [pc, #232]	@ (80062c8 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80061e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80061e2:	f001 b8f9 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80061e6:	4b35      	ldr	r3, [pc, #212]	@ (80062bc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80061e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80061ec:	f003 0302 	and.w	r3, r3, #2
 80061f0:	2b02      	cmp	r3, #2
 80061f2:	d107      	bne.n	8006204 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 80061f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061f6:	2b03      	cmp	r3, #3
 80061f8:	d104      	bne.n	8006204 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 80061fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80061fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8006200:	f001 b8ea 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8006204:	2300      	movs	r3, #0
 8006206:	637b      	str	r3, [r7, #52]	@ 0x34
 8006208:	f001 b8e6 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 800620c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006210:	1e91      	subs	r1, r2, #2
 8006212:	430b      	orrs	r3, r1
 8006214:	d136      	bne.n	8006284 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8006216:	4b29      	ldr	r3, [pc, #164]	@ (80062bc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006218:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800621c:	f003 030c 	and.w	r3, r3, #12
 8006220:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8006222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006224:	2b00      	cmp	r3, #0
 8006226:	d104      	bne.n	8006232 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006228:	f7fe f9f8 	bl	800461c <HAL_RCC_GetPCLK1Freq>
 800622c:	6378      	str	r0, [r7, #52]	@ 0x34
 800622e:	f001 b8d3 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8006232:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006234:	2b04      	cmp	r3, #4
 8006236:	d104      	bne.n	8006242 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006238:	f7fe f8d4 	bl	80043e4 <HAL_RCC_GetSysClockFreq>
 800623c:	6378      	str	r0, [r7, #52]	@ 0x34
 800623e:	f001 b8cb 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8006242:	4b1e      	ldr	r3, [pc, #120]	@ (80062bc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800624a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800624e:	d106      	bne.n	800625e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8006250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006252:	2b08      	cmp	r3, #8
 8006254:	d103      	bne.n	800625e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 8006256:	4b1c      	ldr	r3, [pc, #112]	@ (80062c8 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8006258:	637b      	str	r3, [r7, #52]	@ 0x34
 800625a:	f001 b8bd 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800625e:	4b17      	ldr	r3, [pc, #92]	@ (80062bc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006260:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006264:	f003 0302 	and.w	r3, r3, #2
 8006268:	2b02      	cmp	r3, #2
 800626a:	d107      	bne.n	800627c <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 800626c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800626e:	2b0c      	cmp	r3, #12
 8006270:	d104      	bne.n	800627c <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 8006272:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006276:	637b      	str	r3, [r7, #52]	@ 0x34
 8006278:	f001 b8ae 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 800627c:	2300      	movs	r3, #0
 800627e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006280:	f001 b8aa 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8006284:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006288:	1f11      	subs	r1, r2, #4
 800628a:	430b      	orrs	r3, r1
 800628c:	d13f      	bne.n	800630e <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800628e:	4b0b      	ldr	r3, [pc, #44]	@ (80062bc <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8006290:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006294:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006298:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800629a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800629c:	2b00      	cmp	r3, #0
 800629e:	d104      	bne.n	80062aa <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80062a0:	f7fe f9bc 	bl	800461c <HAL_RCC_GetPCLK1Freq>
 80062a4:	6378      	str	r0, [r7, #52]	@ 0x34
 80062a6:	f001 b897 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 80062aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062ac:	2b10      	cmp	r3, #16
 80062ae:	d10d      	bne.n	80062cc <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80062b0:	f7fe f898 	bl	80043e4 <HAL_RCC_GetSysClockFreq>
 80062b4:	6378      	str	r0, [r7, #52]	@ 0x34
 80062b6:	f001 b88f 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 80062ba:	bf00      	nop
 80062bc:	46020c00 	.word	0x46020c00
 80062c0:	02dc6c00 	.word	0x02dc6c00
 80062c4:	0800bef8 	.word	0x0800bef8
 80062c8:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80062cc:	4ba8      	ldr	r3, [pc, #672]	@ (8006570 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80062d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062d8:	d106      	bne.n	80062e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 80062da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062dc:	2b20      	cmp	r3, #32
 80062de:	d103      	bne.n	80062e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 80062e0:	4ba4      	ldr	r3, [pc, #656]	@ (8006574 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80062e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80062e4:	f001 b878 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 80062e8:	4ba1      	ldr	r3, [pc, #644]	@ (8006570 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80062ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80062ee:	f003 0302 	and.w	r3, r3, #2
 80062f2:	2b02      	cmp	r3, #2
 80062f4:	d107      	bne.n	8006306 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 80062f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062f8:	2b30      	cmp	r3, #48	@ 0x30
 80062fa:	d104      	bne.n	8006306 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 80062fc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006300:	637b      	str	r3, [r7, #52]	@ 0x34
 8006302:	f001 b869 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8006306:	2300      	movs	r3, #0
 8006308:	637b      	str	r3, [r7, #52]	@ 0x34
 800630a:	f001 b865 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 800630e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006312:	f1a2 0108 	sub.w	r1, r2, #8
 8006316:	430b      	orrs	r3, r1
 8006318:	d136      	bne.n	8006388 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 800631a:	4b95      	ldr	r3, [pc, #596]	@ (8006570 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800631c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006320:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006324:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8006326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006328:	2b00      	cmp	r3, #0
 800632a:	d104      	bne.n	8006336 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800632c:	f7fe f976 	bl	800461c <HAL_RCC_GetPCLK1Freq>
 8006330:	6378      	str	r0, [r7, #52]	@ 0x34
 8006332:	f001 b851 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8006336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006338:	2b40      	cmp	r3, #64	@ 0x40
 800633a:	d104      	bne.n	8006346 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800633c:	f7fe f852 	bl	80043e4 <HAL_RCC_GetSysClockFreq>
 8006340:	6378      	str	r0, [r7, #52]	@ 0x34
 8006342:	f001 b849 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8006346:	4b8a      	ldr	r3, [pc, #552]	@ (8006570 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800634e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006352:	d106      	bne.n	8006362 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 8006354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006356:	2b80      	cmp	r3, #128	@ 0x80
 8006358:	d103      	bne.n	8006362 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 800635a:	4b86      	ldr	r3, [pc, #536]	@ (8006574 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800635c:	637b      	str	r3, [r7, #52]	@ 0x34
 800635e:	f001 b83b 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8006362:	4b83      	ldr	r3, [pc, #524]	@ (8006570 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006364:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006368:	f003 0302 	and.w	r3, r3, #2
 800636c:	2b02      	cmp	r3, #2
 800636e:	d107      	bne.n	8006380 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8006370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006372:	2bc0      	cmp	r3, #192	@ 0xc0
 8006374:	d104      	bne.n	8006380 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 8006376:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800637a:	637b      	str	r3, [r7, #52]	@ 0x34
 800637c:	f001 b82c 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8006380:	2300      	movs	r3, #0
 8006382:	637b      	str	r3, [r7, #52]	@ 0x34
 8006384:	f001 b828 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8006388:	e9d7 2300 	ldrd	r2, r3, [r7]
 800638c:	f1a2 0110 	sub.w	r1, r2, #16
 8006390:	430b      	orrs	r3, r1
 8006392:	d139      	bne.n	8006408 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8006394:	4b76      	ldr	r3, [pc, #472]	@ (8006570 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006396:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800639a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800639e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 80063a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d104      	bne.n	80063b0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80063a6:	f7fe f939 	bl	800461c <HAL_RCC_GetPCLK1Freq>
 80063aa:	6378      	str	r0, [r7, #52]	@ 0x34
 80063ac:	f001 b814 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 80063b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80063b6:	d104      	bne.n	80063c2 <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80063b8:	f7fe f814 	bl	80043e4 <HAL_RCC_GetSysClockFreq>
 80063bc:	6378      	str	r0, [r7, #52]	@ 0x34
 80063be:	f001 b80b 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 80063c2:	4b6b      	ldr	r3, [pc, #428]	@ (8006570 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80063ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063ce:	d107      	bne.n	80063e0 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 80063d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80063d6:	d103      	bne.n	80063e0 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 80063d8:	4b66      	ldr	r3, [pc, #408]	@ (8006574 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80063da:	637b      	str	r3, [r7, #52]	@ 0x34
 80063dc:	f000 bffc 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 80063e0:	4b63      	ldr	r3, [pc, #396]	@ (8006570 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80063e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80063e6:	f003 0302 	and.w	r3, r3, #2
 80063ea:	2b02      	cmp	r3, #2
 80063ec:	d108      	bne.n	8006400 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 80063ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063f0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80063f4:	d104      	bne.n	8006400 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 80063f6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80063fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80063fc:	f000 bfec 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8006400:	2300      	movs	r3, #0
 8006402:	637b      	str	r3, [r7, #52]	@ 0x34
 8006404:	f000 bfe8 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#if defined(USART6)
  else if (PeriphClk == RCC_PERIPHCLK_USART6)
 8006408:	e9d7 2300 	ldrd	r2, r3, [r7]
 800640c:	f102 4160 	add.w	r1, r2, #3758096384	@ 0xe0000000
 8006410:	430b      	orrs	r3, r1
 8006412:	d139      	bne.n	8006488 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
  {
    /* Get the current USART6 source */
    srcclk = __HAL_RCC_GET_USART6_SOURCE();
 8006414:	4b56      	ldr	r3, [pc, #344]	@ (8006570 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006416:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800641a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800641e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_USART6CLKSOURCE_PCLK1)
 8006420:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006422:	2b00      	cmp	r3, #0
 8006424:	d104      	bne.n	8006430 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006426:	f7fe f8f9 	bl	800461c <HAL_RCC_GetPCLK1Freq>
 800642a:	6378      	str	r0, [r7, #52]	@ 0x34
 800642c:	f000 bfd4 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USART6CLKSOURCE_SYSCLK)
 8006430:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006432:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006436:	d104      	bne.n	8006442 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006438:	f7fd ffd4 	bl	80043e4 <HAL_RCC_GetSysClockFreq>
 800643c:	6378      	str	r0, [r7, #52]	@ 0x34
 800643e:	f000 bfcb 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART6CLKSOURCE_HSI))
 8006442:	4b4b      	ldr	r3, [pc, #300]	@ (8006570 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800644a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800644e:	d107      	bne.n	8006460 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 8006450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006452:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006456:	d103      	bne.n	8006460 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
    {
      frequency = HSI_VALUE;
 8006458:	4b46      	ldr	r3, [pc, #280]	@ (8006574 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800645a:	637b      	str	r3, [r7, #52]	@ 0x34
 800645c:	f000 bfbc 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART6CLKSOURCE_LSE))
 8006460:	4b43      	ldr	r3, [pc, #268]	@ (8006570 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006462:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006466:	f003 0302 	and.w	r3, r3, #2
 800646a:	2b02      	cmp	r3, #2
 800646c:	d108      	bne.n	8006480 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
 800646e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006470:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006474:	d104      	bne.n	8006480 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
    {
      frequency = LSE_VALUE;
 8006476:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800647a:	637b      	str	r3, [r7, #52]	@ 0x34
 800647c:	f000 bfac 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8006480:	2300      	movs	r3, #0
 8006482:	637b      	str	r3, [r7, #52]	@ 0x34
 8006484:	f000 bfa8 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8006488:	e9d7 2300 	ldrd	r2, r3, [r7]
 800648c:	f1a2 0120 	sub.w	r1, r2, #32
 8006490:	430b      	orrs	r3, r1
 8006492:	d158      	bne.n	8006546 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8006494:	4b36      	ldr	r3, [pc, #216]	@ (8006570 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006496:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800649a:	f003 0307 	and.w	r3, r3, #7
 800649e:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 80064a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d104      	bne.n	80064b0 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 80064a6:	f7fe f8e1 	bl	800466c <HAL_RCC_GetPCLK3Freq>
 80064aa:	6378      	str	r0, [r7, #52]	@ 0x34
 80064ac:	f000 bf94 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 80064b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064b2:	2b01      	cmp	r3, #1
 80064b4:	d104      	bne.n	80064c0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80064b6:	f7fd ff95 	bl	80043e4 <HAL_RCC_GetSysClockFreq>
 80064ba:	6378      	str	r0, [r7, #52]	@ 0x34
 80064bc:	f000 bf8c 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 80064c0:	4b2b      	ldr	r3, [pc, #172]	@ (8006570 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80064c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80064cc:	d106      	bne.n	80064dc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
 80064ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064d0:	2b02      	cmp	r3, #2
 80064d2:	d103      	bne.n	80064dc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      frequency = HSI_VALUE;
 80064d4:	4b27      	ldr	r3, [pc, #156]	@ (8006574 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80064d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80064d8:	f000 bf7e 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 80064dc:	4b24      	ldr	r3, [pc, #144]	@ (8006570 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80064de:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80064e2:	f003 0302 	and.w	r3, r3, #2
 80064e6:	2b02      	cmp	r3, #2
 80064e8:	d107      	bne.n	80064fa <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
 80064ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064ec:	2b03      	cmp	r3, #3
 80064ee:	d104      	bne.n	80064fa <HAL_RCCEx_GetPeriphCLKFreq+0x7c6>
    {
      frequency = LSE_VALUE;
 80064f0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80064f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80064f6:	f000 bf6f 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 80064fa:	4b1d      	ldr	r3, [pc, #116]	@ (8006570 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f003 0320 	and.w	r3, r3, #32
 8006502:	2b20      	cmp	r3, #32
 8006504:	d11b      	bne.n	800653e <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 8006506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006508:	2b04      	cmp	r3, #4
 800650a:	d118      	bne.n	800653e <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800650c:	4b18      	ldr	r3, [pc, #96]	@ (8006570 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800650e:	689b      	ldr	r3, [r3, #8]
 8006510:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006514:	2b00      	cmp	r3, #0
 8006516:	d005      	beq.n	8006524 <HAL_RCCEx_GetPeriphCLKFreq+0x7f0>
 8006518:	4b15      	ldr	r3, [pc, #84]	@ (8006570 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800651a:	689b      	ldr	r3, [r3, #8]
 800651c:	0e1b      	lsrs	r3, r3, #24
 800651e:	f003 030f 	and.w	r3, r3, #15
 8006522:	e006      	b.n	8006532 <HAL_RCCEx_GetPeriphCLKFreq+0x7fe>
 8006524:	4b12      	ldr	r3, [pc, #72]	@ (8006570 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006526:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800652a:	041b      	lsls	r3, r3, #16
 800652c:	0e1b      	lsrs	r3, r3, #24
 800652e:	f003 030f 	and.w	r3, r3, #15
 8006532:	4a11      	ldr	r2, [pc, #68]	@ (8006578 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8006534:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006538:	637b      	str	r3, [r7, #52]	@ 0x34
 800653a:	f000 bf4d 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 800653e:	2300      	movs	r3, #0
 8006540:	637b      	str	r3, [r7, #52]	@ 0x34
 8006542:	f000 bf49 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8006546:	e9d7 2300 	ldrd	r2, r3, [r7]
 800654a:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800654e:	430b      	orrs	r3, r1
 8006550:	d172      	bne.n	8006638 <HAL_RCCEx_GetPeriphCLKFreq+0x904>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8006552:	4b07      	ldr	r3, [pc, #28]	@ (8006570 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006554:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006558:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800655c:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800655e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006560:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006564:	d10a      	bne.n	800657c <HAL_RCCEx_GetPeriphCLKFreq+0x848>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006566:	f7fd ff3d 	bl	80043e4 <HAL_RCC_GetSysClockFreq>
 800656a:	6378      	str	r0, [r7, #52]	@ 0x34
 800656c:	f000 bf34 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 8006570:	46020c00 	.word	0x46020c00
 8006574:	00f42400 	.word	0x00f42400
 8006578:	0800bef8 	.word	0x0800bef8
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800657c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800657e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006582:	d108      	bne.n	8006596 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006584:	f107 0318 	add.w	r3, r7, #24
 8006588:	4618      	mov	r0, r3
 800658a:	f7ff f91f 	bl	80057cc <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 800658e:	6a3b      	ldr	r3, [r7, #32]
 8006590:	637b      	str	r3, [r7, #52]	@ 0x34
 8006592:	f000 bf21 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8006596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006598:	2b00      	cmp	r3, #0
 800659a:	d104      	bne.n	80065a6 <HAL_RCCEx_GetPeriphCLKFreq+0x872>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 800659c:	f7fe f824 	bl	80045e8 <HAL_RCC_GetHCLKFreq>
 80065a0:	6378      	str	r0, [r7, #52]	@ 0x34
 80065a2:	f000 bf19 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 80065a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065a8:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 80065ac:	d122      	bne.n	80065f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80065ae:	4bb0      	ldr	r3, [pc, #704]	@ (8006870 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f003 0320 	and.w	r3, r3, #32
 80065b6:	2b20      	cmp	r3, #32
 80065b8:	d118      	bne.n	80065ec <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80065ba:	4bad      	ldr	r3, [pc, #692]	@ (8006870 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80065bc:	689b      	ldr	r3, [r3, #8]
 80065be:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d005      	beq.n	80065d2 <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
 80065c6:	4baa      	ldr	r3, [pc, #680]	@ (8006870 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80065c8:	689b      	ldr	r3, [r3, #8]
 80065ca:	0e1b      	lsrs	r3, r3, #24
 80065cc:	f003 030f 	and.w	r3, r3, #15
 80065d0:	e006      	b.n	80065e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
 80065d2:	4ba7      	ldr	r3, [pc, #668]	@ (8006870 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80065d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80065d8:	041b      	lsls	r3, r3, #16
 80065da:	0e1b      	lsrs	r3, r3, #24
 80065dc:	f003 030f 	and.w	r3, r3, #15
 80065e0:	4aa4      	ldr	r2, [pc, #656]	@ (8006874 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 80065e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80065e8:	f000 bef6 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = 0U;
 80065ec:	2300      	movs	r3, #0
 80065ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80065f0:	f000 bef2 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 80065f4:	4b9e      	ldr	r3, [pc, #632]	@ (8006870 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006600:	d107      	bne.n	8006612 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8006602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006604:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006608:	d103      	bne.n	8006612 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
    {
      frequency = HSE_VALUE;
 800660a:	4b9b      	ldr	r3, [pc, #620]	@ (8006878 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800660c:	637b      	str	r3, [r7, #52]	@ 0x34
 800660e:	f000 bee3 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8006612:	4b97      	ldr	r3, [pc, #604]	@ (8006870 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800661a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800661e:	d107      	bne.n	8006630 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
 8006620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006622:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006626:	d103      	bne.n	8006630 <HAL_RCCEx_GetPeriphCLKFreq+0x8fc>
    {
      frequency = HSI_VALUE;
 8006628:	4b93      	ldr	r3, [pc, #588]	@ (8006878 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 800662a:	637b      	str	r3, [r7, #52]	@ 0x34
 800662c:	f000 bed4 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8006630:	2300      	movs	r3, #0
 8006632:	637b      	str	r3, [r7, #52]	@ 0x34
 8006634:	f000 bed0 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8006638:	e9d7 2300 	ldrd	r2, r3, [r7]
 800663c:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8006640:	430b      	orrs	r3, r1
 8006642:	d158      	bne.n	80066f6 <HAL_RCCEx_GetPeriphCLKFreq+0x9c2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8006644:	4b8a      	ldr	r3, [pc, #552]	@ (8006870 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006646:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800664a:	f003 0307 	and.w	r3, r3, #7
 800664e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006652:	2b04      	cmp	r3, #4
 8006654:	d84b      	bhi.n	80066ee <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
 8006656:	a201      	add	r2, pc, #4	@ (adr r2, 800665c <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
 8006658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800665c:	08006695 	.word	0x08006695
 8006660:	08006671 	.word	0x08006671
 8006664:	08006683 	.word	0x08006683
 8006668:	0800669f 	.word	0x0800669f
 800666c:	080066a9 	.word	0x080066a9
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006670:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006674:	4618      	mov	r0, r3
 8006676:	f7fe ff4f 	bl	8005518 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800667a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800667c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800667e:	f000 beab 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006682:	f107 030c 	add.w	r3, r7, #12
 8006686:	4618      	mov	r0, r3
 8006688:	f7ff f9fa 	bl	8005a80 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006690:	f000 bea2 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8006694:	f7fd ffa8 	bl	80045e8 <HAL_RCC_GetHCLKFreq>
 8006698:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800669a:	f000 be9d 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800669e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80066a2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80066a4:	f000 be98 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80066a8:	4b71      	ldr	r3, [pc, #452]	@ (8006870 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f003 0320 	and.w	r3, r3, #32
 80066b0:	2b20      	cmp	r3, #32
 80066b2:	d118      	bne.n	80066e6 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80066b4:	4b6e      	ldr	r3, [pc, #440]	@ (8006870 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80066b6:	689b      	ldr	r3, [r3, #8]
 80066b8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d005      	beq.n	80066cc <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 80066c0:	4b6b      	ldr	r3, [pc, #428]	@ (8006870 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80066c2:	689b      	ldr	r3, [r3, #8]
 80066c4:	0e1b      	lsrs	r3, r3, #24
 80066c6:	f003 030f 	and.w	r3, r3, #15
 80066ca:	e006      	b.n	80066da <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 80066cc:	4b68      	ldr	r3, [pc, #416]	@ (8006870 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80066ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80066d2:	041b      	lsls	r3, r3, #16
 80066d4:	0e1b      	lsrs	r3, r3, #24
 80066d6:	f003 030f 	and.w	r3, r3, #15
 80066da:	4a66      	ldr	r2, [pc, #408]	@ (8006874 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 80066dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066e0:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80066e2:	f000 be79 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 80066e6:	2300      	movs	r3, #0
 80066e8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80066ea:	f000 be75 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 80066ee:	2300      	movs	r3, #0
 80066f0:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80066f2:	f000 be71 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 80066f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066fa:	f5a2 3100 	sub.w	r1, r2, #131072	@ 0x20000
 80066fe:	430b      	orrs	r3, r1
 8006700:	d167      	bne.n	80067d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa9e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8006702:	4b5b      	ldr	r3, [pc, #364]	@ (8006870 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006704:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006708:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800670c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 800670e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006710:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006714:	d036      	beq.n	8006784 <HAL_RCCEx_GetPeriphCLKFreq+0xa50>
 8006716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006718:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800671c:	d855      	bhi.n	80067ca <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800671e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006720:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006724:	d029      	beq.n	800677a <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
 8006726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006728:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800672c:	d84d      	bhi.n	80067ca <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800672e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006730:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006734:	d013      	beq.n	800675e <HAL_RCCEx_GetPeriphCLKFreq+0xa2a>
 8006736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006738:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800673c:	d845      	bhi.n	80067ca <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
 800673e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006740:	2b00      	cmp	r3, #0
 8006742:	d015      	beq.n	8006770 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>
 8006744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006746:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800674a:	d13e      	bne.n	80067ca <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800674c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006750:	4618      	mov	r0, r3
 8006752:	f7fe fee1 	bl	8005518 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006758:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800675a:	f000 be3d 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800675e:	f107 030c 	add.w	r3, r7, #12
 8006762:	4618      	mov	r0, r3
 8006764:	f7ff f98c 	bl	8005a80 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800676c:	f000 be34 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8006770:	f7fd ff3a 	bl	80045e8 <HAL_RCC_GetHCLKFreq>
 8006774:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006776:	f000 be2f 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800677a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800677e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006780:	f000 be2a 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006784:	4b3a      	ldr	r3, [pc, #232]	@ (8006870 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f003 0320 	and.w	r3, r3, #32
 800678c:	2b20      	cmp	r3, #32
 800678e:	d118      	bne.n	80067c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006790:	4b37      	ldr	r3, [pc, #220]	@ (8006870 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006792:	689b      	ldr	r3, [r3, #8]
 8006794:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006798:	2b00      	cmp	r3, #0
 800679a:	d005      	beq.n	80067a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 800679c:	4b34      	ldr	r3, [pc, #208]	@ (8006870 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800679e:	689b      	ldr	r3, [r3, #8]
 80067a0:	0e1b      	lsrs	r3, r3, #24
 80067a2:	f003 030f 	and.w	r3, r3, #15
 80067a6:	e006      	b.n	80067b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80067a8:	4b31      	ldr	r3, [pc, #196]	@ (8006870 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80067aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80067ae:	041b      	lsls	r3, r3, #16
 80067b0:	0e1b      	lsrs	r3, r3, #24
 80067b2:	f003 030f 	and.w	r3, r3, #15
 80067b6:	4a2f      	ldr	r2, [pc, #188]	@ (8006874 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 80067b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067bc:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80067be:	f000 be0b 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 80067c2:	2300      	movs	r3, #0
 80067c4:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80067c6:	f000 be07 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 80067ca:	2300      	movs	r3, #0
 80067cc:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80067ce:	f000 be03 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 80067d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80067d6:	f1a2 0140 	sub.w	r1, r2, #64	@ 0x40
 80067da:	430b      	orrs	r3, r1
 80067dc:	d152      	bne.n	8006884 <HAL_RCCEx_GetPeriphCLKFreq+0xb50>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80067de:	4b24      	ldr	r3, [pc, #144]	@ (8006870 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 80067e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80067e4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80067e8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80067ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d104      	bne.n	80067fa <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80067f0:	f7fd ff14 	bl	800461c <HAL_RCC_GetPCLK1Freq>
 80067f4:	6378      	str	r0, [r7, #52]	@ 0x34
 80067f6:	f000 bdef 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 80067fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006800:	d104      	bne.n	800680c <HAL_RCCEx_GetPeriphCLKFreq+0xad8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006802:	f7fd fdef 	bl	80043e4 <HAL_RCC_GetSysClockFreq>
 8006806:	6378      	str	r0, [r7, #52]	@ 0x34
 8006808:	f000 bde6 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800680c:	4b18      	ldr	r3, [pc, #96]	@ (8006870 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006814:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006818:	d107      	bne.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
 800681a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800681c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006820:	d103      	bne.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0xaf6>
    {
      frequency = HSI_VALUE;
 8006822:	4b15      	ldr	r3, [pc, #84]	@ (8006878 <HAL_RCCEx_GetPeriphCLKFreq+0xb44>)
 8006824:	637b      	str	r3, [r7, #52]	@ 0x34
 8006826:	f000 bdd7 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800682a:	4b11      	ldr	r3, [pc, #68]	@ (8006870 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f003 0320 	and.w	r3, r3, #32
 8006832:	2b20      	cmp	r3, #32
 8006834:	d122      	bne.n	800687c <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
 8006836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006838:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800683c:	d11e      	bne.n	800687c <HAL_RCCEx_GetPeriphCLKFreq+0xb48>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800683e:	4b0c      	ldr	r3, [pc, #48]	@ (8006870 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006840:	689b      	ldr	r3, [r3, #8]
 8006842:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006846:	2b00      	cmp	r3, #0
 8006848:	d005      	beq.n	8006856 <HAL_RCCEx_GetPeriphCLKFreq+0xb22>
 800684a:	4b09      	ldr	r3, [pc, #36]	@ (8006870 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 800684c:	689b      	ldr	r3, [r3, #8]
 800684e:	0e1b      	lsrs	r3, r3, #24
 8006850:	f003 030f 	and.w	r3, r3, #15
 8006854:	e006      	b.n	8006864 <HAL_RCCEx_GetPeriphCLKFreq+0xb30>
 8006856:	4b06      	ldr	r3, [pc, #24]	@ (8006870 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>)
 8006858:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800685c:	041b      	lsls	r3, r3, #16
 800685e:	0e1b      	lsrs	r3, r3, #24
 8006860:	f003 030f 	and.w	r3, r3, #15
 8006864:	4a03      	ldr	r2, [pc, #12]	@ (8006874 <HAL_RCCEx_GetPeriphCLKFreq+0xb40>)
 8006866:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800686a:	637b      	str	r3, [r7, #52]	@ 0x34
 800686c:	f000 bdb4 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 8006870:	46020c00 	.word	0x46020c00
 8006874:	0800bef8 	.word	0x0800bef8
 8006878:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 800687c:	2300      	movs	r3, #0
 800687e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006880:	f000 bdaa 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8006884:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006888:	f1a2 0180 	sub.w	r1, r2, #128	@ 0x80
 800688c:	430b      	orrs	r3, r1
 800688e:	d14c      	bne.n	800692a <HAL_RCCEx_GetPeriphCLKFreq+0xbf6>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8006890:	4ba8      	ldr	r3, [pc, #672]	@ (8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8006892:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006896:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800689a:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800689c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d104      	bne.n	80068ac <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80068a2:	f7fd febb 	bl	800461c <HAL_RCC_GetPCLK1Freq>
 80068a6:	6378      	str	r0, [r7, #52]	@ 0x34
 80068a8:	f000 bd96 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 80068ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80068b2:	d104      	bne.n	80068be <HAL_RCCEx_GetPeriphCLKFreq+0xb8a>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80068b4:	f7fd fd96 	bl	80043e4 <HAL_RCC_GetSysClockFreq>
 80068b8:	6378      	str	r0, [r7, #52]	@ 0x34
 80068ba:	f000 bd8d 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 80068be:	4b9d      	ldr	r3, [pc, #628]	@ (8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80068c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80068ca:	d107      	bne.n	80068dc <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
 80068cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80068d2:	d103      	bne.n	80068dc <HAL_RCCEx_GetPeriphCLKFreq+0xba8>
    {
      frequency = HSI_VALUE;
 80068d4:	4b98      	ldr	r3, [pc, #608]	@ (8006b38 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 80068d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80068d8:	f000 bd7e 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 80068dc:	4b95      	ldr	r3, [pc, #596]	@ (8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f003 0320 	and.w	r3, r3, #32
 80068e4:	2b20      	cmp	r3, #32
 80068e6:	d11c      	bne.n	8006922 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
 80068e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068ea:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80068ee:	d118      	bne.n	8006922 <HAL_RCCEx_GetPeriphCLKFreq+0xbee>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80068f0:	4b90      	ldr	r3, [pc, #576]	@ (8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80068f2:	689b      	ldr	r3, [r3, #8]
 80068f4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d005      	beq.n	8006908 <HAL_RCCEx_GetPeriphCLKFreq+0xbd4>
 80068fc:	4b8d      	ldr	r3, [pc, #564]	@ (8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80068fe:	689b      	ldr	r3, [r3, #8]
 8006900:	0e1b      	lsrs	r3, r3, #24
 8006902:	f003 030f 	and.w	r3, r3, #15
 8006906:	e006      	b.n	8006916 <HAL_RCCEx_GetPeriphCLKFreq+0xbe2>
 8006908:	4b8a      	ldr	r3, [pc, #552]	@ (8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800690a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800690e:	041b      	lsls	r3, r3, #16
 8006910:	0e1b      	lsrs	r3, r3, #24
 8006912:	f003 030f 	and.w	r3, r3, #15
 8006916:	4a89      	ldr	r2, [pc, #548]	@ (8006b3c <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 8006918:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800691c:	637b      	str	r3, [r7, #52]	@ 0x34
 800691e:	f000 bd5b 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8006922:	2300      	movs	r3, #0
 8006924:	637b      	str	r3, [r7, #52]	@ 0x34
 8006926:	f000 bd57 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 800692a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800692e:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8006932:	430b      	orrs	r3, r1
 8006934:	d158      	bne.n	80069e8 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8006936:	4b7f      	ldr	r3, [pc, #508]	@ (8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8006938:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800693c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006940:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8006942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006944:	2bc0      	cmp	r3, #192	@ 0xc0
 8006946:	d028      	beq.n	800699a <HAL_RCCEx_GetPeriphCLKFreq+0xc66>
 8006948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800694a:	2bc0      	cmp	r3, #192	@ 0xc0
 800694c:	d848      	bhi.n	80069e0 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800694e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006950:	2b80      	cmp	r3, #128	@ 0x80
 8006952:	d00e      	beq.n	8006972 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8006954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006956:	2b80      	cmp	r3, #128	@ 0x80
 8006958:	d842      	bhi.n	80069e0 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800695a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800695c:	2b00      	cmp	r3, #0
 800695e:	d003      	beq.n	8006968 <HAL_RCCEx_GetPeriphCLKFreq+0xc34>
 8006960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006962:	2b40      	cmp	r3, #64	@ 0x40
 8006964:	d014      	beq.n	8006990 <HAL_RCCEx_GetPeriphCLKFreq+0xc5c>
 8006966:	e03b      	b.n	80069e0 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8006968:	f7fd fe80 	bl	800466c <HAL_RCC_GetPCLK3Freq>
 800696c:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 800696e:	f000 bd33 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006972:	4b70      	ldr	r3, [pc, #448]	@ (8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800697a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800697e:	d103      	bne.n	8006988 <HAL_RCCEx_GetPeriphCLKFreq+0xc54>
        {
          frequency = HSI_VALUE;
 8006980:	4b6d      	ldr	r3, [pc, #436]	@ (8006b38 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8006982:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006984:	f000 bd28 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8006988:	2300      	movs	r3, #0
 800698a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800698c:	f000 bd24 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8006990:	f7fd fd28 	bl	80043e4 <HAL_RCC_GetSysClockFreq>
 8006994:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006996:	f000 bd1f 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800699a:	4b66      	ldr	r3, [pc, #408]	@ (8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f003 0320 	and.w	r3, r3, #32
 80069a2:	2b20      	cmp	r3, #32
 80069a4:	d118      	bne.n	80069d8 <HAL_RCCEx_GetPeriphCLKFreq+0xca4>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80069a6:	4b63      	ldr	r3, [pc, #396]	@ (8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80069a8:	689b      	ldr	r3, [r3, #8]
 80069aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d005      	beq.n	80069be <HAL_RCCEx_GetPeriphCLKFreq+0xc8a>
 80069b2:	4b60      	ldr	r3, [pc, #384]	@ (8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80069b4:	689b      	ldr	r3, [r3, #8]
 80069b6:	0e1b      	lsrs	r3, r3, #24
 80069b8:	f003 030f 	and.w	r3, r3, #15
 80069bc:	e006      	b.n	80069cc <HAL_RCCEx_GetPeriphCLKFreq+0xc98>
 80069be:	4b5d      	ldr	r3, [pc, #372]	@ (8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80069c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80069c4:	041b      	lsls	r3, r3, #16
 80069c6:	0e1b      	lsrs	r3, r3, #24
 80069c8:	f003 030f 	and.w	r3, r3, #15
 80069cc:	4a5b      	ldr	r2, [pc, #364]	@ (8006b3c <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 80069ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069d2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80069d4:	f000 bd00 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 80069d8:	2300      	movs	r3, #0
 80069da:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80069dc:	f000 bcfc 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      default:
      {
        frequency = 0U;
 80069e0:	2300      	movs	r3, #0
 80069e2:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80069e4:	f000 bcf8 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 80069e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069ec:	f5a2 0180 	sub.w	r1, r2, #4194304	@ 0x400000
 80069f0:	430b      	orrs	r3, r1
 80069f2:	d14c      	bne.n	8006a8e <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80069f4:	4b4f      	ldr	r3, [pc, #316]	@ (8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 80069f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80069fa:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80069fe:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8006a00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d104      	bne.n	8006a10 <HAL_RCCEx_GetPeriphCLKFreq+0xcdc>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006a06:	f7fd fe09 	bl	800461c <HAL_RCC_GetPCLK1Freq>
 8006a0a:	6378      	str	r0, [r7, #52]	@ 0x34
 8006a0c:	f000 bce4 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8006a10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a12:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006a16:	d104      	bne.n	8006a22 <HAL_RCCEx_GetPeriphCLKFreq+0xcee>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006a18:	f7fd fce4 	bl	80043e4 <HAL_RCC_GetSysClockFreq>
 8006a1c:	6378      	str	r0, [r7, #52]	@ 0x34
 8006a1e:	f000 bcdb 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8006a22:	4b44      	ldr	r3, [pc, #272]	@ (8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a2e:	d107      	bne.n	8006a40 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
 8006a30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a32:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a36:	d103      	bne.n	8006a40 <HAL_RCCEx_GetPeriphCLKFreq+0xd0c>
    {
      frequency = HSI_VALUE;
 8006a38:	4b3f      	ldr	r3, [pc, #252]	@ (8006b38 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8006a3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a3c:	f000 bccc 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8006a40:	4b3c      	ldr	r3, [pc, #240]	@ (8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f003 0320 	and.w	r3, r3, #32
 8006a48:	2b20      	cmp	r3, #32
 8006a4a:	d11c      	bne.n	8006a86 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
 8006a4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a4e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006a52:	d118      	bne.n	8006a86 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006a54:	4b37      	ldr	r3, [pc, #220]	@ (8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8006a56:	689b      	ldr	r3, [r3, #8]
 8006a58:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d005      	beq.n	8006a6c <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 8006a60:	4b34      	ldr	r3, [pc, #208]	@ (8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8006a62:	689b      	ldr	r3, [r3, #8]
 8006a64:	0e1b      	lsrs	r3, r3, #24
 8006a66:	f003 030f 	and.w	r3, r3, #15
 8006a6a:	e006      	b.n	8006a7a <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 8006a6c:	4b31      	ldr	r3, [pc, #196]	@ (8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8006a6e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006a72:	041b      	lsls	r3, r3, #16
 8006a74:	0e1b      	lsrs	r3, r3, #24
 8006a76:	f003 030f 	and.w	r3, r3, #15
 8006a7a:	4a30      	ldr	r2, [pc, #192]	@ (8006b3c <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 8006a7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a80:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a82:	f000 bca9 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8006a86:	2300      	movs	r3, #0
 8006a88:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a8a:	f000 bca5 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#if defined (I2C5)
  else if (PeriphClk == RCC_PERIPHCLK_I2C5)
 8006a8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a92:	f102 4140 	add.w	r1, r2, #3221225472	@ 0xc0000000
 8006a96:	430b      	orrs	r3, r1
 8006a98:	d152      	bne.n	8006b40 <HAL_RCCEx_GetPeriphCLKFreq+0xe0c>
  {
    /* Get the current I2C5 source */
    srcclk = __HAL_RCC_GET_I2C5_SOURCE();
 8006a9a:	4b26      	ldr	r3, [pc, #152]	@ (8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8006a9c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006aa0:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8006aa4:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C5CLKSOURCE_PCLK1)
 8006aa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d104      	bne.n	8006ab6 <HAL_RCCEx_GetPeriphCLKFreq+0xd82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006aac:	f7fd fdb6 	bl	800461c <HAL_RCC_GetPCLK1Freq>
 8006ab0:	6378      	str	r0, [r7, #52]	@ 0x34
 8006ab2:	f000 bc91 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C5CLKSOURCE_SYSCLK)
 8006ab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ab8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006abc:	d104      	bne.n	8006ac8 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006abe:	f7fd fc91 	bl	80043e4 <HAL_RCC_GetSysClockFreq>
 8006ac2:	6378      	str	r0, [r7, #52]	@ 0x34
 8006ac4:	f000 bc88 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C5CLKSOURCE_HSI))
 8006ac8:	4b1a      	ldr	r3, [pc, #104]	@ (8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ad0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ad4:	d107      	bne.n	8006ae6 <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
 8006ad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ad8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006adc:	d103      	bne.n	8006ae6 <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
    {
      frequency = HSI_VALUE;
 8006ade:	4b16      	ldr	r3, [pc, #88]	@ (8006b38 <HAL_RCCEx_GetPeriphCLKFreq+0xe04>)
 8006ae0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ae2:	f000 bc79 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C5CLKSOURCE_MSIK))
 8006ae6:	4b13      	ldr	r3, [pc, #76]	@ (8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f003 0320 	and.w	r3, r3, #32
 8006aee:	2b20      	cmp	r3, #32
 8006af0:	d11c      	bne.n	8006b2c <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
 8006af2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006af4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006af8:	d118      	bne.n	8006b2c <HAL_RCCEx_GetPeriphCLKFreq+0xdf8>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006afa:	4b0e      	ldr	r3, [pc, #56]	@ (8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8006afc:	689b      	ldr	r3, [r3, #8]
 8006afe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d005      	beq.n	8006b12 <HAL_RCCEx_GetPeriphCLKFreq+0xdde>
 8006b06:	4b0b      	ldr	r3, [pc, #44]	@ (8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8006b08:	689b      	ldr	r3, [r3, #8]
 8006b0a:	0e1b      	lsrs	r3, r3, #24
 8006b0c:	f003 030f 	and.w	r3, r3, #15
 8006b10:	e006      	b.n	8006b20 <HAL_RCCEx_GetPeriphCLKFreq+0xdec>
 8006b12:	4b08      	ldr	r3, [pc, #32]	@ (8006b34 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>)
 8006b14:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006b18:	041b      	lsls	r3, r3, #16
 8006b1a:	0e1b      	lsrs	r3, r3, #24
 8006b1c:	f003 030f 	and.w	r3, r3, #15
 8006b20:	4a06      	ldr	r2, [pc, #24]	@ (8006b3c <HAL_RCCEx_GetPeriphCLKFreq+0xe08>)
 8006b22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b26:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b28:	f000 bc56 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for I2C5 */
    else
    {
      frequency = 0U;
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b30:	f000 bc52 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 8006b34:	46020c00 	.word	0x46020c00
 8006b38:	00f42400 	.word	0x00f42400
 8006b3c:	0800bef8 	.word	0x0800bef8
    }
  }
#endif /* I2C5 */
#if defined (I2C6)
  else if (PeriphClk == RCC_PERIPHCLK_I2C6)
 8006b40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b44:	f102 4100 	add.w	r1, r2, #2147483648	@ 0x80000000
 8006b48:	430b      	orrs	r3, r1
 8006b4a:	d14a      	bne.n	8006be2 <HAL_RCCEx_GetPeriphCLKFreq+0xeae>
  {
    /* Get the current I2C6 source */
    srcclk = __HAL_RCC_GET_I2C6_SOURCE();
 8006b4c:	4ba5      	ldr	r3, [pc, #660]	@ (8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8006b4e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8006b52:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8006b56:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_I2C6CLKSOURCE_PCLK1)
 8006b58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d104      	bne.n	8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006b5e:	f7fd fd5d 	bl	800461c <HAL_RCC_GetPCLK1Freq>
 8006b62:	6378      	str	r0, [r7, #52]	@ 0x34
 8006b64:	f000 bc38 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_I2C6CLKSOURCE_SYSCLK)
 8006b68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b6a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006b6e:	d104      	bne.n	8006b7a <HAL_RCCEx_GetPeriphCLKFreq+0xe46>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006b70:	f7fd fc38 	bl	80043e4 <HAL_RCC_GetSysClockFreq>
 8006b74:	6378      	str	r0, [r7, #52]	@ 0x34
 8006b76:	f000 bc2f 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C6CLKSOURCE_HSI))
 8006b7a:	4b9a      	ldr	r3, [pc, #616]	@ (8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b86:	d107      	bne.n	8006b98 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
 8006b88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b8a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006b8e:	d103      	bne.n	8006b98 <HAL_RCCEx_GetPeriphCLKFreq+0xe64>
    {
      frequency = HSI_VALUE;
 8006b90:	4b95      	ldr	r3, [pc, #596]	@ (8006de8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8006b92:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b94:	f000 bc20 	b.w	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C6CLKSOURCE_MSIK))
 8006b98:	4b92      	ldr	r3, [pc, #584]	@ (8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f003 0320 	and.w	r3, r3, #32
 8006ba0:	2b20      	cmp	r3, #32
 8006ba2:	d11b      	bne.n	8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0xea8>
 8006ba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ba6:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006baa:	d117      	bne.n	8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0xea8>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006bac:	4b8d      	ldr	r3, [pc, #564]	@ (8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8006bae:	689b      	ldr	r3, [r3, #8]
 8006bb0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d005      	beq.n	8006bc4 <HAL_RCCEx_GetPeriphCLKFreq+0xe90>
 8006bb8:	4b8a      	ldr	r3, [pc, #552]	@ (8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8006bba:	689b      	ldr	r3, [r3, #8]
 8006bbc:	0e1b      	lsrs	r3, r3, #24
 8006bbe:	f003 030f 	and.w	r3, r3, #15
 8006bc2:	e006      	b.n	8006bd2 <HAL_RCCEx_GetPeriphCLKFreq+0xe9e>
 8006bc4:	4b87      	ldr	r3, [pc, #540]	@ (8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8006bc6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006bca:	041b      	lsls	r3, r3, #16
 8006bcc:	0e1b      	lsrs	r3, r3, #24
 8006bce:	f003 030f 	and.w	r3, r3, #15
 8006bd2:	4a86      	ldr	r2, [pc, #536]	@ (8006dec <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 8006bd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006bd8:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bda:	e3fd      	b.n	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for I2C6 */
    else
    {
      frequency = 0U;
 8006bdc:	2300      	movs	r3, #0
 8006bde:	637b      	str	r3, [r7, #52]	@ 0x34
 8006be0:	e3fa      	b.n	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8006be2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006be6:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8006bea:	430b      	orrs	r3, r1
 8006bec:	d164      	bne.n	8006cb8 <HAL_RCCEx_GetPeriphCLKFreq+0xf84>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8006bee:	4b7d      	ldr	r3, [pc, #500]	@ (8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8006bf0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006bf4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006bf8:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8006bfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d120      	bne.n	8006c42 <HAL_RCCEx_GetPeriphCLKFreq+0xf0e>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006c00:	4b78      	ldr	r3, [pc, #480]	@ (8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f003 0320 	and.w	r3, r3, #32
 8006c08:	2b20      	cmp	r3, #32
 8006c0a:	d117      	bne.n	8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0xf08>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006c0c:	4b75      	ldr	r3, [pc, #468]	@ (8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8006c0e:	689b      	ldr	r3, [r3, #8]
 8006c10:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d005      	beq.n	8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0xef0>
 8006c18:	4b72      	ldr	r3, [pc, #456]	@ (8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8006c1a:	689b      	ldr	r3, [r3, #8]
 8006c1c:	0e1b      	lsrs	r3, r3, #24
 8006c1e:	f003 030f 	and.w	r3, r3, #15
 8006c22:	e006      	b.n	8006c32 <HAL_RCCEx_GetPeriphCLKFreq+0xefe>
 8006c24:	4b6f      	ldr	r3, [pc, #444]	@ (8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8006c26:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006c2a:	041b      	lsls	r3, r3, #16
 8006c2c:	0e1b      	lsrs	r3, r3, #24
 8006c2e:	f003 030f 	and.w	r3, r3, #15
 8006c32:	4a6e      	ldr	r2, [pc, #440]	@ (8006dec <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 8006c34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c38:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c3a:	e3cd      	b.n	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = 0U;
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c40:	e3ca      	b.n	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8006c42:	4b68      	ldr	r3, [pc, #416]	@ (8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8006c44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006c48:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006c4c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006c50:	d112      	bne.n	8006c78 <HAL_RCCEx_GetPeriphCLKFreq+0xf44>
 8006c52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c58:	d10e      	bne.n	8006c78 <HAL_RCCEx_GetPeriphCLKFreq+0xf44>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006c5a:	4b62      	ldr	r3, [pc, #392]	@ (8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8006c5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006c60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c64:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006c68:	d102      	bne.n	8006c70 <HAL_RCCEx_GetPeriphCLKFreq+0xf3c>
      {
        frequency = LSI_VALUE / 128U;
 8006c6a:	23fa      	movs	r3, #250	@ 0xfa
 8006c6c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006c6e:	e3b3      	b.n	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = LSI_VALUE;
 8006c70:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006c74:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006c76:	e3af      	b.n	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8006c78:	4b5a      	ldr	r3, [pc, #360]	@ (8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c84:	d106      	bne.n	8006c94 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
 8006c86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c8c:	d102      	bne.n	8006c94 <HAL_RCCEx_GetPeriphCLKFreq+0xf60>
    {
      frequency = HSI_VALUE;
 8006c8e:	4b56      	ldr	r3, [pc, #344]	@ (8006de8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8006c90:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c92:	e3a1      	b.n	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8006c94:	4b53      	ldr	r3, [pc, #332]	@ (8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8006c96:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006c9a:	f003 0302 	and.w	r3, r3, #2
 8006c9e:	2b02      	cmp	r3, #2
 8006ca0:	d107      	bne.n	8006cb2 <HAL_RCCEx_GetPeriphCLKFreq+0xf7e>
 8006ca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ca4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006ca8:	d103      	bne.n	8006cb2 <HAL_RCCEx_GetPeriphCLKFreq+0xf7e>
    {
      frequency = LSE_VALUE;
 8006caa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006cae:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cb0:	e392      	b.n	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cb6:	e38f      	b.n	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8006cb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006cbc:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8006cc0:	430b      	orrs	r3, r1
 8006cc2:	d164      	bne.n	8006d8e <HAL_RCCEx_GetPeriphCLKFreq+0x105a>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8006cc4:	4b47      	ldr	r3, [pc, #284]	@ (8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8006cc6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006cca:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006cce:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8006cd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d120      	bne.n	8006d18 <HAL_RCCEx_GetPeriphCLKFreq+0xfe4>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006cd6:	4b43      	ldr	r3, [pc, #268]	@ (8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f003 0320 	and.w	r3, r3, #32
 8006cde:	2b20      	cmp	r3, #32
 8006ce0:	d117      	bne.n	8006d12 <HAL_RCCEx_GetPeriphCLKFreq+0xfde>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006ce2:	4b40      	ldr	r3, [pc, #256]	@ (8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8006ce4:	689b      	ldr	r3, [r3, #8]
 8006ce6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d005      	beq.n	8006cfa <HAL_RCCEx_GetPeriphCLKFreq+0xfc6>
 8006cee:	4b3d      	ldr	r3, [pc, #244]	@ (8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8006cf0:	689b      	ldr	r3, [r3, #8]
 8006cf2:	0e1b      	lsrs	r3, r3, #24
 8006cf4:	f003 030f 	and.w	r3, r3, #15
 8006cf8:	e006      	b.n	8006d08 <HAL_RCCEx_GetPeriphCLKFreq+0xfd4>
 8006cfa:	4b3a      	ldr	r3, [pc, #232]	@ (8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8006cfc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006d00:	041b      	lsls	r3, r3, #16
 8006d02:	0e1b      	lsrs	r3, r3, #24
 8006d04:	f003 030f 	and.w	r3, r3, #15
 8006d08:	4a38      	ldr	r2, [pc, #224]	@ (8006dec <HAL_RCCEx_GetPeriphCLKFreq+0x10b8>)
 8006d0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d0e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d10:	e362      	b.n	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = 0U;
 8006d12:	2300      	movs	r3, #0
 8006d14:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d16:	e35f      	b.n	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8006d18:	4b32      	ldr	r3, [pc, #200]	@ (8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8006d1a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006d1e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006d22:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006d26:	d112      	bne.n	8006d4e <HAL_RCCEx_GetPeriphCLKFreq+0x101a>
 8006d28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d2e:	d10e      	bne.n	8006d4e <HAL_RCCEx_GetPeriphCLKFreq+0x101a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006d30:	4b2c      	ldr	r3, [pc, #176]	@ (8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8006d32:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006d36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d3a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006d3e:	d102      	bne.n	8006d46 <HAL_RCCEx_GetPeriphCLKFreq+0x1012>
      {
        frequency = LSI_VALUE / 128U;
 8006d40:	23fa      	movs	r3, #250	@ 0xfa
 8006d42:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006d44:	e348      	b.n	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = LSI_VALUE;
 8006d46:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006d4a:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006d4c:	e344      	b.n	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8006d4e:	4b25      	ldr	r3, [pc, #148]	@ (8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006d56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d5a:	d106      	bne.n	8006d6a <HAL_RCCEx_GetPeriphCLKFreq+0x1036>
 8006d5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d5e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006d62:	d102      	bne.n	8006d6a <HAL_RCCEx_GetPeriphCLKFreq+0x1036>
    {
      frequency = HSI_VALUE;
 8006d64:	4b20      	ldr	r3, [pc, #128]	@ (8006de8 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>)
 8006d66:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d68:	e336      	b.n	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8006d6a:	4b1e      	ldr	r3, [pc, #120]	@ (8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8006d6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006d70:	f003 0302 	and.w	r3, r3, #2
 8006d74:	2b02      	cmp	r3, #2
 8006d76:	d107      	bne.n	8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0x1054>
 8006d78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d7a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006d7e:	d103      	bne.n	8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0x1054>
    {
      frequency = LSE_VALUE;
 8006d80:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d84:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d86:	e327      	b.n	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8006d88:	2300      	movs	r3, #0
 8006d8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d8c:	e324      	b.n	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8006d8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d92:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8006d96:	430b      	orrs	r3, r1
 8006d98:	d14e      	bne.n	8006e38 <HAL_RCCEx_GetPeriphCLKFreq+0x1104>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8006d9a:	4b12      	ldr	r3, [pc, #72]	@ (8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8006d9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006da0:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8006da4:	633b      	str	r3, [r7, #48]	@ 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8006da6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d103      	bne.n	8006db4 <HAL_RCCEx_GetPeriphCLKFreq+0x1080>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006dac:	f7fd fc36 	bl	800461c <HAL_RCC_GetPCLK1Freq>
 8006db0:	6378      	str	r0, [r7, #52]	@ 0x34
 8006db2:	e311      	b.n	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8006db4:	4b0b      	ldr	r3, [pc, #44]	@ (8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8006db6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006dba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006dbe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006dc2:	d119      	bne.n	8006df8 <HAL_RCCEx_GetPeriphCLKFreq+0x10c4>
 8006dc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dc6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006dca:	d115      	bne.n	8006df8 <HAL_RCCEx_GetPeriphCLKFreq+0x10c4>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006dcc:	4b05      	ldr	r3, [pc, #20]	@ (8006de4 <HAL_RCCEx_GetPeriphCLKFreq+0x10b0>)
 8006dce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006dd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006dd6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006dda:	d109      	bne.n	8006df0 <HAL_RCCEx_GetPeriphCLKFreq+0x10bc>
      {
        frequency = LSI_VALUE / 128U;
 8006ddc:	23fa      	movs	r3, #250	@ 0xfa
 8006dde:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006de0:	e2fa      	b.n	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 8006de2:	bf00      	nop
 8006de4:	46020c00 	.word	0x46020c00
 8006de8:	00f42400 	.word	0x00f42400
 8006dec:	0800bef8 	.word	0x0800bef8
      }
      else
      {
        frequency = LSI_VALUE;
 8006df0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8006df4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006df6:	e2ef      	b.n	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8006df8:	4ba8      	ldr	r3, [pc, #672]	@ (800709c <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e04:	d106      	bne.n	8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0x10e0>
 8006e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e08:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006e0c:	d102      	bne.n	8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0x10e0>
    {
      frequency = HSI_VALUE;
 8006e0e:	4ba4      	ldr	r3, [pc, #656]	@ (80070a0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8006e10:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e12:	e2e1      	b.n	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8006e14:	4ba1      	ldr	r3, [pc, #644]	@ (800709c <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8006e16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006e1a:	f003 0302 	and.w	r3, r3, #2
 8006e1e:	2b02      	cmp	r3, #2
 8006e20:	d107      	bne.n	8006e32 <HAL_RCCEx_GetPeriphCLKFreq+0x10fe>
 8006e22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e24:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006e28:	d103      	bne.n	8006e32 <HAL_RCCEx_GetPeriphCLKFreq+0x10fe>
    {
      frequency = LSE_VALUE;
 8006e2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e30:	e2d2      	b.n	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8006e32:	2300      	movs	r3, #0
 8006e34:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e36:	e2cf      	b.n	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8006e38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e3c:	f102 4178 	add.w	r1, r2, #4160749568	@ 0xf8000000
 8006e40:	430b      	orrs	r3, r1
 8006e42:	d12d      	bne.n	8006ea0 <HAL_RCCEx_GetPeriphCLKFreq+0x116c>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8006e44:	4b95      	ldr	r3, [pc, #596]	@ (800709c <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8006e46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006e4a:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8006e4e:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8006e50:	4b92      	ldr	r3, [pc, #584]	@ (800709c <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e58:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006e5c:	d105      	bne.n	8006e6a <HAL_RCCEx_GetPeriphCLKFreq+0x1136>
 8006e5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d102      	bne.n	8006e6a <HAL_RCCEx_GetPeriphCLKFreq+0x1136>
    {
      frequency = HSE_VALUE;
 8006e64:	4b8e      	ldr	r3, [pc, #568]	@ (80070a0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8006e66:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e68:	e2b6      	b.n	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8006e6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e6c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006e70:	d107      	bne.n	8006e82 <HAL_RCCEx_GetPeriphCLKFreq+0x114e>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006e72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006e76:	4618      	mov	r0, r3
 8006e78:	f7fe fb4e 	bl	8005518 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8006e7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e7e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e80:	e2aa      	b.n	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8006e82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e84:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006e88:	d107      	bne.n	8006e9a <HAL_RCCEx_GetPeriphCLKFreq+0x1166>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e8a:	f107 0318 	add.w	r3, r7, #24
 8006e8e:	4618      	mov	r0, r3
 8006e90:	f7fe fc9c 	bl	80057cc <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8006e94:	69bb      	ldr	r3, [r7, #24]
 8006e96:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e98:	e29e      	b.n	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e9e:	e29b      	b.n	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8006ea0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ea4:	f5a2 0100 	sub.w	r1, r2, #8388608	@ 0x800000
 8006ea8:	430b      	orrs	r3, r1
 8006eaa:	d156      	bne.n	8006f5a <HAL_RCCEx_GetPeriphCLKFreq+0x1226>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8006eac:	4b7b      	ldr	r3, [pc, #492]	@ (800709c <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8006eae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006eb2:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8006eb6:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8006eb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eba:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006ebe:	d028      	beq.n	8006f12 <HAL_RCCEx_GetPeriphCLKFreq+0x11de>
 8006ec0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ec2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006ec6:	d845      	bhi.n	8006f54 <HAL_RCCEx_GetPeriphCLKFreq+0x1220>
 8006ec8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eca:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006ece:	d013      	beq.n	8006ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x11c4>
 8006ed0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ed2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006ed6:	d83d      	bhi.n	8006f54 <HAL_RCCEx_GetPeriphCLKFreq+0x1220>
 8006ed8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d004      	beq.n	8006ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x11b4>
 8006ede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ee0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006ee4:	d004      	beq.n	8006ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x11bc>
 8006ee6:	e035      	b.n	8006f54 <HAL_RCCEx_GetPeriphCLKFreq+0x1220>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8006ee8:	f7fd fbac 	bl	8004644 <HAL_RCC_GetPCLK2Freq>
 8006eec:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006eee:	e273      	b.n	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8006ef0:	f7fd fa78 	bl	80043e4 <HAL_RCC_GetSysClockFreq>
 8006ef4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006ef6:	e26f      	b.n	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006ef8:	4b68      	ldr	r3, [pc, #416]	@ (800709c <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006f00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f04:	d102      	bne.n	8006f0c <HAL_RCCEx_GetPeriphCLKFreq+0x11d8>
        {
          frequency = HSI_VALUE;
 8006f06:	4b66      	ldr	r3, [pc, #408]	@ (80070a0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8006f08:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006f0a:	e265      	b.n	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006f10:	e262      	b.n	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006f12:	4b62      	ldr	r3, [pc, #392]	@ (800709c <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f003 0320 	and.w	r3, r3, #32
 8006f1a:	2b20      	cmp	r3, #32
 8006f1c:	d117      	bne.n	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0x121a>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006f1e:	4b5f      	ldr	r3, [pc, #380]	@ (800709c <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8006f20:	689b      	ldr	r3, [r3, #8]
 8006f22:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d005      	beq.n	8006f36 <HAL_RCCEx_GetPeriphCLKFreq+0x1202>
 8006f2a:	4b5c      	ldr	r3, [pc, #368]	@ (800709c <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8006f2c:	689b      	ldr	r3, [r3, #8]
 8006f2e:	0e1b      	lsrs	r3, r3, #24
 8006f30:	f003 030f 	and.w	r3, r3, #15
 8006f34:	e006      	b.n	8006f44 <HAL_RCCEx_GetPeriphCLKFreq+0x1210>
 8006f36:	4b59      	ldr	r3, [pc, #356]	@ (800709c <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8006f38:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006f3c:	041b      	lsls	r3, r3, #16
 8006f3e:	0e1b      	lsrs	r3, r3, #24
 8006f40:	f003 030f 	and.w	r3, r3, #15
 8006f44:	4a57      	ldr	r2, [pc, #348]	@ (80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 8006f46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f4a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006f4c:	e244      	b.n	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006f52:	e241      	b.n	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 8006f54:	2300      	movs	r3, #0
 8006f56:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006f58:	e23e      	b.n	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8006f5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f5e:	f102 417f 	add.w	r1, r2, #4278190080	@ 0xff000000
 8006f62:	430b      	orrs	r3, r1
 8006f64:	d156      	bne.n	8007014 <HAL_RCCEx_GetPeriphCLKFreq+0x12e0>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8006f66:	4b4d      	ldr	r3, [pc, #308]	@ (800709c <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8006f68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006f6c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006f70:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 8006f72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f74:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006f78:	d028      	beq.n	8006fcc <HAL_RCCEx_GetPeriphCLKFreq+0x1298>
 8006f7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f7c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006f80:	d845      	bhi.n	800700e <HAL_RCCEx_GetPeriphCLKFreq+0x12da>
 8006f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f84:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f88:	d013      	beq.n	8006fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x127e>
 8006f8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f8c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f90:	d83d      	bhi.n	800700e <HAL_RCCEx_GetPeriphCLKFreq+0x12da>
 8006f92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d004      	beq.n	8006fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
 8006f98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f9a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f9e:	d004      	beq.n	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0x1276>
 8006fa0:	e035      	b.n	800700e <HAL_RCCEx_GetPeriphCLKFreq+0x12da>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8006fa2:	f7fd fb3b 	bl	800461c <HAL_RCC_GetPCLK1Freq>
 8006fa6:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006fa8:	e216      	b.n	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8006faa:	f7fd fa1b 	bl	80043e4 <HAL_RCC_GetSysClockFreq>
 8006fae:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8006fb0:	e212      	b.n	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006fb2:	4b3a      	ldr	r3, [pc, #232]	@ (800709c <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006fba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006fbe:	d102      	bne.n	8006fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1292>
        {
          frequency = HSI_VALUE;
 8006fc0:	4b37      	ldr	r3, [pc, #220]	@ (80070a0 <HAL_RCCEx_GetPeriphCLKFreq+0x136c>)
 8006fc2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006fc4:	e208      	b.n	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006fca:	e205      	b.n	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8006fcc:	4b33      	ldr	r3, [pc, #204]	@ (800709c <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f003 0320 	and.w	r3, r3, #32
 8006fd4:	2b20      	cmp	r3, #32
 8006fd6:	d117      	bne.n	8007008 <HAL_RCCEx_GetPeriphCLKFreq+0x12d4>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006fd8:	4b30      	ldr	r3, [pc, #192]	@ (800709c <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8006fda:	689b      	ldr	r3, [r3, #8]
 8006fdc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d005      	beq.n	8006ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x12bc>
 8006fe4:	4b2d      	ldr	r3, [pc, #180]	@ (800709c <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8006fe6:	689b      	ldr	r3, [r3, #8]
 8006fe8:	0e1b      	lsrs	r3, r3, #24
 8006fea:	f003 030f 	and.w	r3, r3, #15
 8006fee:	e006      	b.n	8006ffe <HAL_RCCEx_GetPeriphCLKFreq+0x12ca>
 8006ff0:	4b2a      	ldr	r3, [pc, #168]	@ (800709c <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8006ff2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006ff6:	041b      	lsls	r3, r3, #16
 8006ff8:	0e1b      	lsrs	r3, r3, #24
 8006ffa:	f003 030f 	and.w	r3, r3, #15
 8006ffe:	4a29      	ldr	r2, [pc, #164]	@ (80070a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1370>)
 8007000:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007004:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007006:	e1e7      	b.n	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 8007008:	2300      	movs	r3, #0
 800700a:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800700c:	e1e4      	b.n	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 800700e:	2300      	movs	r3, #0
 8007010:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007012:	e1e1      	b.n	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8007014:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007018:	f102 417e 	add.w	r1, r2, #4261412864	@ 0xfe000000
 800701c:	430b      	orrs	r3, r1
 800701e:	d17c      	bne.n	800711a <HAL_RCCEx_GetPeriphCLKFreq+0x13e6>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8007020:	4b1e      	ldr	r3, [pc, #120]	@ (800709c <HAL_RCCEx_GetPeriphCLKFreq+0x1368>)
 8007022:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8007026:	f003 0318 	and.w	r3, r3, #24
 800702a:	633b      	str	r3, [r7, #48]	@ 0x30
    switch (srcclk)
 800702c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800702e:	2b18      	cmp	r3, #24
 8007030:	d870      	bhi.n	8007114 <HAL_RCCEx_GetPeriphCLKFreq+0x13e0>
 8007032:	a201      	add	r2, pc, #4	@ (adr r2, 8007038 <HAL_RCCEx_GetPeriphCLKFreq+0x1304>)
 8007034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007038:	080070a9 	.word	0x080070a9
 800703c:	08007115 	.word	0x08007115
 8007040:	08007115 	.word	0x08007115
 8007044:	08007115 	.word	0x08007115
 8007048:	08007115 	.word	0x08007115
 800704c:	08007115 	.word	0x08007115
 8007050:	08007115 	.word	0x08007115
 8007054:	08007115 	.word	0x08007115
 8007058:	080070b1 	.word	0x080070b1
 800705c:	08007115 	.word	0x08007115
 8007060:	08007115 	.word	0x08007115
 8007064:	08007115 	.word	0x08007115
 8007068:	08007115 	.word	0x08007115
 800706c:	08007115 	.word	0x08007115
 8007070:	08007115 	.word	0x08007115
 8007074:	08007115 	.word	0x08007115
 8007078:	080070b9 	.word	0x080070b9
 800707c:	08007115 	.word	0x08007115
 8007080:	08007115 	.word	0x08007115
 8007084:	08007115 	.word	0x08007115
 8007088:	08007115 	.word	0x08007115
 800708c:	08007115 	.word	0x08007115
 8007090:	08007115 	.word	0x08007115
 8007094:	08007115 	.word	0x08007115
 8007098:	080070d3 	.word	0x080070d3
 800709c:	46020c00 	.word	0x46020c00
 80070a0:	00f42400 	.word	0x00f42400
 80070a4:	0800bef8 	.word	0x0800bef8
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 80070a8:	f7fd fae0 	bl	800466c <HAL_RCC_GetPCLK3Freq>
 80070ac:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80070ae:	e193      	b.n	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80070b0:	f7fd f998 	bl	80043e4 <HAL_RCC_GetSysClockFreq>
 80070b4:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 80070b6:	e18f      	b.n	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80070b8:	4b9f      	ldr	r3, [pc, #636]	@ (8007338 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80070c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80070c4:	d102      	bne.n	80070cc <HAL_RCCEx_GetPeriphCLKFreq+0x1398>
        {
          frequency = HSI_VALUE;
 80070c6:	4b9d      	ldr	r3, [pc, #628]	@ (800733c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 80070c8:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80070ca:	e185      	b.n	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 80070cc:	2300      	movs	r3, #0
 80070ce:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80070d0:	e182      	b.n	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80070d2:	4b99      	ldr	r3, [pc, #612]	@ (8007338 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f003 0320 	and.w	r3, r3, #32
 80070da:	2b20      	cmp	r3, #32
 80070dc:	d117      	bne.n	800710e <HAL_RCCEx_GetPeriphCLKFreq+0x13da>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80070de:	4b96      	ldr	r3, [pc, #600]	@ (8007338 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 80070e0:	689b      	ldr	r3, [r3, #8]
 80070e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d005      	beq.n	80070f6 <HAL_RCCEx_GetPeriphCLKFreq+0x13c2>
 80070ea:	4b93      	ldr	r3, [pc, #588]	@ (8007338 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 80070ec:	689b      	ldr	r3, [r3, #8]
 80070ee:	0e1b      	lsrs	r3, r3, #24
 80070f0:	f003 030f 	and.w	r3, r3, #15
 80070f4:	e006      	b.n	8007104 <HAL_RCCEx_GetPeriphCLKFreq+0x13d0>
 80070f6:	4b90      	ldr	r3, [pc, #576]	@ (8007338 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 80070f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80070fc:	041b      	lsls	r3, r3, #16
 80070fe:	0e1b      	lsrs	r3, r3, #24
 8007100:	f003 030f 	and.w	r3, r3, #15
 8007104:	4a8e      	ldr	r2, [pc, #568]	@ (8007340 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 8007106:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800710a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800710c:	e164      	b.n	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 800710e:	2300      	movs	r3, #0
 8007110:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007112:	e161      	b.n	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 8007114:	2300      	movs	r3, #0
 8007116:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007118:	e15e      	b.n	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800711a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800711e:	f102 417c 	add.w	r1, r2, #4227858432	@ 0xfc000000
 8007122:	430b      	orrs	r3, r1
 8007124:	d155      	bne.n	80071d2 <HAL_RCCEx_GetPeriphCLKFreq+0x149e>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8007126:	4b84      	ldr	r3, [pc, #528]	@ (8007338 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8007128:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800712c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8007130:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 8007132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007134:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007138:	d013      	beq.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0x142e>
 800713a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800713c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007140:	d844      	bhi.n	80071cc <HAL_RCCEx_GetPeriphCLKFreq+0x1498>
 8007142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007144:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007148:	d013      	beq.n	8007172 <HAL_RCCEx_GetPeriphCLKFreq+0x143e>
 800714a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800714c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007150:	d83c      	bhi.n	80071cc <HAL_RCCEx_GetPeriphCLKFreq+0x1498>
 8007152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007154:	2b00      	cmp	r3, #0
 8007156:	d014      	beq.n	8007182 <HAL_RCCEx_GetPeriphCLKFreq+0x144e>
 8007158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800715a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800715e:	d014      	beq.n	800718a <HAL_RCCEx_GetPeriphCLKFreq+0x1456>
 8007160:	e034      	b.n	80071cc <HAL_RCCEx_GetPeriphCLKFreq+0x1498>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007162:	f107 0318 	add.w	r3, r7, #24
 8007166:	4618      	mov	r0, r3
 8007168:	f7fe fb30 	bl	80057cc <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800716c:	69fb      	ldr	r3, [r7, #28]
 800716e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007170:	e132      	b.n	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007172:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007176:	4618      	mov	r0, r3
 8007178:	f7fe f9ce 	bl	8005518 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800717c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800717e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007180:	e12a      	b.n	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007182:	f7fd f92f 	bl	80043e4 <HAL_RCC_GetSysClockFreq>
 8007186:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007188:	e126      	b.n	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800718a:	4b6b      	ldr	r3, [pc, #428]	@ (8007338 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f003 0320 	and.w	r3, r3, #32
 8007192:	2b20      	cmp	r3, #32
 8007194:	d117      	bne.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1492>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007196:	4b68      	ldr	r3, [pc, #416]	@ (8007338 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8007198:	689b      	ldr	r3, [r3, #8]
 800719a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d005      	beq.n	80071ae <HAL_RCCEx_GetPeriphCLKFreq+0x147a>
 80071a2:	4b65      	ldr	r3, [pc, #404]	@ (8007338 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 80071a4:	689b      	ldr	r3, [r3, #8]
 80071a6:	0e1b      	lsrs	r3, r3, #24
 80071a8:	f003 030f 	and.w	r3, r3, #15
 80071ac:	e006      	b.n	80071bc <HAL_RCCEx_GetPeriphCLKFreq+0x1488>
 80071ae:	4b62      	ldr	r3, [pc, #392]	@ (8007338 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 80071b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80071b4:	041b      	lsls	r3, r3, #16
 80071b6:	0e1b      	lsrs	r3, r3, #24
 80071b8:	f003 030f 	and.w	r3, r3, #15
 80071bc:	4a60      	ldr	r2, [pc, #384]	@ (8007340 <HAL_RCCEx_GetPeriphCLKFreq+0x160c>)
 80071be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071c2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80071c4:	e108      	b.n	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
          frequency = 0U;
 80071c6:	2300      	movs	r3, #0
 80071c8:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80071ca:	e105      	b.n	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 80071cc:	2300      	movs	r3, #0
 80071ce:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 80071d0:	e102      	b.n	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#if defined(HSPI1)

  else if (PeriphClk == RCC_PERIPHCLK_HSPI)
 80071d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071d6:	1e59      	subs	r1, r3, #1
 80071d8:	ea52 0301 	orrs.w	r3, r2, r1
 80071dc:	d13c      	bne.n	8007258 <HAL_RCCEx_GetPeriphCLKFreq+0x1524>
  {
    /* Get the current HSPI kernel source */
    srcclk = __HAL_RCC_GET_HSPI_SOURCE();
 80071de:	4b56      	ldr	r3, [pc, #344]	@ (8007338 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 80071e0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80071e4:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80071e8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (srcclk)
 80071ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071ec:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80071f0:	d027      	beq.n	8007242 <HAL_RCCEx_GetPeriphCLKFreq+0x150e>
 80071f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071f4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80071f8:	d82b      	bhi.n	8007252 <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
 80071fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071fc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007200:	d017      	beq.n	8007232 <HAL_RCCEx_GetPeriphCLKFreq+0x14fe>
 8007202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007204:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007208:	d823      	bhi.n	8007252 <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
 800720a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800720c:	2b00      	cmp	r3, #0
 800720e:	d004      	beq.n	800721a <HAL_RCCEx_GetPeriphCLKFreq+0x14e6>
 8007210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007212:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007216:	d004      	beq.n	8007222 <HAL_RCCEx_GetPeriphCLKFreq+0x14ee>
 8007218:	e01b      	b.n	8007252 <HAL_RCCEx_GetPeriphCLKFreq+0x151e>
    {
      case RCC_HSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800721a:	f7fd f8e3 	bl	80043e4 <HAL_RCC_GetSysClockFreq>
 800721e:	6378      	str	r0, [r7, #52]	@ 0x34
        break;
 8007220:	e0da      	b.n	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_HSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007222:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007226:	4618      	mov	r0, r3
 8007228:	f7fe f976 	bl	8005518 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800722c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800722e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007230:	e0d2      	b.n	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      case RCC_HSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007232:	f107 0318 	add.w	r3, r7, #24
 8007236:	4618      	mov	r0, r3
 8007238:	f7fe fac8 	bl	80057cc <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800723c:	69fb      	ldr	r3, [r7, #28]
 800723e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007240:	e0ca      	b.n	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      case RCC_HSPICLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007242:	f107 030c 	add.w	r3, r7, #12
 8007246:	4618      	mov	r0, r3
 8007248:	f7fe fc1a 	bl	8005a80 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_R_Frequency;
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007250:	e0c2      	b.n	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>

      default:

        frequency = 0U;
 8007252:	2300      	movs	r3, #0
 8007254:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8007256:	e0bf      	b.n	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8007258:	e9d7 2300 	ldrd	r2, r3, [r7]
 800725c:	f102 4170 	add.w	r1, r2, #4026531840	@ 0xf0000000
 8007260:	430b      	orrs	r3, r1
 8007262:	d131      	bne.n	80072c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1594>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8007264:	4b34      	ldr	r3, [pc, #208]	@ (8007338 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8007266:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800726a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800726e:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8007270:	4b31      	ldr	r3, [pc, #196]	@ (8007338 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8007272:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007276:	f003 0302 	and.w	r3, r3, #2
 800727a:	2b02      	cmp	r3, #2
 800727c:	d106      	bne.n	800728c <HAL_RCCEx_GetPeriphCLKFreq+0x1558>
 800727e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007280:	2b00      	cmp	r3, #0
 8007282:	d103      	bne.n	800728c <HAL_RCCEx_GetPeriphCLKFreq+0x1558>
    {
      frequency = LSE_VALUE;
 8007284:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007288:	637b      	str	r3, [r7, #52]	@ 0x34
 800728a:	e0a5      	b.n	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 800728c:	4b2a      	ldr	r3, [pc, #168]	@ (8007338 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 800728e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007292:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007296:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800729a:	d112      	bne.n	80072c2 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
 800729c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800729e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80072a2:	d10e      	bne.n	80072c2 <HAL_RCCEx_GetPeriphCLKFreq+0x158e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80072a4:	4b24      	ldr	r3, [pc, #144]	@ (8007338 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 80072a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80072aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80072ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80072b2:	d102      	bne.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0x1586>
      {
        frequency = LSI_VALUE / 128U;
 80072b4:	23fa      	movs	r3, #250	@ 0xfa
 80072b6:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80072b8:	e08e      	b.n	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
      else
      {
        frequency = LSI_VALUE;
 80072ba:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80072be:	637b      	str	r3, [r7, #52]	@ 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80072c0:	e08a      	b.n	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 80072c2:	2300      	movs	r3, #0
 80072c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80072c6:	e087      	b.n	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 80072c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072cc:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 80072d0:	430b      	orrs	r3, r1
 80072d2:	d13b      	bne.n	800734c <HAL_RCCEx_GetPeriphCLKFreq+0x1618>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 80072d4:	4b18      	ldr	r3, [pc, #96]	@ (8007338 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 80072d6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80072da:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80072de:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 80072e0:	4b15      	ldr	r3, [pc, #84]	@ (8007338 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80072e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80072ec:	d105      	bne.n	80072fa <HAL_RCCEx_GetPeriphCLKFreq+0x15c6>
 80072ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d102      	bne.n	80072fa <HAL_RCCEx_GetPeriphCLKFreq+0x15c6>
    {
      frequency = HSI48_VALUE;
 80072f4:	4b13      	ldr	r3, [pc, #76]	@ (8007344 <HAL_RCCEx_GetPeriphCLKFreq+0x1610>)
 80072f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80072f8:	e06e      	b.n	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 80072fa:	4b0f      	ldr	r3, [pc, #60]	@ (8007338 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007302:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007306:	d106      	bne.n	8007316 <HAL_RCCEx_GetPeriphCLKFreq+0x15e2>
 8007308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800730a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800730e:	d102      	bne.n	8007316 <HAL_RCCEx_GetPeriphCLKFreq+0x15e2>
    {
      frequency = HSI48_VALUE >> 1U ;
 8007310:	4b0d      	ldr	r3, [pc, #52]	@ (8007348 <HAL_RCCEx_GetPeriphCLKFreq+0x1614>)
 8007312:	637b      	str	r3, [r7, #52]	@ 0x34
 8007314:	e060      	b.n	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 8007316:	4b08      	ldr	r3, [pc, #32]	@ (8007338 <HAL_RCCEx_GetPeriphCLKFreq+0x1604>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800731e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007322:	d106      	bne.n	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0x15fe>
 8007324:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007326:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800732a:	d102      	bne.n	8007332 <HAL_RCCEx_GetPeriphCLKFreq+0x15fe>
    {
      frequency = HSI_VALUE;
 800732c:	4b03      	ldr	r3, [pc, #12]	@ (800733c <HAL_RCCEx_GetPeriphCLKFreq+0x1608>)
 800732e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007330:	e052      	b.n	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 8007332:	2300      	movs	r3, #0
 8007334:	637b      	str	r3, [r7, #52]	@ 0x34
 8007336:	e04f      	b.n	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
 8007338:	46020c00 	.word	0x46020c00
 800733c:	00f42400 	.word	0x00f42400
 8007340:	0800bef8 	.word	0x0800bef8
 8007344:	02dc6c00 	.word	0x02dc6c00
 8007348:	016e3600 	.word	0x016e3600
  }
#endif /* defined(LTDC) */

#if defined(USB_OTG_HS)

  else if (PeriphClk == RCC_PERIPHCLK_USBPHY)
 800734c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007350:	f1a3 0108 	sub.w	r1, r3, #8
 8007354:	ea52 0301 	orrs.w	r3, r2, r1
 8007358:	d13c      	bne.n	80073d4 <HAL_RCCEx_GetPeriphCLKFreq+0x16a0>
  {
    /* Get the current USB_OTG_HS kernel source */
    srcclk = __HAL_RCC_GET_USBPHY_SOURCE();
 800735a:	4b22      	ldr	r3, [pc, #136]	@ (80073e4 <HAL_RCCEx_GetPeriphCLKFreq+0x16b0>)
 800735c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8007360:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8007364:	633b      	str	r3, [r7, #48]	@ 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE))
 8007366:	4b1f      	ldr	r3, [pc, #124]	@ (80073e4 <HAL_RCCEx_GetPeriphCLKFreq+0x16b0>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800736e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007372:	d105      	bne.n	8007380 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
 8007374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007376:	2b00      	cmp	r3, #0
 8007378:	d102      	bne.n	8007380 <HAL_RCCEx_GetPeriphCLKFreq+0x164c>
    {
      frequency = HSE_VALUE;
 800737a:	4b1b      	ldr	r3, [pc, #108]	@ (80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x16b4>)
 800737c:	637b      	str	r3, [r7, #52]	@ 0x34
 800737e:	e02b      	b.n	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_USBPHYCLKSOURCE_HSE_DIV2))
 8007380:	4b18      	ldr	r3, [pc, #96]	@ (80073e4 <HAL_RCCEx_GetPeriphCLKFreq+0x16b0>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007388:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800738c:	d106      	bne.n	800739c <HAL_RCCEx_GetPeriphCLKFreq+0x1668>
 800738e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007390:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007394:	d102      	bne.n	800739c <HAL_RCCEx_GetPeriphCLKFreq+0x1668>
    {
      frequency = HSE_VALUE >> 1U ;
 8007396:	4b15      	ldr	r3, [pc, #84]	@ (80073ec <HAL_RCCEx_GetPeriphCLKFreq+0x16b8>)
 8007398:	637b      	str	r3, [r7, #52]	@ 0x34
 800739a:	e01d      	b.n	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1) /* PLL1P */
 800739c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800739e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073a2:	d107      	bne.n	80073b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1680>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80073a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80073a8:	4618      	mov	r0, r3
 80073aa:	f7fe f8b5 	bl	8005518 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 80073ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80073b2:	e011      	b.n	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    else if (srcclk == RCC_USBPHYCLKSOURCE_PLL1_DIV2) /* PLL1P_DIV2 */
 80073b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073b6:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80073ba:	d108      	bne.n	80073ce <HAL_RCCEx_GetPeriphCLKFreq+0x169a>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80073bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80073c0:	4618      	mov	r0, r3
 80073c2:	f7fe f8a9 	bl	8005518 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = (pll1_clocks.PLL1_P_Frequency) / 2U;
 80073c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073c8:	085b      	lsrs	r3, r3, #1
 80073ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80073cc:	e004      	b.n	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
    }
    /* Clock not enabled for USB_OTG_HS */
    else
    {
      frequency = 0U;
 80073ce:	2300      	movs	r3, #0
 80073d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80073d2:	e001      	b.n	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x16a4>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 80073d4:	2300      	movs	r3, #0
 80073d6:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  return (frequency);
 80073d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80073da:	4618      	mov	r0, r3
 80073dc:	3738      	adds	r7, #56	@ 0x38
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}
 80073e2:	bf00      	nop
 80073e4:	46020c00 	.word	0x46020c00
 80073e8:	00f42400 	.word	0x00f42400
 80073ec:	007a1200 	.word	0x007a1200

080073f0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b084      	sub	sp, #16
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 80073f8:	4b47      	ldr	r3, [pc, #284]	@ (8007518 <RCCEx_PLL2_Config+0x128>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4a46      	ldr	r2, [pc, #280]	@ (8007518 <RCCEx_PLL2_Config+0x128>)
 80073fe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007402:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007404:	f7fb faa6 	bl	8002954 <HAL_GetTick>
 8007408:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800740a:	e008      	b.n	800741e <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800740c:	f7fb faa2 	bl	8002954 <HAL_GetTick>
 8007410:	4602      	mov	r2, r0
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	1ad3      	subs	r3, r2, r3
 8007416:	2b02      	cmp	r3, #2
 8007418:	d901      	bls.n	800741e <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800741a:	2303      	movs	r3, #3
 800741c:	e077      	b.n	800750e <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800741e:	4b3e      	ldr	r3, [pc, #248]	@ (8007518 <RCCEx_PLL2_Config+0x128>)
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007426:	2b00      	cmp	r3, #0
 8007428:	d1f0      	bne.n	800740c <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800742a:	4b3b      	ldr	r3, [pc, #236]	@ (8007518 <RCCEx_PLL2_Config+0x128>)
 800742c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800742e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007432:	f023 0303 	bic.w	r3, r3, #3
 8007436:	687a      	ldr	r2, [r7, #4]
 8007438:	6811      	ldr	r1, [r2, #0]
 800743a:	687a      	ldr	r2, [r7, #4]
 800743c:	6852      	ldr	r2, [r2, #4]
 800743e:	3a01      	subs	r2, #1
 8007440:	0212      	lsls	r2, r2, #8
 8007442:	430a      	orrs	r2, r1
 8007444:	4934      	ldr	r1, [pc, #208]	@ (8007518 <RCCEx_PLL2_Config+0x128>)
 8007446:	4313      	orrs	r3, r2
 8007448:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800744a:	4b33      	ldr	r3, [pc, #204]	@ (8007518 <RCCEx_PLL2_Config+0x128>)
 800744c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800744e:	4b33      	ldr	r3, [pc, #204]	@ (800751c <RCCEx_PLL2_Config+0x12c>)
 8007450:	4013      	ands	r3, r2
 8007452:	687a      	ldr	r2, [r7, #4]
 8007454:	6892      	ldr	r2, [r2, #8]
 8007456:	3a01      	subs	r2, #1
 8007458:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800745c:	687a      	ldr	r2, [r7, #4]
 800745e:	68d2      	ldr	r2, [r2, #12]
 8007460:	3a01      	subs	r2, #1
 8007462:	0252      	lsls	r2, r2, #9
 8007464:	b292      	uxth	r2, r2
 8007466:	4311      	orrs	r1, r2
 8007468:	687a      	ldr	r2, [r7, #4]
 800746a:	6912      	ldr	r2, [r2, #16]
 800746c:	3a01      	subs	r2, #1
 800746e:	0412      	lsls	r2, r2, #16
 8007470:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8007474:	4311      	orrs	r1, r2
 8007476:	687a      	ldr	r2, [r7, #4]
 8007478:	6952      	ldr	r2, [r2, #20]
 800747a:	3a01      	subs	r2, #1
 800747c:	0612      	lsls	r2, r2, #24
 800747e:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8007482:	430a      	orrs	r2, r1
 8007484:	4924      	ldr	r1, [pc, #144]	@ (8007518 <RCCEx_PLL2_Config+0x128>)
 8007486:	4313      	orrs	r3, r2
 8007488:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800748a:	4b23      	ldr	r3, [pc, #140]	@ (8007518 <RCCEx_PLL2_Config+0x128>)
 800748c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800748e:	f023 020c 	bic.w	r2, r3, #12
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	699b      	ldr	r3, [r3, #24]
 8007496:	4920      	ldr	r1, [pc, #128]	@ (8007518 <RCCEx_PLL2_Config+0x128>)
 8007498:	4313      	orrs	r3, r2
 800749a:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800749c:	4b1e      	ldr	r3, [pc, #120]	@ (8007518 <RCCEx_PLL2_Config+0x128>)
 800749e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6a1b      	ldr	r3, [r3, #32]
 80074a4:	491c      	ldr	r1, [pc, #112]	@ (8007518 <RCCEx_PLL2_Config+0x128>)
 80074a6:	4313      	orrs	r3, r2
 80074a8:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 80074aa:	4b1b      	ldr	r3, [pc, #108]	@ (8007518 <RCCEx_PLL2_Config+0x128>)
 80074ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074ae:	4a1a      	ldr	r2, [pc, #104]	@ (8007518 <RCCEx_PLL2_Config+0x128>)
 80074b0:	f023 0310 	bic.w	r3, r3, #16
 80074b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80074b6:	4b18      	ldr	r3, [pc, #96]	@ (8007518 <RCCEx_PLL2_Config+0x128>)
 80074b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074ba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80074be:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80074c2:	687a      	ldr	r2, [r7, #4]
 80074c4:	69d2      	ldr	r2, [r2, #28]
 80074c6:	00d2      	lsls	r2, r2, #3
 80074c8:	4913      	ldr	r1, [pc, #76]	@ (8007518 <RCCEx_PLL2_Config+0x128>)
 80074ca:	4313      	orrs	r3, r2
 80074cc:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 80074ce:	4b12      	ldr	r3, [pc, #72]	@ (8007518 <RCCEx_PLL2_Config+0x128>)
 80074d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074d2:	4a11      	ldr	r2, [pc, #68]	@ (8007518 <RCCEx_PLL2_Config+0x128>)
 80074d4:	f043 0310 	orr.w	r3, r3, #16
 80074d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 80074da:	4b0f      	ldr	r3, [pc, #60]	@ (8007518 <RCCEx_PLL2_Config+0x128>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	4a0e      	ldr	r2, [pc, #56]	@ (8007518 <RCCEx_PLL2_Config+0x128>)
 80074e0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80074e4:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80074e6:	f7fb fa35 	bl	8002954 <HAL_GetTick>
 80074ea:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80074ec:	e008      	b.n	8007500 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80074ee:	f7fb fa31 	bl	8002954 <HAL_GetTick>
 80074f2:	4602      	mov	r2, r0
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	1ad3      	subs	r3, r2, r3
 80074f8:	2b02      	cmp	r3, #2
 80074fa:	d901      	bls.n	8007500 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 80074fc:	2303      	movs	r3, #3
 80074fe:	e006      	b.n	800750e <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007500:	4b05      	ldr	r3, [pc, #20]	@ (8007518 <RCCEx_PLL2_Config+0x128>)
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007508:	2b00      	cmp	r3, #0
 800750a:	d0f0      	beq.n	80074ee <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 800750c:	2300      	movs	r3, #0

}
 800750e:	4618      	mov	r0, r3
 8007510:	3710      	adds	r7, #16
 8007512:	46bd      	mov	sp, r7
 8007514:	bd80      	pop	{r7, pc}
 8007516:	bf00      	nop
 8007518:	46020c00 	.word	0x46020c00
 800751c:	80800000 	.word	0x80800000

08007520 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b084      	sub	sp, #16
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8007528:	4b47      	ldr	r3, [pc, #284]	@ (8007648 <RCCEx_PLL3_Config+0x128>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4a46      	ldr	r2, [pc, #280]	@ (8007648 <RCCEx_PLL3_Config+0x128>)
 800752e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007532:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007534:	f7fb fa0e 	bl	8002954 <HAL_GetTick>
 8007538:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800753a:	e008      	b.n	800754e <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800753c:	f7fb fa0a 	bl	8002954 <HAL_GetTick>
 8007540:	4602      	mov	r2, r0
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	1ad3      	subs	r3, r2, r3
 8007546:	2b02      	cmp	r3, #2
 8007548:	d901      	bls.n	800754e <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800754a:	2303      	movs	r3, #3
 800754c:	e077      	b.n	800763e <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800754e:	4b3e      	ldr	r3, [pc, #248]	@ (8007648 <RCCEx_PLL3_Config+0x128>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007556:	2b00      	cmp	r3, #0
 8007558:	d1f0      	bne.n	800753c <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800755a:	4b3b      	ldr	r3, [pc, #236]	@ (8007648 <RCCEx_PLL3_Config+0x128>)
 800755c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800755e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007562:	f023 0303 	bic.w	r3, r3, #3
 8007566:	687a      	ldr	r2, [r7, #4]
 8007568:	6811      	ldr	r1, [r2, #0]
 800756a:	687a      	ldr	r2, [r7, #4]
 800756c:	6852      	ldr	r2, [r2, #4]
 800756e:	3a01      	subs	r2, #1
 8007570:	0212      	lsls	r2, r2, #8
 8007572:	430a      	orrs	r2, r1
 8007574:	4934      	ldr	r1, [pc, #208]	@ (8007648 <RCCEx_PLL3_Config+0x128>)
 8007576:	4313      	orrs	r3, r2
 8007578:	630b      	str	r3, [r1, #48]	@ 0x30
 800757a:	4b33      	ldr	r3, [pc, #204]	@ (8007648 <RCCEx_PLL3_Config+0x128>)
 800757c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800757e:	4b33      	ldr	r3, [pc, #204]	@ (800764c <RCCEx_PLL3_Config+0x12c>)
 8007580:	4013      	ands	r3, r2
 8007582:	687a      	ldr	r2, [r7, #4]
 8007584:	6892      	ldr	r2, [r2, #8]
 8007586:	3a01      	subs	r2, #1
 8007588:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800758c:	687a      	ldr	r2, [r7, #4]
 800758e:	68d2      	ldr	r2, [r2, #12]
 8007590:	3a01      	subs	r2, #1
 8007592:	0252      	lsls	r2, r2, #9
 8007594:	b292      	uxth	r2, r2
 8007596:	4311      	orrs	r1, r2
 8007598:	687a      	ldr	r2, [r7, #4]
 800759a:	6912      	ldr	r2, [r2, #16]
 800759c:	3a01      	subs	r2, #1
 800759e:	0412      	lsls	r2, r2, #16
 80075a0:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 80075a4:	4311      	orrs	r1, r2
 80075a6:	687a      	ldr	r2, [r7, #4]
 80075a8:	6952      	ldr	r2, [r2, #20]
 80075aa:	3a01      	subs	r2, #1
 80075ac:	0612      	lsls	r2, r2, #24
 80075ae:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80075b2:	430a      	orrs	r2, r1
 80075b4:	4924      	ldr	r1, [pc, #144]	@ (8007648 <RCCEx_PLL3_Config+0x128>)
 80075b6:	4313      	orrs	r3, r2
 80075b8:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 80075ba:	4b23      	ldr	r3, [pc, #140]	@ (8007648 <RCCEx_PLL3_Config+0x128>)
 80075bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075be:	f023 020c 	bic.w	r2, r3, #12
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	699b      	ldr	r3, [r3, #24]
 80075c6:	4920      	ldr	r1, [pc, #128]	@ (8007648 <RCCEx_PLL3_Config+0x128>)
 80075c8:	4313      	orrs	r3, r2
 80075ca:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 80075cc:	4b1e      	ldr	r3, [pc, #120]	@ (8007648 <RCCEx_PLL3_Config+0x128>)
 80075ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6a1b      	ldr	r3, [r3, #32]
 80075d4:	491c      	ldr	r1, [pc, #112]	@ (8007648 <RCCEx_PLL3_Config+0x128>)
 80075d6:	4313      	orrs	r3, r2
 80075d8:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 80075da:	4b1b      	ldr	r3, [pc, #108]	@ (8007648 <RCCEx_PLL3_Config+0x128>)
 80075dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075de:	4a1a      	ldr	r2, [pc, #104]	@ (8007648 <RCCEx_PLL3_Config+0x128>)
 80075e0:	f023 0310 	bic.w	r3, r3, #16
 80075e4:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80075e6:	4b18      	ldr	r3, [pc, #96]	@ (8007648 <RCCEx_PLL3_Config+0x128>)
 80075e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80075ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80075ee:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80075f2:	687a      	ldr	r2, [r7, #4]
 80075f4:	69d2      	ldr	r2, [r2, #28]
 80075f6:	00d2      	lsls	r2, r2, #3
 80075f8:	4913      	ldr	r1, [pc, #76]	@ (8007648 <RCCEx_PLL3_Config+0x128>)
 80075fa:	4313      	orrs	r3, r2
 80075fc:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 80075fe:	4b12      	ldr	r3, [pc, #72]	@ (8007648 <RCCEx_PLL3_Config+0x128>)
 8007600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007602:	4a11      	ldr	r2, [pc, #68]	@ (8007648 <RCCEx_PLL3_Config+0x128>)
 8007604:	f043 0310 	orr.w	r3, r3, #16
 8007608:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800760a:	4b0f      	ldr	r3, [pc, #60]	@ (8007648 <RCCEx_PLL3_Config+0x128>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	4a0e      	ldr	r2, [pc, #56]	@ (8007648 <RCCEx_PLL3_Config+0x128>)
 8007610:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007614:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007616:	f7fb f99d 	bl	8002954 <HAL_GetTick>
 800761a:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800761c:	e008      	b.n	8007630 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800761e:	f7fb f999 	bl	8002954 <HAL_GetTick>
 8007622:	4602      	mov	r2, r0
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	1ad3      	subs	r3, r2, r3
 8007628:	2b02      	cmp	r3, #2
 800762a:	d901      	bls.n	8007630 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 800762c:	2303      	movs	r3, #3
 800762e:	e006      	b.n	800763e <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007630:	4b05      	ldr	r3, [pc, #20]	@ (8007648 <RCCEx_PLL3_Config+0x128>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007638:	2b00      	cmp	r3, #0
 800763a:	d0f0      	beq.n	800761e <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 800763c:	2300      	movs	r3, #0
}
 800763e:	4618      	mov	r0, r3
 8007640:	3710      	adds	r7, #16
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}
 8007646:	bf00      	nop
 8007648:	46020c00 	.word	0x46020c00
 800764c:	80800000 	.word	0x80800000

08007650 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b084      	sub	sp, #16
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d101      	bne.n	8007662 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800765e:	2301      	movs	r3, #1
 8007660:	e0fb      	b.n	800785a <HAL_SPI_Init+0x20a>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4a7f      	ldr	r2, [pc, #508]	@ (8007864 <HAL_SPI_Init+0x214>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d004      	beq.n	8007676 <HAL_SPI_Init+0x26>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4a7d      	ldr	r2, [pc, #500]	@ (8007868 <HAL_SPI_Init+0x218>)
 8007672:	4293      	cmp	r3, r2
 8007674:	e000      	b.n	8007678 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 8007676:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2200      	movs	r2, #0
 800767c:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4a78      	ldr	r2, [pc, #480]	@ (8007864 <HAL_SPI_Init+0x214>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d004      	beq.n	8007692 <HAL_SPI_Init+0x42>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	4a76      	ldr	r2, [pc, #472]	@ (8007868 <HAL_SPI_Init+0x218>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d105      	bne.n	800769e <HAL_SPI_Init+0x4e>
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	68db      	ldr	r3, [r3, #12]
 8007696:	2b0f      	cmp	r3, #15
 8007698:	d901      	bls.n	800769e <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 800769a:	2301      	movs	r3, #1
 800769c:	e0dd      	b.n	800785a <HAL_SPI_Init+0x20a>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f000 feb0 	bl	8008404 <SPI_GetPacketSize>
 80076a4:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	4a6e      	ldr	r2, [pc, #440]	@ (8007864 <HAL_SPI_Init+0x214>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d004      	beq.n	80076ba <HAL_SPI_Init+0x6a>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4a6c      	ldr	r2, [pc, #432]	@ (8007868 <HAL_SPI_Init+0x218>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d102      	bne.n	80076c0 <HAL_SPI_Init+0x70>
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	2b08      	cmp	r3, #8
 80076be:	d816      	bhi.n	80076ee <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80076c4:	4a69      	ldr	r2, [pc, #420]	@ (800786c <HAL_SPI_Init+0x21c>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d00e      	beq.n	80076e8 <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	4a68      	ldr	r2, [pc, #416]	@ (8007870 <HAL_SPI_Init+0x220>)
 80076d0:	4293      	cmp	r3, r2
 80076d2:	d009      	beq.n	80076e8 <HAL_SPI_Init+0x98>
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	4a66      	ldr	r2, [pc, #408]	@ (8007874 <HAL_SPI_Init+0x224>)
 80076da:	4293      	cmp	r3, r2
 80076dc:	d004      	beq.n	80076e8 <HAL_SPI_Init+0x98>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4a65      	ldr	r2, [pc, #404]	@ (8007878 <HAL_SPI_Init+0x228>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d104      	bne.n	80076f2 <HAL_SPI_Init+0xa2>
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	2b10      	cmp	r3, #16
 80076ec:	d901      	bls.n	80076f2 <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 80076ee:	2301      	movs	r3, #1
 80076f0:	e0b3      	b.n	800785a <HAL_SPI_Init+0x20a>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80076f8:	b2db      	uxtb	r3, r3
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d106      	bne.n	800770c <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2200      	movs	r2, #0
 8007702:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f7fa fe36 	bl	8002378 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2202      	movs	r2, #2
 8007710:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	681a      	ldr	r2, [r3, #0]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f022 0201 	bic.w	r2, r2, #1
 8007722:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	689b      	ldr	r3, [r3, #8]
 800772a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800772e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	699b      	ldr	r3, [r3, #24]
 8007734:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007738:	d119      	bne.n	800776e <HAL_SPI_Init+0x11e>
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	685b      	ldr	r3, [r3, #4]
 800773e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007742:	d103      	bne.n	800774c <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007748:	2b00      	cmp	r3, #0
 800774a:	d008      	beq.n	800775e <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007750:	2b00      	cmp	r3, #0
 8007752:	d10c      	bne.n	800776e <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007758:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800775c:	d107      	bne.n	800776e <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	681a      	ldr	r2, [r3, #0]
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800776c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	685b      	ldr	r3, [r3, #4]
 8007772:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007776:	2b00      	cmp	r3, #0
 8007778:	d00f      	beq.n	800779a <HAL_SPI_Init+0x14a>
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	68db      	ldr	r3, [r3, #12]
 800777e:	2b06      	cmp	r3, #6
 8007780:	d90b      	bls.n	800779a <HAL_SPI_Init+0x14a>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	430a      	orrs	r2, r1
 8007796:	601a      	str	r2, [r3, #0]
 8007798:	e007      	b.n	80077aa <HAL_SPI_Init+0x15a>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	681a      	ldr	r2, [r3, #0]
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80077a8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	69da      	ldr	r2, [r3, #28]
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077b2:	431a      	orrs	r2, r3
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	431a      	orrs	r2, r3
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077bc:	ea42 0103 	orr.w	r1, r2, r3
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	68da      	ldr	r2, [r3, #12]
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	430a      	orrs	r2, r1
 80077ca:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077d4:	431a      	orrs	r2, r3
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077da:	431a      	orrs	r2, r3
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	699b      	ldr	r3, [r3, #24]
 80077e0:	431a      	orrs	r2, r3
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	691b      	ldr	r3, [r3, #16]
 80077e6:	431a      	orrs	r2, r3
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	695b      	ldr	r3, [r3, #20]
 80077ec:	431a      	orrs	r2, r3
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6a1b      	ldr	r3, [r3, #32]
 80077f2:	431a      	orrs	r2, r3
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	685b      	ldr	r3, [r3, #4]
 80077f8:	431a      	orrs	r2, r3
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80077fe:	431a      	orrs	r2, r3
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	689b      	ldr	r3, [r3, #8]
 8007804:	431a      	orrs	r2, r3
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800780a:	431a      	orrs	r2, r3
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007810:	431a      	orrs	r2, r3
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007816:	ea42 0103 	orr.w	r1, r2, r3
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	430a      	orrs	r2, r1
 8007824:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	685b      	ldr	r3, [r3, #4]
 800782a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800782e:	2b00      	cmp	r3, #0
 8007830:	d00a      	beq.n	8007848 <HAL_SPI_Init+0x1f8>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	68db      	ldr	r3, [r3, #12]
 8007838:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	430a      	orrs	r2, r1
 8007846:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2200      	movs	r2, #0
 800784c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2201      	movs	r2, #1
 8007854:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 8007858:	2300      	movs	r3, #0
}
 800785a:	4618      	mov	r0, r3
 800785c:	3710      	adds	r7, #16
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}
 8007862:	bf00      	nop
 8007864:	46002000 	.word	0x46002000
 8007868:	56002000 	.word	0x56002000
 800786c:	40013000 	.word	0x40013000
 8007870:	50013000 	.word	0x50013000
 8007874:	40003800 	.word	0x40003800
 8007878:	50003800 	.word	0x50003800

0800787c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b088      	sub	sp, #32
 8007880:	af02      	add	r7, sp, #8
 8007882:	60f8      	str	r0, [r7, #12]
 8007884:	60b9      	str	r1, [r7, #8]
 8007886:	603b      	str	r3, [r7, #0]
 8007888:	4613      	mov	r3, r2
 800788a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	3320      	adds	r3, #32
 8007892:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Check transfer size parameter */
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	4a90      	ldr	r2, [pc, #576]	@ (8007adc <HAL_SPI_Transmit+0x260>)
 800789a:	4293      	cmp	r3, r2
  {
    assert_param(IS_SPI_TRANSFER_SIZE(Size));
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800789c:	f7fb f85a 	bl	8002954 <HAL_GetTick>
 80078a0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80078a8:	b2db      	uxtb	r3, r3
 80078aa:	2b01      	cmp	r3, #1
 80078ac:	d001      	beq.n	80078b2 <HAL_SPI_Transmit+0x36>
  {
    return HAL_BUSY;
 80078ae:	2302      	movs	r3, #2
 80078b0:	e1f4      	b.n	8007c9c <HAL_SPI_Transmit+0x420>
  }

  if ((pData == NULL) || (Size == 0UL))
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d002      	beq.n	80078be <HAL_SPI_Transmit+0x42>
 80078b8:	88fb      	ldrh	r3, [r7, #6]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d101      	bne.n	80078c2 <HAL_SPI_Transmit+0x46>
  {
    return HAL_ERROR;
 80078be:	2301      	movs	r3, #1
 80078c0:	e1ec      	b.n	8007c9c <HAL_SPI_Transmit+0x420>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 80078c8:	2b01      	cmp	r3, #1
 80078ca:	d101      	bne.n	80078d0 <HAL_SPI_Transmit+0x54>
 80078cc:	2302      	movs	r3, #2
 80078ce:	e1e5      	b.n	8007c9c <HAL_SPI_Transmit+0x420>
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	2201      	movs	r2, #1
 80078d4:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	2203      	movs	r2, #3
 80078dc:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	2200      	movs	r2, #0
 80078e4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	68ba      	ldr	r2, [r7, #8]
 80078ec:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = Size;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	88fa      	ldrh	r2, [r7, #6]
 80078f2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = Size;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	88fa      	ldrh	r2, [r7, #6]
 80078fa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	2200      	movs	r2, #0
 8007902:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = (uint16_t) 0UL;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	2200      	movs	r2, #0
 8007908:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = (uint16_t) 0UL;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	2200      	movs	r2, #0
 8007910:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxISR       = NULL;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	2200      	movs	r2, #0
 8007918:	67da      	str	r2, [r3, #124]	@ 0x7c
  hspi->RxISR       = NULL;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	2200      	movs	r2, #0
 800791e:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	689b      	ldr	r3, [r3, #8]
 8007924:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8007928:	d108      	bne.n	800793c <HAL_SPI_Transmit+0xc0>
  {
    SPI_1LINE_TX(hspi);
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	681a      	ldr	r2, [r3, #0]
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007938:	601a      	str	r2, [r3, #0]
 800793a:	e009      	b.n	8007950 <HAL_SPI_Transmit+0xd4>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	68db      	ldr	r3, [r3, #12]
 8007942:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800794e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	685b      	ldr	r3, [r3, #4]
 8007956:	0c1b      	lsrs	r3, r3, #16
 8007958:	041b      	lsls	r3, r3, #16
 800795a:	88f9      	ldrh	r1, [r7, #6]
 800795c:	68fa      	ldr	r2, [r7, #12]
 800795e:	6812      	ldr	r2, [r2, #0]
 8007960:	430b      	orrs	r3, r1
 8007962:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	681a      	ldr	r2, [r3, #0]
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f042 0201 	orr.w	r2, r2, #1
 8007972:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	69db      	ldr	r3, [r3, #28]
 800797a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800797e:	2b00      	cmp	r3, #0
 8007980:	d10c      	bne.n	800799c <HAL_SPI_Transmit+0x120>
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	685b      	ldr	r3, [r3, #4]
 8007986:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800798a:	d107      	bne.n	800799c <HAL_SPI_Transmit+0x120>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	681a      	ldr	r2, [r3, #0]
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800799a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	68db      	ldr	r3, [r3, #12]
 80079a0:	2b0f      	cmp	r3, #15
 80079a2:	d95b      	bls.n	8007a5c <HAL_SPI_Transmit+0x1e0>
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	4a4d      	ldr	r2, [pc, #308]	@ (8007ae0 <HAL_SPI_Transmit+0x264>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d04f      	beq.n	8007a4e <HAL_SPI_Transmit+0x1d2>
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	4a4c      	ldr	r2, [pc, #304]	@ (8007ae4 <HAL_SPI_Transmit+0x268>)
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d04a      	beq.n	8007a4e <HAL_SPI_Transmit+0x1d2>
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	4a4a      	ldr	r2, [pc, #296]	@ (8007ae8 <HAL_SPI_Transmit+0x26c>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d045      	beq.n	8007a4e <HAL_SPI_Transmit+0x1d2>
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	4a49      	ldr	r2, [pc, #292]	@ (8007aec <HAL_SPI_Transmit+0x270>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d147      	bne.n	8007a5c <HAL_SPI_Transmit+0x1e0>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80079cc:	e03f      	b.n	8007a4e <HAL_SPI_Transmit+0x1d2>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	695b      	ldr	r3, [r3, #20]
 80079d4:	f003 0302 	and.w	r3, r3, #2
 80079d8:	2b02      	cmp	r3, #2
 80079da:	d114      	bne.n	8007a06 <HAL_SPI_Transmit+0x18a>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	6812      	ldr	r2, [r2, #0]
 80079e6:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80079ec:	1d1a      	adds	r2, r3, #4
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	665a      	str	r2, [r3, #100]	@ 0x64
        hspi->TxXferCount--;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 80079f8:	b29b      	uxth	r3, r3
 80079fa:	3b01      	subs	r3, #1
 80079fc:	b29a      	uxth	r2, r3
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007a04:	e023      	b.n	8007a4e <HAL_SPI_Transmit+0x1d2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007a06:	f7fa ffa5 	bl	8002954 <HAL_GetTick>
 8007a0a:	4602      	mov	r2, r0
 8007a0c:	693b      	ldr	r3, [r7, #16]
 8007a0e:	1ad3      	subs	r3, r2, r3
 8007a10:	683a      	ldr	r2, [r7, #0]
 8007a12:	429a      	cmp	r2, r3
 8007a14:	d803      	bhi.n	8007a1e <HAL_SPI_Transmit+0x1a2>
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a1c:	d102      	bne.n	8007a24 <HAL_SPI_Transmit+0x1a8>
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d114      	bne.n	8007a4e <HAL_SPI_Transmit+0x1d2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007a24:	68f8      	ldr	r0, [r7, #12]
 8007a26:	f000 fc1f 	bl	8008268 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007a30:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	2201      	movs	r2, #1
 8007a3e:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	2200      	movs	r2, #0
 8007a46:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8007a4a:	2303      	movs	r3, #3
 8007a4c:	e126      	b.n	8007c9c <HAL_SPI_Transmit+0x420>
    while (hspi->TxXferCount > 0UL)
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007a54:	b29b      	uxth	r3, r3
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d1b9      	bne.n	80079ce <HAL_SPI_Transmit+0x152>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8007a5a:	e0f9      	b.n	8007c50 <HAL_SPI_Transmit+0x3d4>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	68db      	ldr	r3, [r3, #12]
 8007a60:	2b07      	cmp	r3, #7
 8007a62:	f240 80ee 	bls.w	8007c42 <HAL_SPI_Transmit+0x3c6>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8007a66:	e067      	b.n	8007b38 <HAL_SPI_Transmit+0x2bc>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	695b      	ldr	r3, [r3, #20]
 8007a6e:	f003 0302 	and.w	r3, r3, #2
 8007a72:	2b02      	cmp	r3, #2
 8007a74:	d13c      	bne.n	8007af0 <HAL_SPI_Transmit+0x274>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007a7c:	b29b      	uxth	r3, r3
 8007a7e:	2b01      	cmp	r3, #1
 8007a80:	d918      	bls.n	8007ab4 <HAL_SPI_Transmit+0x238>
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d014      	beq.n	8007ab4 <HAL_SPI_Transmit+0x238>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	6812      	ldr	r2, [r2, #0]
 8007a94:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a9a:	1d1a      	adds	r2, r3, #4
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007aa6:	b29b      	uxth	r3, r3
 8007aa8:	3b02      	subs	r3, #2
 8007aaa:	b29a      	uxth	r2, r3
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007ab2:	e041      	b.n	8007b38 <HAL_SPI_Transmit+0x2bc>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007ab8:	881a      	ldrh	r2, [r3, #0]
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007ac2:	1c9a      	adds	r2, r3, #2
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007ace:	b29b      	uxth	r3, r3
 8007ad0:	3b01      	subs	r3, #1
 8007ad2:	b29a      	uxth	r2, r3
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007ada:	e02d      	b.n	8007b38 <HAL_SPI_Transmit+0x2bc>
 8007adc:	46002000 	.word	0x46002000
 8007ae0:	40013000 	.word	0x40013000
 8007ae4:	50013000 	.word	0x50013000
 8007ae8:	40003800 	.word	0x40003800
 8007aec:	50003800 	.word	0x50003800
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007af0:	f7fa ff30 	bl	8002954 <HAL_GetTick>
 8007af4:	4602      	mov	r2, r0
 8007af6:	693b      	ldr	r3, [r7, #16]
 8007af8:	1ad3      	subs	r3, r2, r3
 8007afa:	683a      	ldr	r2, [r7, #0]
 8007afc:	429a      	cmp	r2, r3
 8007afe:	d803      	bhi.n	8007b08 <HAL_SPI_Transmit+0x28c>
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b06:	d102      	bne.n	8007b0e <HAL_SPI_Transmit+0x292>
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d114      	bne.n	8007b38 <HAL_SPI_Transmit+0x2bc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007b0e:	68f8      	ldr	r0, [r7, #12]
 8007b10:	f000 fbaa 	bl	8008268 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007b1a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	2201      	movs	r2, #1
 8007b28:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8007b34:	2303      	movs	r3, #3
 8007b36:	e0b1      	b.n	8007c9c <HAL_SPI_Transmit+0x420>
    while (hspi->TxXferCount > 0UL)
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007b3e:	b29b      	uxth	r3, r3
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d191      	bne.n	8007a68 <HAL_SPI_Transmit+0x1ec>
 8007b44:	e084      	b.n	8007c50 <HAL_SPI_Transmit+0x3d4>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	695b      	ldr	r3, [r3, #20]
 8007b4c:	f003 0302 	and.w	r3, r3, #2
 8007b50:	2b02      	cmp	r3, #2
 8007b52:	d152      	bne.n	8007bfa <HAL_SPI_Transmit+0x37e>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007b5a:	b29b      	uxth	r3, r3
 8007b5c:	2b03      	cmp	r3, #3
 8007b5e:	d918      	bls.n	8007b92 <HAL_SPI_Transmit+0x316>
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b64:	2b40      	cmp	r3, #64	@ 0x40
 8007b66:	d914      	bls.n	8007b92 <HAL_SPI_Transmit+0x316>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	6812      	ldr	r2, [r2, #0]
 8007b72:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007b78:	1d1a      	adds	r2, r3, #4
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)4UL;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007b84:	b29b      	uxth	r3, r3
 8007b86:	3b04      	subs	r3, #4
 8007b88:	b29a      	uxth	r2, r3
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007b90:	e057      	b.n	8007c42 <HAL_SPI_Transmit+0x3c6>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007b98:	b29b      	uxth	r3, r3
 8007b9a:	2b01      	cmp	r3, #1
 8007b9c:	d917      	bls.n	8007bce <HAL_SPI_Transmit+0x352>
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d013      	beq.n	8007bce <HAL_SPI_Transmit+0x352>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007baa:	881a      	ldrh	r2, [r3, #0]
 8007bac:	697b      	ldr	r3, [r7, #20]
 8007bae:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007bb4:	1c9a      	adds	r2, r3, #2
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount -= (uint16_t)2UL;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007bc0:	b29b      	uxth	r3, r3
 8007bc2:	3b02      	subs	r3, #2
 8007bc4:	b29a      	uxth	r2, r3
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007bcc:	e039      	b.n	8007c42 <HAL_SPI_Transmit+0x3c6>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	3320      	adds	r3, #32
 8007bd8:	7812      	ldrb	r2, [r2, #0]
 8007bda:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007be0:	1c5a      	adds	r2, r3, #1
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->TxXferCount--;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007bec:	b29b      	uxth	r3, r3
 8007bee:	3b01      	subs	r3, #1
 8007bf0:	b29a      	uxth	r2, r3
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8007bf8:	e023      	b.n	8007c42 <HAL_SPI_Transmit+0x3c6>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007bfa:	f7fa feab 	bl	8002954 <HAL_GetTick>
 8007bfe:	4602      	mov	r2, r0
 8007c00:	693b      	ldr	r3, [r7, #16]
 8007c02:	1ad3      	subs	r3, r2, r3
 8007c04:	683a      	ldr	r2, [r7, #0]
 8007c06:	429a      	cmp	r2, r3
 8007c08:	d803      	bhi.n	8007c12 <HAL_SPI_Transmit+0x396>
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c10:	d102      	bne.n	8007c18 <HAL_SPI_Transmit+0x39c>
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d114      	bne.n	8007c42 <HAL_SPI_Transmit+0x3c6>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007c18:	68f8      	ldr	r0, [r7, #12]
 8007c1a:	f000 fb25 	bl	8008268 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007c24:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	2201      	movs	r2, #1
 8007c32:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8007c3e:	2303      	movs	r3, #3
 8007c40:	e02c      	b.n	8007c9c <HAL_SPI_Transmit+0x420>
    while (hspi->TxXferCount > 0UL)
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8007c48:	b29b      	uxth	r3, r3
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	f47f af7b 	bne.w	8007b46 <HAL_SPI_Transmit+0x2ca>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 8007c50:	693b      	ldr	r3, [r7, #16]
 8007c52:	9300      	str	r3, [sp, #0]
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	2200      	movs	r2, #0
 8007c58:	2108      	movs	r1, #8
 8007c5a:	68f8      	ldr	r0, [r7, #12]
 8007c5c:	f000 fba4 	bl	80083a8 <SPI_WaitOnFlagUntilTimeout>
 8007c60:	4603      	mov	r3, r0
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d007      	beq.n	8007c76 <HAL_SPI_Transmit+0x3fa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007c6c:	f043 0220 	orr.w	r2, r3, #32
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8007c76:	68f8      	ldr	r0, [r7, #12]
 8007c78:	f000 faf6 	bl	8008268 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	2201      	movs	r2, #1
 8007c80:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	2200      	movs	r2, #0
 8007c88:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d001      	beq.n	8007c9a <HAL_SPI_Transmit+0x41e>
  {
    return HAL_ERROR;
 8007c96:	2301      	movs	r3, #1
 8007c98:	e000      	b.n	8007c9c <HAL_SPI_Transmit+0x420>
  }
  else
  {
    return HAL_OK;
 8007c9a:	2300      	movs	r3, #0
  }
}
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	3718      	adds	r7, #24
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bd80      	pop	{r7, pc}

08007ca4 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b088      	sub	sp, #32
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	60f8      	str	r0, [r7, #12]
 8007cac:	60b9      	str	r1, [r7, #8]
 8007cae:	603b      	str	r3, [r7, #0]
 8007cb0:	4613      	mov	r3, r2
 8007cb2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007cb8:	095b      	lsrs	r3, r3, #5
 8007cba:	b29b      	uxth	r3, r3
 8007cbc:	3301      	adds	r3, #1
 8007cbe:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	3330      	adds	r3, #48	@ 0x30
 8007cc6:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Check transfer size parameter */
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	4a94      	ldr	r2, [pc, #592]	@ (8007f20 <HAL_SPI_Receive+0x27c>)
 8007cce:	4293      	cmp	r3, r2
  {
    assert_param(IS_SPI_TRANSFER_SIZE(Size));
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007cd0:	f7fa fe40 	bl	8002954 <HAL_GetTick>
 8007cd4:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8007cdc:	b2db      	uxtb	r3, r3
 8007cde:	2b01      	cmp	r3, #1
 8007ce0:	d001      	beq.n	8007ce6 <HAL_SPI_Receive+0x42>
  {
    return HAL_BUSY;
 8007ce2:	2302      	movs	r3, #2
 8007ce4:	e2bc      	b.n	8008260 <HAL_SPI_Receive+0x5bc>
  }

  if ((pData == NULL) || (Size == 0UL))
 8007ce6:	68bb      	ldr	r3, [r7, #8]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d002      	beq.n	8007cf2 <HAL_SPI_Receive+0x4e>
 8007cec:	88fb      	ldrh	r3, [r7, #6]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d101      	bne.n	8007cf6 <HAL_SPI_Receive+0x52>
  {
    return HAL_ERROR;
 8007cf2:	2301      	movs	r3, #1
 8007cf4:	e2b4      	b.n	8008260 <HAL_SPI_Receive+0x5bc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8007cfc:	2b01      	cmp	r3, #1
 8007cfe:	d101      	bne.n	8007d04 <HAL_SPI_Receive+0x60>
 8007d00:	2302      	movs	r3, #2
 8007d02:	e2ad      	b.n	8008260 <HAL_SPI_Receive+0x5bc>
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	2201      	movs	r2, #1
 8007d08:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	2204      	movs	r2, #4
 8007d10:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	2200      	movs	r2, #0
 8007d18:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	68ba      	ldr	r2, [r7, #8]
 8007d20:	66da      	str	r2, [r3, #108]	@ 0x6c
  hspi->RxXferSize  = Size;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	88fa      	ldrh	r2, [r7, #6]
 8007d26:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
  hspi->RxXferCount = Size;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	88fa      	ldrh	r2, [r7, #6]
 8007d2e:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	2200      	movs	r2, #0
 8007d36:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->TxXferSize  = (uint16_t) 0UL;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->TxXferCount = (uint16_t) 0UL;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	2200      	movs	r2, #0
 8007d44:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxISR       = NULL;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	679a      	str	r2, [r3, #120]	@ 0x78
  hspi->TxISR       = NULL;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	2200      	movs	r2, #0
 8007d52:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	689b      	ldr	r3, [r3, #8]
 8007d58:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 8007d5c:	d108      	bne.n	8007d70 <HAL_SPI_Receive+0xcc>
  {
    SPI_1LINE_RX(hspi);
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	681a      	ldr	r2, [r3, #0]
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007d6c:	601a      	str	r2, [r3, #0]
 8007d6e:	e009      	b.n	8007d84 <HAL_SPI_Receive+0xe0>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	68db      	ldr	r3, [r3, #12]
 8007d76:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8007d82:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	685b      	ldr	r3, [r3, #4]
 8007d8a:	0c1b      	lsrs	r3, r3, #16
 8007d8c:	041b      	lsls	r3, r3, #16
 8007d8e:	88f9      	ldrh	r1, [r7, #6]
 8007d90:	68fa      	ldr	r2, [r7, #12]
 8007d92:	6812      	ldr	r2, [r2, #0]
 8007d94:	430b      	orrs	r3, r1
 8007d96:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	681a      	ldr	r2, [r3, #0]
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f042 0201 	orr.w	r2, r2, #1
 8007da6:	601a      	str	r2, [r3, #0]

  if (((hspi->Instance->AUTOCR & SPI_AUTOCR_TRIGEN) == 0U) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	69db      	ldr	r3, [r3, #28]
 8007dae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d10c      	bne.n	8007dd0 <HAL_SPI_Receive+0x12c>
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	685b      	ldr	r3, [r3, #4]
 8007dba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007dbe:	d107      	bne.n	8007dd0 <HAL_SPI_Receive+0x12c>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	681a      	ldr	r2, [r3, #0]
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007dce:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	68db      	ldr	r3, [r3, #12]
 8007dd4:	2b0f      	cmp	r3, #15
 8007dd6:	f240 809c 	bls.w	8007f12 <HAL_SPI_Receive+0x26e>
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	4a51      	ldr	r2, [pc, #324]	@ (8007f24 <HAL_SPI_Receive+0x280>)
 8007de0:	4293      	cmp	r3, r2
 8007de2:	f000 808e 	beq.w	8007f02 <HAL_SPI_Receive+0x25e>
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	4a4f      	ldr	r2, [pc, #316]	@ (8007f28 <HAL_SPI_Receive+0x284>)
 8007dec:	4293      	cmp	r3, r2
 8007dee:	f000 8088 	beq.w	8007f02 <HAL_SPI_Receive+0x25e>
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	4a4d      	ldr	r2, [pc, #308]	@ (8007f2c <HAL_SPI_Receive+0x288>)
 8007df8:	4293      	cmp	r3, r2
 8007dfa:	f000 8082 	beq.w	8007f02 <HAL_SPI_Receive+0x25e>
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	4a4b      	ldr	r2, [pc, #300]	@ (8007f30 <HAL_SPI_Receive+0x28c>)
 8007e04:	4293      	cmp	r3, r2
 8007e06:	f040 8084 	bne.w	8007f12 <HAL_SPI_Receive+0x26e>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8007e0a:	e07a      	b.n	8007f02 <HAL_SPI_Receive+0x25e>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	695b      	ldr	r3, [r3, #20]
 8007e12:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	695b      	ldr	r3, [r3, #20]
 8007e1a:	f003 0301 	and.w	r3, r3, #1
 8007e1e:	2b01      	cmp	r3, #1
 8007e20:	d114      	bne.n	8007e4c <HAL_SPI_Receive+0x1a8>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681a      	ldr	r2, [r3, #0]
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007e2a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007e2c:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007e32:	1d1a      	adds	r2, r3, #4
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8007e3e:	b29b      	uxth	r3, r3
 8007e40:	3b01      	subs	r3, #1
 8007e42:	b29a      	uxth	r2, r3
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8007e4a:	e05a      	b.n	8007f02 <HAL_SPI_Receive+0x25e>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8007e52:	b29b      	uxth	r3, r3
 8007e54:	8bfa      	ldrh	r2, [r7, #30]
 8007e56:	429a      	cmp	r2, r3
 8007e58:	d919      	bls.n	8007e8e <HAL_SPI_Receive+0x1ea>
 8007e5a:	693b      	ldr	r3, [r7, #16]
 8007e5c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d014      	beq.n	8007e8e <HAL_SPI_Receive+0x1ea>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	681a      	ldr	r2, [r3, #0]
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007e6c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8007e6e:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007e74:	1d1a      	adds	r2, r3, #4
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8007e80:	b29b      	uxth	r3, r3
 8007e82:	3b01      	subs	r3, #1
 8007e84:	b29a      	uxth	r2, r3
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8007e8c:	e039      	b.n	8007f02 <HAL_SPI_Receive+0x25e>
      }
      /* Check if transfer is locked because of a suspend */
      else if (HAL_IS_BIT_SET(temp_sr_reg, SPI_SR_SUSP))
 8007e8e:	693b      	ldr	r3, [r7, #16]
 8007e90:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d010      	beq.n	8007eba <HAL_SPI_Receive+0x216>
      {
        /* Verify suspend is triggered by hardware and not software */
        if (HAL_IS_BIT_SET(hspi->Instance->CR1, SPI_CR1_CSTART))
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007ea2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ea6:	d12c      	bne.n	8007f02 <HAL_SPI_Receive+0x25e>
        {
          __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	699a      	ldr	r2, [r3, #24]
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007eb6:	619a      	str	r2, [r3, #24]
 8007eb8:	e023      	b.n	8007f02 <HAL_SPI_Receive+0x25e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007eba:	f7fa fd4b 	bl	8002954 <HAL_GetTick>
 8007ebe:	4602      	mov	r2, r0
 8007ec0:	697b      	ldr	r3, [r7, #20]
 8007ec2:	1ad3      	subs	r3, r2, r3
 8007ec4:	683a      	ldr	r2, [r7, #0]
 8007ec6:	429a      	cmp	r2, r3
 8007ec8:	d803      	bhi.n	8007ed2 <HAL_SPI_Receive+0x22e>
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ed0:	d102      	bne.n	8007ed8 <HAL_SPI_Receive+0x234>
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d114      	bne.n	8007f02 <HAL_SPI_Receive+0x25e>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007ed8:	68f8      	ldr	r0, [r7, #12]
 8007eda:	f000 f9c5 	bl	8008268 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007ee4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	2201      	movs	r2, #1
 8007ef2:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	2200      	movs	r2, #0
 8007efa:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8007efe:	2303      	movs	r3, #3
 8007f00:	e1ae      	b.n	8008260 <HAL_SPI_Receive+0x5bc>
    while (hspi->RxXferCount > 0UL)
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8007f08:	b29b      	uxth	r3, r3
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	f47f af7e 	bne.w	8007e0c <HAL_SPI_Receive+0x168>
  if ((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (IS_SPI_FULL_INSTANCE(hspi->Instance)))
 8007f10:	e193      	b.n	800823a <HAL_SPI_Receive+0x596>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	68db      	ldr	r3, [r3, #12]
 8007f16:	2b07      	cmp	r3, #7
 8007f18:	f240 8188 	bls.w	800822c <HAL_SPI_Receive+0x588>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8007f1c:	e0b0      	b.n	8008080 <HAL_SPI_Receive+0x3dc>
 8007f1e:	bf00      	nop
 8007f20:	46002000 	.word	0x46002000
 8007f24:	40013000 	.word	0x40013000
 8007f28:	50013000 	.word	0x50013000
 8007f2c:	40003800 	.word	0x40003800
 8007f30:	50003800 	.word	0x50003800
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	695b      	ldr	r3, [r3, #20]
 8007f3a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	695b      	ldr	r3, [r3, #20]
 8007f42:	f003 0301 	and.w	r3, r3, #1
 8007f46:	2b01      	cmp	r3, #1
 8007f48:	d114      	bne.n	8007f74 <HAL_SPI_Receive+0x2d0>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007f4e:	69ba      	ldr	r2, [r7, #24]
 8007f50:	8812      	ldrh	r2, [r2, #0]
 8007f52:	b292      	uxth	r2, r2
 8007f54:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007f5a:	1c9a      	adds	r2, r3, #2
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8007f66:	b29b      	uxth	r3, r3
 8007f68:	3b01      	subs	r3, #1
 8007f6a:	b29a      	uxth	r2, r3
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8007f72:	e085      	b.n	8008080 <HAL_SPI_Receive+0x3dc>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8007f7a:	b29b      	uxth	r3, r3
 8007f7c:	8bfa      	ldrh	r2, [r7, #30]
 8007f7e:	429a      	cmp	r2, r3
 8007f80:	d924      	bls.n	8007fcc <HAL_SPI_Receive+0x328>
 8007f82:	693b      	ldr	r3, [r7, #16]
 8007f84:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d01f      	beq.n	8007fcc <HAL_SPI_Receive+0x328>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007f90:	69ba      	ldr	r2, [r7, #24]
 8007f92:	8812      	ldrh	r2, [r2, #0]
 8007f94:	b292      	uxth	r2, r2
 8007f96:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007f9c:	1c9a      	adds	r2, r3, #2
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	66da      	str	r2, [r3, #108]	@ 0x6c
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007fa6:	69ba      	ldr	r2, [r7, #24]
 8007fa8:	8812      	ldrh	r2, [r2, #0]
 8007faa:	b292      	uxth	r2, r2
 8007fac:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007fb2:	1c9a      	adds	r2, r3, #2
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount -= (uint16_t)2UL;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8007fbe:	b29b      	uxth	r3, r3
 8007fc0:	3b02      	subs	r3, #2
 8007fc2:	b29a      	uxth	r2, r3
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8007fca:	e059      	b.n	8008080 <HAL_SPI_Receive+0x3dc>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8007fd2:	b29b      	uxth	r3, r3
 8007fd4:	2b01      	cmp	r3, #1
 8007fd6:	d119      	bne.n	800800c <HAL_SPI_Receive+0x368>
 8007fd8:	693b      	ldr	r3, [r7, #16]
 8007fda:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d014      	beq.n	800800c <HAL_SPI_Receive+0x368>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007fe6:	69ba      	ldr	r2, [r7, #24]
 8007fe8:	8812      	ldrh	r2, [r2, #0]
 8007fea:	b292      	uxth	r2, r2
 8007fec:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007ff2:	1c9a      	adds	r2, r3, #2
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8007ffe:	b29b      	uxth	r3, r3
 8008000:	3b01      	subs	r3, #1
 8008002:	b29a      	uxth	r2, r3
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 800800a:	e039      	b.n	8008080 <HAL_SPI_Receive+0x3dc>
      }
      /* Check if transfer is locked because of a suspend */
      else if (HAL_IS_BIT_SET(temp_sr_reg, SPI_SR_SUSP))
 800800c:	693b      	ldr	r3, [r7, #16]
 800800e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008012:	2b00      	cmp	r3, #0
 8008014:	d010      	beq.n	8008038 <HAL_SPI_Receive+0x394>
      {
        /* Verify suspend is triggered by hardware and not software */
        if (HAL_IS_BIT_SET(hspi->Instance->CR1, SPI_CR1_CSTART))
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008020:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008024:	d12c      	bne.n	8008080 <HAL_SPI_Receive+0x3dc>
        {
          __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	699a      	ldr	r2, [r3, #24]
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008034:	619a      	str	r2, [r3, #24]
 8008036:	e023      	b.n	8008080 <HAL_SPI_Receive+0x3dc>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008038:	f7fa fc8c 	bl	8002954 <HAL_GetTick>
 800803c:	4602      	mov	r2, r0
 800803e:	697b      	ldr	r3, [r7, #20]
 8008040:	1ad3      	subs	r3, r2, r3
 8008042:	683a      	ldr	r2, [r7, #0]
 8008044:	429a      	cmp	r2, r3
 8008046:	d803      	bhi.n	8008050 <HAL_SPI_Receive+0x3ac>
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800804e:	d102      	bne.n	8008056 <HAL_SPI_Receive+0x3b2>
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d114      	bne.n	8008080 <HAL_SPI_Receive+0x3dc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008056:	68f8      	ldr	r0, [r7, #12]
 8008058:	f000 f906 	bl	8008268 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008062:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	2201      	movs	r2, #1
 8008070:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	2200      	movs	r2, #0
 8008078:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 800807c:	2303      	movs	r3, #3
 800807e:	e0ef      	b.n	8008260 <HAL_SPI_Receive+0x5bc>
    while (hspi->RxXferCount > 0UL)
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8008086:	b29b      	uxth	r3, r3
 8008088:	2b00      	cmp	r3, #0
 800808a:	f47f af53 	bne.w	8007f34 <HAL_SPI_Receive+0x290>
 800808e:	e0d4      	b.n	800823a <HAL_SPI_Receive+0x596>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	695b      	ldr	r3, [r3, #20]
 8008096:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	695b      	ldr	r3, [r3, #20]
 800809e:	f003 0301 	and.w	r3, r3, #1
 80080a2:	2b01      	cmp	r3, #1
 80080a4:	d117      	bne.n	80080d6 <HAL_SPI_Receive+0x432>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80080b2:	7812      	ldrb	r2, [r2, #0]
 80080b4:	b2d2      	uxtb	r2, r2
 80080b6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80080bc:	1c5a      	adds	r2, r3, #1
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80080c8:	b29b      	uxth	r3, r3
 80080ca:	3b01      	subs	r3, #1
 80080cc:	b29a      	uxth	r2, r3
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 80080d4:	e0aa      	b.n	800822c <HAL_SPI_Receive+0x588>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80080dc:	b29b      	uxth	r3, r3
 80080de:	8bfa      	ldrh	r2, [r7, #30]
 80080e0:	429a      	cmp	r2, r3
 80080e2:	d946      	bls.n	8008172 <HAL_SPI_Receive+0x4ce>
 80080e4:	693b      	ldr	r3, [r7, #16]
 80080e6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d041      	beq.n	8008172 <HAL_SPI_Receive+0x4ce>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80080fa:	7812      	ldrb	r2, [r2, #0]
 80080fc:	b2d2      	uxtb	r2, r2
 80080fe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008104:	1c5a      	adds	r2, r3, #1
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	66da      	str	r2, [r3, #108]	@ 0x6c
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008116:	7812      	ldrb	r2, [r2, #0]
 8008118:	b2d2      	uxtb	r2, r2
 800811a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008120:	1c5a      	adds	r2, r3, #1
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	66da      	str	r2, [r3, #108]	@ 0x6c
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008132:	7812      	ldrb	r2, [r2, #0]
 8008134:	b2d2      	uxtb	r2, r2
 8008136:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800813c:	1c5a      	adds	r2, r3, #1
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	66da      	str	r2, [r3, #108]	@ 0x6c
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800814e:	7812      	ldrb	r2, [r2, #0]
 8008150:	b2d2      	uxtb	r2, r2
 8008152:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008158:	1c5a      	adds	r2, r3, #1
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount -= (uint16_t)4UL;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8008164:	b29b      	uxth	r3, r3
 8008166:	3b04      	subs	r3, #4
 8008168:	b29a      	uxth	r2, r3
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 8008170:	e05c      	b.n	800822c <HAL_SPI_Receive+0x588>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8008178:	b29b      	uxth	r3, r3
 800817a:	2b03      	cmp	r3, #3
 800817c:	d81c      	bhi.n	80081b8 <HAL_SPI_Receive+0x514>
 800817e:	693b      	ldr	r3, [r7, #16]
 8008180:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8008184:	2b00      	cmp	r3, #0
 8008186:	d017      	beq.n	80081b8 <HAL_SPI_Receive+0x514>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008194:	7812      	ldrb	r2, [r2, #0]
 8008196:	b2d2      	uxtb	r2, r2
 8008198:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800819e:	1c5a      	adds	r2, r3, #1
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	66da      	str	r2, [r3, #108]	@ 0x6c
        hspi->RxXferCount--;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80081aa:	b29b      	uxth	r3, r3
 80081ac:	3b01      	subs	r3, #1
 80081ae:	b29a      	uxth	r2, r3
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
 80081b6:	e039      	b.n	800822c <HAL_SPI_Receive+0x588>
      }
      /* Check if transfer is locked because of a suspend */
      else if (HAL_IS_BIT_SET(temp_sr_reg, SPI_SR_SUSP))
 80081b8:	693b      	ldr	r3, [r7, #16]
 80081ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d010      	beq.n	80081e4 <HAL_SPI_Receive+0x540>
      {
        /* Verify suspend is triggered by hardware and not software */
        if (HAL_IS_BIT_SET(hspi->Instance->CR1, SPI_CR1_CSTART))
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80081cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80081d0:	d12c      	bne.n	800822c <HAL_SPI_Receive+0x588>
        {
          __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	699a      	ldr	r2, [r3, #24]
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80081e0:	619a      	str	r2, [r3, #24]
 80081e2:	e023      	b.n	800822c <HAL_SPI_Receive+0x588>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80081e4:	f7fa fbb6 	bl	8002954 <HAL_GetTick>
 80081e8:	4602      	mov	r2, r0
 80081ea:	697b      	ldr	r3, [r7, #20]
 80081ec:	1ad3      	subs	r3, r2, r3
 80081ee:	683a      	ldr	r2, [r7, #0]
 80081f0:	429a      	cmp	r2, r3
 80081f2:	d803      	bhi.n	80081fc <HAL_SPI_Receive+0x558>
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081fa:	d102      	bne.n	8008202 <HAL_SPI_Receive+0x55e>
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d114      	bne.n	800822c <HAL_SPI_Receive+0x588>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008202:	68f8      	ldr	r0, [r7, #12]
 8008204:	f000 f830 	bl	8008268 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800820e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          hspi->State = HAL_SPI_STATE_READY;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	2201      	movs	r2, #1
 800821c:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	2200      	movs	r2, #0
 8008224:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

          return HAL_TIMEOUT;
 8008228:	2303      	movs	r3, #3
 800822a:	e019      	b.n	8008260 <HAL_SPI_Receive+0x5bc>
    while (hspi->RxXferCount > 0UL)
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8008232:	b29b      	uxth	r3, r3
 8008234:	2b00      	cmp	r3, #0
 8008236:	f47f af2b 	bne.w	8008090 <HAL_SPI_Receive+0x3ec>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800823a:	68f8      	ldr	r0, [r7, #12]
 800823c:	f000 f814 	bl	8008268 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	2201      	movs	r2, #1
 8008244:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	2200      	movs	r2, #0
 800824c:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008256:	2b00      	cmp	r3, #0
 8008258:	d001      	beq.n	800825e <HAL_SPI_Receive+0x5ba>
  {
    return HAL_ERROR;
 800825a:	2301      	movs	r3, #1
 800825c:	e000      	b.n	8008260 <HAL_SPI_Receive+0x5bc>
  }
  else
  {
    return HAL_OK;
 800825e:	2300      	movs	r3, #0
  }
}
 8008260:	4618      	mov	r0, r3
 8008262:	3720      	adds	r7, #32
 8008264:	46bd      	mov	sp, r7
 8008266:	bd80      	pop	{r7, pc}

08008268 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8008268:	b480      	push	{r7}
 800826a:	b085      	sub	sp, #20
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	695b      	ldr	r3, [r3, #20]
 8008276:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	699a      	ldr	r2, [r3, #24]
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f042 0208 	orr.w	r2, r2, #8
 8008286:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	699a      	ldr	r2, [r3, #24]
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f042 0210 	orr.w	r2, r2, #16
 8008296:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	681a      	ldr	r2, [r3, #0]
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f022 0201 	bic.w	r2, r2, #1
 80082a6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	691b      	ldr	r3, [r3, #16]
 80082ae:	687a      	ldr	r2, [r7, #4]
 80082b0:	6812      	ldr	r2, [r2, #0]
 80082b2:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 80082b6:	f023 0303 	bic.w	r3, r3, #3
 80082ba:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	689a      	ldr	r2, [r3, #8]
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80082ca:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80082d2:	b2db      	uxtb	r3, r3
 80082d4:	2b04      	cmp	r3, #4
 80082d6:	d014      	beq.n	8008302 <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	f003 0320 	and.w	r3, r3, #32
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d00f      	beq.n	8008302 <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80082e8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	699a      	ldr	r2, [r3, #24]
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	f042 0220 	orr.w	r2, r2, #32
 8008300:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8008308:	b2db      	uxtb	r3, r3
 800830a:	2b03      	cmp	r3, #3
 800830c:	d014      	beq.n	8008338 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008314:	2b00      	cmp	r3, #0
 8008316:	d00f      	beq.n	8008338 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800831e:	f043 0204 	orr.w	r2, r3, #4
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	699a      	ldr	r2, [r3, #24]
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008336:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800833e:	2b00      	cmp	r3, #0
 8008340:	d00f      	beq.n	8008362 <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008348:	f043 0201 	orr.w	r2, r3, #1
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	699a      	ldr	r2, [r3, #24]
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008360:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008368:	2b00      	cmp	r3, #0
 800836a:	d00f      	beq.n	800838c <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008372:	f043 0208 	orr.w	r2, r3, #8
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	699a      	ldr	r2, [r3, #24]
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800838a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2200      	movs	r2, #0
 8008390:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2200      	movs	r2, #0
 8008398:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 800839c:	bf00      	nop
 800839e:	3714      	adds	r7, #20
 80083a0:	46bd      	mov	sp, r7
 80083a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a6:	4770      	bx	lr

080083a8 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b084      	sub	sp, #16
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	60f8      	str	r0, [r7, #12]
 80083b0:	60b9      	str	r1, [r7, #8]
 80083b2:	603b      	str	r3, [r7, #0]
 80083b4:	4613      	mov	r3, r2
 80083b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80083b8:	e010      	b.n	80083dc <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80083ba:	f7fa facb 	bl	8002954 <HAL_GetTick>
 80083be:	4602      	mov	r2, r0
 80083c0:	69bb      	ldr	r3, [r7, #24]
 80083c2:	1ad3      	subs	r3, r2, r3
 80083c4:	683a      	ldr	r2, [r7, #0]
 80083c6:	429a      	cmp	r2, r3
 80083c8:	d803      	bhi.n	80083d2 <SPI_WaitOnFlagUntilTimeout+0x2a>
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083d0:	d102      	bne.n	80083d8 <SPI_WaitOnFlagUntilTimeout+0x30>
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d101      	bne.n	80083dc <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80083d8:	2303      	movs	r3, #3
 80083da:	e00f      	b.n	80083fc <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	695a      	ldr	r2, [r3, #20]
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	4013      	ands	r3, r2
 80083e6:	68ba      	ldr	r2, [r7, #8]
 80083e8:	429a      	cmp	r2, r3
 80083ea:	bf0c      	ite	eq
 80083ec:	2301      	moveq	r3, #1
 80083ee:	2300      	movne	r3, #0
 80083f0:	b2db      	uxtb	r3, r3
 80083f2:	461a      	mov	r2, r3
 80083f4:	79fb      	ldrb	r3, [r7, #7]
 80083f6:	429a      	cmp	r2, r3
 80083f8:	d0df      	beq.n	80083ba <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80083fa:	2300      	movs	r3, #0
}
 80083fc:	4618      	mov	r0, r3
 80083fe:	3710      	adds	r7, #16
 8008400:	46bd      	mov	sp, r7
 8008402:	bd80      	pop	{r7, pc}

08008404 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8008404:	b480      	push	{r7}
 8008406:	b085      	sub	sp, #20
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008410:	095b      	lsrs	r3, r3, #5
 8008412:	3301      	adds	r3, #1
 8008414:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	68db      	ldr	r3, [r3, #12]
 800841a:	3301      	adds	r3, #1
 800841c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	3307      	adds	r3, #7
 8008422:	08db      	lsrs	r3, r3, #3
 8008424:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8008426:	68bb      	ldr	r3, [r7, #8]
 8008428:	68fa      	ldr	r2, [r7, #12]
 800842a:	fb02 f303 	mul.w	r3, r2, r3
}
 800842e:	4618      	mov	r0, r3
 8008430:	3714      	adds	r7, #20
 8008432:	46bd      	mov	sp, r7
 8008434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008438:	4770      	bx	lr

0800843a <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 800843a:	b480      	push	{r7}
 800843c:	b083      	sub	sp, #12
 800843e:	af00      	add	r7, sp, #0
 8008440:	6078      	str	r0, [r7, #4]
 8008442:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 800844a:	b2db      	uxtb	r3, r3
 800844c:	2b01      	cmp	r3, #1
 800844e:	d12e      	bne.n	80084ae <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8008456:	2b01      	cmp	r3, #1
 8008458:	d101      	bne.n	800845e <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 800845a:	2302      	movs	r3, #2
 800845c:	e028      	b.n	80084b0 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2201      	movs	r2, #1
 8008462:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2202      	movs	r2, #2
 800846a:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	681a      	ldr	r2, [r3, #0]
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f022 0201 	bic.w	r2, r2, #1
 800847c:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	681a      	ldr	r2, [r3, #0]
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	685b      	ldr	r3, [r3, #4]
 8008486:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800848a:	ea42 0103 	orr.w	r1, r2, r3
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	689a      	ldr	r2, [r3, #8]
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	430a      	orrs	r2, r1
 8008498:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2201      	movs	r2, #1
 800849e:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2200      	movs	r2, #0
 80084a6:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80084aa:	2300      	movs	r3, #0
 80084ac:	e000      	b.n	80084b0 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 80084ae:	2301      	movs	r3, #1
  }
}
 80084b0:	4618      	mov	r0, r3
 80084b2:	370c      	adds	r7, #12
 80084b4:	46bd      	mov	sp, r7
 80084b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ba:	4770      	bx	lr

080084bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b082      	sub	sp, #8
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d101      	bne.n	80084ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80084ca:	2301      	movs	r3, #1
 80084cc:	e042      	b.n	8008554 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d106      	bne.n	80084e6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2200      	movs	r2, #0
 80084dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	f7f9 ffb3 	bl	800244c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2224      	movs	r2, #36	@ 0x24
 80084ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	681a      	ldr	r2, [r3, #0]
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f022 0201 	bic.w	r2, r2, #1
 80084fc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008502:	2b00      	cmp	r3, #0
 8008504:	d002      	beq.n	800850c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f000 fa64 	bl	80089d4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f000 f8b3 	bl	8008678 <UART_SetConfig>
 8008512:	4603      	mov	r3, r0
 8008514:	2b01      	cmp	r3, #1
 8008516:	d101      	bne.n	800851c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008518:	2301      	movs	r3, #1
 800851a:	e01b      	b.n	8008554 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	685a      	ldr	r2, [r3, #4]
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800852a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	689a      	ldr	r2, [r3, #8]
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800853a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	681a      	ldr	r2, [r3, #0]
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f042 0201 	orr.w	r2, r2, #1
 800854a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	f000 fae3 	bl	8008b18 <UART_CheckIdleState>
 8008552:	4603      	mov	r3, r0
}
 8008554:	4618      	mov	r0, r3
 8008556:	3708      	adds	r7, #8
 8008558:	46bd      	mov	sp, r7
 800855a:	bd80      	pop	{r7, pc}

0800855c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b08a      	sub	sp, #40	@ 0x28
 8008560:	af02      	add	r7, sp, #8
 8008562:	60f8      	str	r0, [r7, #12]
 8008564:	60b9      	str	r1, [r7, #8]
 8008566:	603b      	str	r3, [r7, #0]
 8008568:	4613      	mov	r3, r2
 800856a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008572:	2b20      	cmp	r3, #32
 8008574:	d17b      	bne.n	800866e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8008576:	68bb      	ldr	r3, [r7, #8]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d002      	beq.n	8008582 <HAL_UART_Transmit+0x26>
 800857c:	88fb      	ldrh	r3, [r7, #6]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d101      	bne.n	8008586 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008582:	2301      	movs	r3, #1
 8008584:	e074      	b.n	8008670 <HAL_UART_Transmit+0x114>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	2200      	movs	r2, #0
 800858a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	2221      	movs	r2, #33	@ 0x21
 8008592:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008596:	f7fa f9dd 	bl	8002954 <HAL_GetTick>
 800859a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	88fa      	ldrh	r2, [r7, #6]
 80085a0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	88fa      	ldrh	r2, [r7, #6]
 80085a8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	689b      	ldr	r3, [r3, #8]
 80085b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80085b4:	d108      	bne.n	80085c8 <HAL_UART_Transmit+0x6c>
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	691b      	ldr	r3, [r3, #16]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d104      	bne.n	80085c8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80085be:	2300      	movs	r3, #0
 80085c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	61bb      	str	r3, [r7, #24]
 80085c6:	e003      	b.n	80085d0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80085cc:	2300      	movs	r3, #0
 80085ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80085d0:	e030      	b.n	8008634 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	9300      	str	r3, [sp, #0]
 80085d6:	697b      	ldr	r3, [r7, #20]
 80085d8:	2200      	movs	r2, #0
 80085da:	2180      	movs	r1, #128	@ 0x80
 80085dc:	68f8      	ldr	r0, [r7, #12]
 80085de:	f000 fb45 	bl	8008c6c <UART_WaitOnFlagUntilTimeout>
 80085e2:	4603      	mov	r3, r0
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d005      	beq.n	80085f4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	2220      	movs	r2, #32
 80085ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80085f0:	2303      	movs	r3, #3
 80085f2:	e03d      	b.n	8008670 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80085f4:	69fb      	ldr	r3, [r7, #28]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d10b      	bne.n	8008612 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80085fa:	69bb      	ldr	r3, [r7, #24]
 80085fc:	881b      	ldrh	r3, [r3, #0]
 80085fe:	461a      	mov	r2, r3
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008608:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800860a:	69bb      	ldr	r3, [r7, #24]
 800860c:	3302      	adds	r3, #2
 800860e:	61bb      	str	r3, [r7, #24]
 8008610:	e007      	b.n	8008622 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008612:	69fb      	ldr	r3, [r7, #28]
 8008614:	781a      	ldrb	r2, [r3, #0]
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800861c:	69fb      	ldr	r3, [r7, #28]
 800861e:	3301      	adds	r3, #1
 8008620:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008628:	b29b      	uxth	r3, r3
 800862a:	3b01      	subs	r3, #1
 800862c:	b29a      	uxth	r2, r3
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800863a:	b29b      	uxth	r3, r3
 800863c:	2b00      	cmp	r3, #0
 800863e:	d1c8      	bne.n	80085d2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	9300      	str	r3, [sp, #0]
 8008644:	697b      	ldr	r3, [r7, #20]
 8008646:	2200      	movs	r2, #0
 8008648:	2140      	movs	r1, #64	@ 0x40
 800864a:	68f8      	ldr	r0, [r7, #12]
 800864c:	f000 fb0e 	bl	8008c6c <UART_WaitOnFlagUntilTimeout>
 8008650:	4603      	mov	r3, r0
 8008652:	2b00      	cmp	r3, #0
 8008654:	d005      	beq.n	8008662 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	2220      	movs	r2, #32
 800865a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800865e:	2303      	movs	r3, #3
 8008660:	e006      	b.n	8008670 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	2220      	movs	r2, #32
 8008666:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800866a:	2300      	movs	r3, #0
 800866c:	e000      	b.n	8008670 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800866e:	2302      	movs	r3, #2
  }
}
 8008670:	4618      	mov	r0, r3
 8008672:	3720      	adds	r7, #32
 8008674:	46bd      	mov	sp, r7
 8008676:	bd80      	pop	{r7, pc}

08008678 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008678:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800867c:	b094      	sub	sp, #80	@ 0x50
 800867e:	af00      	add	r7, sp, #0
 8008680:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008682:	2300      	movs	r3, #0
 8008684:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8008688:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800868a:	681a      	ldr	r2, [r3, #0]
 800868c:	4b83      	ldr	r3, [pc, #524]	@ (800889c <UART_SetConfig+0x224>)
 800868e:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008690:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008692:	689a      	ldr	r2, [r3, #8]
 8008694:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008696:	691b      	ldr	r3, [r3, #16]
 8008698:	431a      	orrs	r2, r3
 800869a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800869c:	695b      	ldr	r3, [r3, #20]
 800869e:	431a      	orrs	r2, r3
 80086a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086a2:	69db      	ldr	r3, [r3, #28]
 80086a4:	4313      	orrs	r3, r2
 80086a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80086a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	497c      	ldr	r1, [pc, #496]	@ (80088a0 <UART_SetConfig+0x228>)
 80086b0:	4019      	ands	r1, r3
 80086b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086b4:	681a      	ldr	r2, [r3, #0]
 80086b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80086b8:	430b      	orrs	r3, r1
 80086ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80086bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	685b      	ldr	r3, [r3, #4]
 80086c2:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80086c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086c8:	68d9      	ldr	r1, [r3, #12]
 80086ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086cc:	681a      	ldr	r2, [r3, #0]
 80086ce:	ea40 0301 	orr.w	r3, r0, r1
 80086d2:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80086d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086d6:	699b      	ldr	r3, [r3, #24]
 80086d8:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80086da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086dc:	681a      	ldr	r2, [r3, #0]
 80086de:	4b6f      	ldr	r3, [pc, #444]	@ (800889c <UART_SetConfig+0x224>)
 80086e0:	429a      	cmp	r2, r3
 80086e2:	d009      	beq.n	80086f8 <UART_SetConfig+0x80>
 80086e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086e6:	681a      	ldr	r2, [r3, #0]
 80086e8:	4b6e      	ldr	r3, [pc, #440]	@ (80088a4 <UART_SetConfig+0x22c>)
 80086ea:	429a      	cmp	r2, r3
 80086ec:	d004      	beq.n	80086f8 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80086ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086f0:	6a1a      	ldr	r2, [r3, #32]
 80086f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80086f4:	4313      	orrs	r3, r2
 80086f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80086f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	689b      	ldr	r3, [r3, #8]
 80086fe:	f023 416e 	bic.w	r1, r3, #3992977408	@ 0xee000000
 8008702:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
 8008706:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008708:	681a      	ldr	r2, [r3, #0]
 800870a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800870c:	430b      	orrs	r3, r1
 800870e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008710:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008716:	f023 000f 	bic.w	r0, r3, #15
 800871a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800871c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800871e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008720:	681a      	ldr	r2, [r3, #0]
 8008722:	ea40 0301 	orr.w	r3, r0, r1
 8008726:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008728:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800872a:	681a      	ldr	r2, [r3, #0]
 800872c:	4b5e      	ldr	r3, [pc, #376]	@ (80088a8 <UART_SetConfig+0x230>)
 800872e:	429a      	cmp	r2, r3
 8008730:	d102      	bne.n	8008738 <UART_SetConfig+0xc0>
 8008732:	2301      	movs	r3, #1
 8008734:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008736:	e032      	b.n	800879e <UART_SetConfig+0x126>
 8008738:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800873a:	681a      	ldr	r2, [r3, #0]
 800873c:	4b5b      	ldr	r3, [pc, #364]	@ (80088ac <UART_SetConfig+0x234>)
 800873e:	429a      	cmp	r2, r3
 8008740:	d102      	bne.n	8008748 <UART_SetConfig+0xd0>
 8008742:	2302      	movs	r3, #2
 8008744:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008746:	e02a      	b.n	800879e <UART_SetConfig+0x126>
 8008748:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800874a:	681a      	ldr	r2, [r3, #0]
 800874c:	4b58      	ldr	r3, [pc, #352]	@ (80088b0 <UART_SetConfig+0x238>)
 800874e:	429a      	cmp	r2, r3
 8008750:	d102      	bne.n	8008758 <UART_SetConfig+0xe0>
 8008752:	2304      	movs	r3, #4
 8008754:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008756:	e022      	b.n	800879e <UART_SetConfig+0x126>
 8008758:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800875a:	681a      	ldr	r2, [r3, #0]
 800875c:	4b55      	ldr	r3, [pc, #340]	@ (80088b4 <UART_SetConfig+0x23c>)
 800875e:	429a      	cmp	r2, r3
 8008760:	d102      	bne.n	8008768 <UART_SetConfig+0xf0>
 8008762:	2308      	movs	r3, #8
 8008764:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008766:	e01a      	b.n	800879e <UART_SetConfig+0x126>
 8008768:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800876a:	681a      	ldr	r2, [r3, #0]
 800876c:	4b52      	ldr	r3, [pc, #328]	@ (80088b8 <UART_SetConfig+0x240>)
 800876e:	429a      	cmp	r2, r3
 8008770:	d102      	bne.n	8008778 <UART_SetConfig+0x100>
 8008772:	2310      	movs	r3, #16
 8008774:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008776:	e012      	b.n	800879e <UART_SetConfig+0x126>
 8008778:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800877a:	681a      	ldr	r2, [r3, #0]
 800877c:	4b4f      	ldr	r3, [pc, #316]	@ (80088bc <UART_SetConfig+0x244>)
 800877e:	429a      	cmp	r2, r3
 8008780:	d103      	bne.n	800878a <UART_SetConfig+0x112>
 8008782:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8008786:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008788:	e009      	b.n	800879e <UART_SetConfig+0x126>
 800878a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800878c:	681a      	ldr	r2, [r3, #0]
 800878e:	4b43      	ldr	r3, [pc, #268]	@ (800889c <UART_SetConfig+0x224>)
 8008790:	429a      	cmp	r2, r3
 8008792:	d102      	bne.n	800879a <UART_SetConfig+0x122>
 8008794:	2320      	movs	r3, #32
 8008796:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008798:	e001      	b.n	800879e <UART_SetConfig+0x126>
 800879a:	2300      	movs	r3, #0
 800879c:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800879e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087a0:	681a      	ldr	r2, [r3, #0]
 80087a2:	4b3e      	ldr	r3, [pc, #248]	@ (800889c <UART_SetConfig+0x224>)
 80087a4:	429a      	cmp	r2, r3
 80087a6:	d005      	beq.n	80087b4 <UART_SetConfig+0x13c>
 80087a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087aa:	681a      	ldr	r2, [r3, #0]
 80087ac:	4b3d      	ldr	r3, [pc, #244]	@ (80088a4 <UART_SetConfig+0x22c>)
 80087ae:	429a      	cmp	r2, r3
 80087b0:	f040 8088 	bne.w	80088c4 <UART_SetConfig+0x24c>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80087b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80087b6:	2200      	movs	r2, #0
 80087b8:	623b      	str	r3, [r7, #32]
 80087ba:	627a      	str	r2, [r7, #36]	@ 0x24
 80087bc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80087c0:	f7fd fab8 	bl	8005d34 <HAL_RCCEx_GetPeriphCLKFreq>
 80087c4:	6438      	str	r0, [r7, #64]	@ 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 80087c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	f000 80eb 	beq.w	80089a4 <UART_SetConfig+0x32c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80087ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087d2:	4a3b      	ldr	r2, [pc, #236]	@ (80088c0 <UART_SetConfig+0x248>)
 80087d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80087d8:	461a      	mov	r2, r3
 80087da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80087dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80087e0:	637b      	str	r3, [r7, #52]	@ 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80087e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087e4:	685a      	ldr	r2, [r3, #4]
 80087e6:	4613      	mov	r3, r2
 80087e8:	005b      	lsls	r3, r3, #1
 80087ea:	4413      	add	r3, r2
 80087ec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80087ee:	429a      	cmp	r2, r3
 80087f0:	d305      	bcc.n	80087fe <UART_SetConfig+0x186>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80087f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087f4:	685b      	ldr	r3, [r3, #4]
 80087f6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80087f8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80087fa:	429a      	cmp	r2, r3
 80087fc:	d903      	bls.n	8008806 <UART_SetConfig+0x18e>
      {
        ret = HAL_ERROR;
 80087fe:	2301      	movs	r3, #1
 8008800:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8008804:	e048      	b.n	8008898 <UART_SetConfig+0x220>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008806:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008808:	2200      	movs	r2, #0
 800880a:	61bb      	str	r3, [r7, #24]
 800880c:	61fa      	str	r2, [r7, #28]
 800880e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008812:	4a2b      	ldr	r2, [pc, #172]	@ (80088c0 <UART_SetConfig+0x248>)
 8008814:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008818:	b29b      	uxth	r3, r3
 800881a:	2200      	movs	r2, #0
 800881c:	613b      	str	r3, [r7, #16]
 800881e:	617a      	str	r2, [r7, #20]
 8008820:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008824:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008828:	f7f8 f9ce 	bl	8000bc8 <__aeabi_uldivmod>
 800882c:	4602      	mov	r2, r0
 800882e:	460b      	mov	r3, r1
 8008830:	4610      	mov	r0, r2
 8008832:	4619      	mov	r1, r3
 8008834:	f04f 0200 	mov.w	r2, #0
 8008838:	f04f 0300 	mov.w	r3, #0
 800883c:	020b      	lsls	r3, r1, #8
 800883e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008842:	0202      	lsls	r2, r0, #8
 8008844:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008846:	6849      	ldr	r1, [r1, #4]
 8008848:	0849      	lsrs	r1, r1, #1
 800884a:	2000      	movs	r0, #0
 800884c:	460c      	mov	r4, r1
 800884e:	4605      	mov	r5, r0
 8008850:	eb12 0804 	adds.w	r8, r2, r4
 8008854:	eb43 0905 	adc.w	r9, r3, r5
 8008858:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800885a:	685b      	ldr	r3, [r3, #4]
 800885c:	2200      	movs	r2, #0
 800885e:	60bb      	str	r3, [r7, #8]
 8008860:	60fa      	str	r2, [r7, #12]
 8008862:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008866:	4640      	mov	r0, r8
 8008868:	4649      	mov	r1, r9
 800886a:	f7f8 f9ad 	bl	8000bc8 <__aeabi_uldivmod>
 800886e:	4602      	mov	r2, r0
 8008870:	460b      	mov	r3, r1
 8008872:	4613      	mov	r3, r2
 8008874:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008876:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008878:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800887c:	d308      	bcc.n	8008890 <UART_SetConfig+0x218>
 800887e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008880:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008884:	d204      	bcs.n	8008890 <UART_SetConfig+0x218>
        {
          huart->Instance->BRR = usartdiv;
 8008886:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800888c:	60da      	str	r2, [r3, #12]
 800888e:	e003      	b.n	8008898 <UART_SetConfig+0x220>
        }
        else
        {
          ret = HAL_ERROR;
 8008890:	2301      	movs	r3, #1
 8008892:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if (pclk != 0U)
 8008896:	e085      	b.n	80089a4 <UART_SetConfig+0x32c>
 8008898:	e084      	b.n	80089a4 <UART_SetConfig+0x32c>
 800889a:	bf00      	nop
 800889c:	46002400 	.word	0x46002400
 80088a0:	cfff69f3 	.word	0xcfff69f3
 80088a4:	56002400 	.word	0x56002400
 80088a8:	40013800 	.word	0x40013800
 80088ac:	40004400 	.word	0x40004400
 80088b0:	40004800 	.word	0x40004800
 80088b4:	40004c00 	.word	0x40004c00
 80088b8:	40005000 	.word	0x40005000
 80088bc:	40006400 	.word	0x40006400
 80088c0:	0800bfb8 	.word	0x0800bfb8
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80088c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088c6:	69db      	ldr	r3, [r3, #28]
 80088c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80088cc:	d13c      	bne.n	8008948 <UART_SetConfig+0x2d0>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 80088ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80088d0:	2200      	movs	r2, #0
 80088d2:	603b      	str	r3, [r7, #0]
 80088d4:	607a      	str	r2, [r7, #4]
 80088d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80088da:	f7fd fa2b 	bl	8005d34 <HAL_RCCEx_GetPeriphCLKFreq>
 80088de:	6438      	str	r0, [r7, #64]	@ 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80088e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d05e      	beq.n	80089a4 <UART_SetConfig+0x32c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80088e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088ea:	4a39      	ldr	r2, [pc, #228]	@ (80089d0 <UART_SetConfig+0x358>)
 80088ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80088f0:	461a      	mov	r2, r3
 80088f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80088f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80088f8:	005a      	lsls	r2, r3, #1
 80088fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088fc:	685b      	ldr	r3, [r3, #4]
 80088fe:	085b      	lsrs	r3, r3, #1
 8008900:	441a      	add	r2, r3
 8008902:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008904:	685b      	ldr	r3, [r3, #4]
 8008906:	fbb2 f3f3 	udiv	r3, r2, r3
 800890a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800890c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800890e:	2b0f      	cmp	r3, #15
 8008910:	d916      	bls.n	8008940 <UART_SetConfig+0x2c8>
 8008912:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008914:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008918:	d212      	bcs.n	8008940 <UART_SetConfig+0x2c8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800891a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800891c:	b29b      	uxth	r3, r3
 800891e:	f023 030f 	bic.w	r3, r3, #15
 8008922:	877b      	strh	r3, [r7, #58]	@ 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008924:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008926:	085b      	lsrs	r3, r3, #1
 8008928:	b29b      	uxth	r3, r3
 800892a:	f003 0307 	and.w	r3, r3, #7
 800892e:	b29a      	uxth	r2, r3
 8008930:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8008932:	4313      	orrs	r3, r2
 8008934:	877b      	strh	r3, [r7, #58]	@ 0x3a
        huart->Instance->BRR = brrtemp;
 8008936:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800893c:	60da      	str	r2, [r3, #12]
 800893e:	e031      	b.n	80089a4 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 8008940:	2301      	movs	r3, #1
 8008942:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8008946:	e02d      	b.n	80089a4 <UART_SetConfig+0x32c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008948:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800894a:	2200      	movs	r2, #0
 800894c:	469a      	mov	sl, r3
 800894e:	4693      	mov	fp, r2
 8008950:	4650      	mov	r0, sl
 8008952:	4659      	mov	r1, fp
 8008954:	f7fd f9ee 	bl	8005d34 <HAL_RCCEx_GetPeriphCLKFreq>
 8008958:	6438      	str	r0, [r7, #64]	@ 0x40

    if (pclk != 0U)
 800895a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800895c:	2b00      	cmp	r3, #0
 800895e:	d021      	beq.n	80089a4 <UART_SetConfig+0x32c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008960:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008964:	4a1a      	ldr	r2, [pc, #104]	@ (80089d0 <UART_SetConfig+0x358>)
 8008966:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800896a:	461a      	mov	r2, r3
 800896c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800896e:	fbb3 f2f2 	udiv	r2, r3, r2
 8008972:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008974:	685b      	ldr	r3, [r3, #4]
 8008976:	085b      	lsrs	r3, r3, #1
 8008978:	441a      	add	r2, r3
 800897a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800897c:	685b      	ldr	r3, [r3, #4]
 800897e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008982:	63fb      	str	r3, [r7, #60]	@ 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008984:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008986:	2b0f      	cmp	r3, #15
 8008988:	d909      	bls.n	800899e <UART_SetConfig+0x326>
 800898a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800898c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008990:	d205      	bcs.n	800899e <UART_SetConfig+0x326>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008992:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008994:	b29a      	uxth	r2, r3
 8008996:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	60da      	str	r2, [r3, #12]
 800899c:	e002      	b.n	80089a4 <UART_SetConfig+0x32c>
      }
      else
      {
        ret = HAL_ERROR;
 800899e:	2301      	movs	r3, #1
 80089a0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80089a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089a6:	2201      	movs	r2, #1
 80089a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80089ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089ae:	2201      	movs	r2, #1
 80089b0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80089b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089b6:	2200      	movs	r2, #0
 80089b8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80089ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089bc:	2200      	movs	r2, #0
 80089be:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80089c0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 80089c4:	4618      	mov	r0, r3
 80089c6:	3750      	adds	r7, #80	@ 0x50
 80089c8:	46bd      	mov	sp, r7
 80089ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80089ce:	bf00      	nop
 80089d0:	0800bfb8 	.word	0x0800bfb8

080089d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80089d4:	b480      	push	{r7}
 80089d6:	b083      	sub	sp, #12
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089e0:	f003 0308 	and.w	r3, r3, #8
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d00a      	beq.n	80089fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	685b      	ldr	r3, [r3, #4]
 80089ee:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	430a      	orrs	r2, r1
 80089fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a02:	f003 0301 	and.w	r3, r3, #1
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d00a      	beq.n	8008a20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	685b      	ldr	r3, [r3, #4]
 8008a10:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	430a      	orrs	r2, r1
 8008a1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a24:	f003 0302 	and.w	r3, r3, #2
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d00a      	beq.n	8008a42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	685b      	ldr	r3, [r3, #4]
 8008a32:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	430a      	orrs	r2, r1
 8008a40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a46:	f003 0304 	and.w	r3, r3, #4
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d00a      	beq.n	8008a64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	685b      	ldr	r3, [r3, #4]
 8008a54:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	430a      	orrs	r2, r1
 8008a62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a68:	f003 0310 	and.w	r3, r3, #16
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d00a      	beq.n	8008a86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	689b      	ldr	r3, [r3, #8]
 8008a76:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	430a      	orrs	r2, r1
 8008a84:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a8a:	f003 0320 	and.w	r3, r3, #32
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d00a      	beq.n	8008aa8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	689b      	ldr	r3, [r3, #8]
 8008a98:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	430a      	orrs	r2, r1
 8008aa6:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008aac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d01a      	beq.n	8008aea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	685b      	ldr	r3, [r3, #4]
 8008aba:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	430a      	orrs	r2, r1
 8008ac8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ace:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008ad2:	d10a      	bne.n	8008aea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	685b      	ldr	r3, [r3, #4]
 8008ada:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	430a      	orrs	r2, r1
 8008ae8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008aee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d00a      	beq.n	8008b0c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	685b      	ldr	r3, [r3, #4]
 8008afc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	430a      	orrs	r2, r1
 8008b0a:	605a      	str	r2, [r3, #4]
  }
}
 8008b0c:	bf00      	nop
 8008b0e:	370c      	adds	r7, #12
 8008b10:	46bd      	mov	sp, r7
 8008b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b16:	4770      	bx	lr

08008b18 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b098      	sub	sp, #96	@ 0x60
 8008b1c:	af02      	add	r7, sp, #8
 8008b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2200      	movs	r2, #0
 8008b24:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008b28:	f7f9 ff14 	bl	8002954 <HAL_GetTick>
 8008b2c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	f003 0308 	and.w	r3, r3, #8
 8008b38:	2b08      	cmp	r3, #8
 8008b3a:	d12f      	bne.n	8008b9c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008b3c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008b40:	9300      	str	r3, [sp, #0]
 8008b42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008b44:	2200      	movs	r2, #0
 8008b46:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008b4a:	6878      	ldr	r0, [r7, #4]
 8008b4c:	f000 f88e 	bl	8008c6c <UART_WaitOnFlagUntilTimeout>
 8008b50:	4603      	mov	r3, r0
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d022      	beq.n	8008b9c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b5e:	e853 3f00 	ldrex	r3, [r3]
 8008b62:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008b64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b66:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008b6a:	653b      	str	r3, [r7, #80]	@ 0x50
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	461a      	mov	r2, r3
 8008b72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008b74:	647b      	str	r3, [r7, #68]	@ 0x44
 8008b76:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b78:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008b7a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008b7c:	e841 2300 	strex	r3, r2, [r1]
 8008b80:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008b82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d1e6      	bne.n	8008b56 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2220      	movs	r2, #32
 8008b8c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2200      	movs	r2, #0
 8008b94:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008b98:	2303      	movs	r3, #3
 8008b9a:	e063      	b.n	8008c64 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	f003 0304 	and.w	r3, r3, #4
 8008ba6:	2b04      	cmp	r3, #4
 8008ba8:	d149      	bne.n	8008c3e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008baa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008bae:	9300      	str	r3, [sp, #0]
 8008bb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008bb8:	6878      	ldr	r0, [r7, #4]
 8008bba:	f000 f857 	bl	8008c6c <UART_WaitOnFlagUntilTimeout>
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d03c      	beq.n	8008c3e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bcc:	e853 3f00 	ldrex	r3, [r3]
 8008bd0:	623b      	str	r3, [r7, #32]
   return(result);
 8008bd2:	6a3b      	ldr	r3, [r7, #32]
 8008bd4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008bd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	461a      	mov	r2, r3
 8008be0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008be2:	633b      	str	r3, [r7, #48]	@ 0x30
 8008be4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008be6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008be8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008bea:	e841 2300 	strex	r3, r2, [r1]
 8008bee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008bf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d1e6      	bne.n	8008bc4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	3308      	adds	r3, #8
 8008bfc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bfe:	693b      	ldr	r3, [r7, #16]
 8008c00:	e853 3f00 	ldrex	r3, [r3]
 8008c04:	60fb      	str	r3, [r7, #12]
   return(result);
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	f023 0301 	bic.w	r3, r3, #1
 8008c0c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	3308      	adds	r3, #8
 8008c14:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008c16:	61fa      	str	r2, [r7, #28]
 8008c18:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c1a:	69b9      	ldr	r1, [r7, #24]
 8008c1c:	69fa      	ldr	r2, [r7, #28]
 8008c1e:	e841 2300 	strex	r3, r2, [r1]
 8008c22:	617b      	str	r3, [r7, #20]
   return(result);
 8008c24:	697b      	ldr	r3, [r7, #20]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d1e5      	bne.n	8008bf6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	2220      	movs	r2, #32
 8008c2e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2200      	movs	r2, #0
 8008c36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008c3a:	2303      	movs	r3, #3
 8008c3c:	e012      	b.n	8008c64 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2220      	movs	r2, #32
 8008c42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2220      	movs	r2, #32
 8008c4a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2200      	movs	r2, #0
 8008c52:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2200      	movs	r2, #0
 8008c58:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008c62:	2300      	movs	r3, #0
}
 8008c64:	4618      	mov	r0, r3
 8008c66:	3758      	adds	r7, #88	@ 0x58
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	bd80      	pop	{r7, pc}

08008c6c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b084      	sub	sp, #16
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	60f8      	str	r0, [r7, #12]
 8008c74:	60b9      	str	r1, [r7, #8]
 8008c76:	603b      	str	r3, [r7, #0]
 8008c78:	4613      	mov	r3, r2
 8008c7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c7c:	e04f      	b.n	8008d1e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008c7e:	69bb      	ldr	r3, [r7, #24]
 8008c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c84:	d04b      	beq.n	8008d1e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c86:	f7f9 fe65 	bl	8002954 <HAL_GetTick>
 8008c8a:	4602      	mov	r2, r0
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	1ad3      	subs	r3, r2, r3
 8008c90:	69ba      	ldr	r2, [r7, #24]
 8008c92:	429a      	cmp	r2, r3
 8008c94:	d302      	bcc.n	8008c9c <UART_WaitOnFlagUntilTimeout+0x30>
 8008c96:	69bb      	ldr	r3, [r7, #24]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d101      	bne.n	8008ca0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008c9c:	2303      	movs	r3, #3
 8008c9e:	e04e      	b.n	8008d3e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	f003 0304 	and.w	r3, r3, #4
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d037      	beq.n	8008d1e <UART_WaitOnFlagUntilTimeout+0xb2>
 8008cae:	68bb      	ldr	r3, [r7, #8]
 8008cb0:	2b80      	cmp	r3, #128	@ 0x80
 8008cb2:	d034      	beq.n	8008d1e <UART_WaitOnFlagUntilTimeout+0xb2>
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	2b40      	cmp	r3, #64	@ 0x40
 8008cb8:	d031      	beq.n	8008d1e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	69db      	ldr	r3, [r3, #28]
 8008cc0:	f003 0308 	and.w	r3, r3, #8
 8008cc4:	2b08      	cmp	r3, #8
 8008cc6:	d110      	bne.n	8008cea <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	2208      	movs	r2, #8
 8008cce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008cd0:	68f8      	ldr	r0, [r7, #12]
 8008cd2:	f000 f838 	bl	8008d46 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	2208      	movs	r2, #8
 8008cda:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008ce6:	2301      	movs	r3, #1
 8008ce8:	e029      	b.n	8008d3e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	69db      	ldr	r3, [r3, #28]
 8008cf0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008cf4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008cf8:	d111      	bne.n	8008d1e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008d02:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008d04:	68f8      	ldr	r0, [r7, #12]
 8008d06:	f000 f81e 	bl	8008d46 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	2220      	movs	r2, #32
 8008d0e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	2200      	movs	r2, #0
 8008d16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008d1a:	2303      	movs	r3, #3
 8008d1c:	e00f      	b.n	8008d3e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	69da      	ldr	r2, [r3, #28]
 8008d24:	68bb      	ldr	r3, [r7, #8]
 8008d26:	4013      	ands	r3, r2
 8008d28:	68ba      	ldr	r2, [r7, #8]
 8008d2a:	429a      	cmp	r2, r3
 8008d2c:	bf0c      	ite	eq
 8008d2e:	2301      	moveq	r3, #1
 8008d30:	2300      	movne	r3, #0
 8008d32:	b2db      	uxtb	r3, r3
 8008d34:	461a      	mov	r2, r3
 8008d36:	79fb      	ldrb	r3, [r7, #7]
 8008d38:	429a      	cmp	r2, r3
 8008d3a:	d0a0      	beq.n	8008c7e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008d3c:	2300      	movs	r3, #0
}
 8008d3e:	4618      	mov	r0, r3
 8008d40:	3710      	adds	r7, #16
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bd80      	pop	{r7, pc}

08008d46 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008d46:	b480      	push	{r7}
 8008d48:	b095      	sub	sp, #84	@ 0x54
 8008d4a:	af00      	add	r7, sp, #0
 8008d4c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d56:	e853 3f00 	ldrex	r3, [r3]
 8008d5a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008d5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d5e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008d62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	461a      	mov	r2, r3
 8008d6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008d6c:	643b      	str	r3, [r7, #64]	@ 0x40
 8008d6e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d70:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008d72:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008d74:	e841 2300 	strex	r3, r2, [r1]
 8008d78:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008d7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d1e6      	bne.n	8008d4e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	3308      	adds	r3, #8
 8008d86:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d88:	6a3b      	ldr	r3, [r7, #32]
 8008d8a:	e853 3f00 	ldrex	r3, [r3]
 8008d8e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008d90:	69fb      	ldr	r3, [r7, #28]
 8008d92:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008d96:	f023 0301 	bic.w	r3, r3, #1
 8008d9a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	3308      	adds	r3, #8
 8008da2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008da4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008da6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008da8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008daa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008dac:	e841 2300 	strex	r3, r2, [r1]
 8008db0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d1e3      	bne.n	8008d80 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008dbc:	2b01      	cmp	r3, #1
 8008dbe:	d118      	bne.n	8008df2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	e853 3f00 	ldrex	r3, [r3]
 8008dcc:	60bb      	str	r3, [r7, #8]
   return(result);
 8008dce:	68bb      	ldr	r3, [r7, #8]
 8008dd0:	f023 0310 	bic.w	r3, r3, #16
 8008dd4:	647b      	str	r3, [r7, #68]	@ 0x44
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	461a      	mov	r2, r3
 8008ddc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008dde:	61bb      	str	r3, [r7, #24]
 8008de0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008de2:	6979      	ldr	r1, [r7, #20]
 8008de4:	69ba      	ldr	r2, [r7, #24]
 8008de6:	e841 2300 	strex	r3, r2, [r1]
 8008dea:	613b      	str	r3, [r7, #16]
   return(result);
 8008dec:	693b      	ldr	r3, [r7, #16]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d1e6      	bne.n	8008dc0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	2220      	movs	r2, #32
 8008df6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2200      	movs	r2, #0
 8008e04:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008e06:	bf00      	nop
 8008e08:	3754      	adds	r7, #84	@ 0x54
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e10:	4770      	bx	lr

08008e12 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008e12:	b480      	push	{r7}
 8008e14:	b085      	sub	sp, #20
 8008e16:	af00      	add	r7, sp, #0
 8008e18:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008e20:	2b01      	cmp	r3, #1
 8008e22:	d101      	bne.n	8008e28 <HAL_UARTEx_DisableFifoMode+0x16>
 8008e24:	2302      	movs	r3, #2
 8008e26:	e027      	b.n	8008e78 <HAL_UARTEx_DisableFifoMode+0x66>
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2201      	movs	r2, #1
 8008e2c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2224      	movs	r2, #36	@ 0x24
 8008e34:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	681a      	ldr	r2, [r3, #0]
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	f022 0201 	bic.w	r2, r2, #1
 8008e4e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008e56:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	68fa      	ldr	r2, [r7, #12]
 8008e64:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	2220      	movs	r2, #32
 8008e6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	2200      	movs	r2, #0
 8008e72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008e76:	2300      	movs	r3, #0
}
 8008e78:	4618      	mov	r0, r3
 8008e7a:	3714      	adds	r7, #20
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e82:	4770      	bx	lr

08008e84 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b084      	sub	sp, #16
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
 8008e8c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008e94:	2b01      	cmp	r3, #1
 8008e96:	d101      	bne.n	8008e9c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008e98:	2302      	movs	r3, #2
 8008e9a:	e02d      	b.n	8008ef8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2201      	movs	r2, #1
 8008ea0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2224      	movs	r2, #36	@ 0x24
 8008ea8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	681a      	ldr	r2, [r3, #0]
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	f022 0201 	bic.w	r2, r2, #1
 8008ec2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	689b      	ldr	r3, [r3, #8]
 8008eca:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	683a      	ldr	r2, [r7, #0]
 8008ed4:	430a      	orrs	r2, r1
 8008ed6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008ed8:	6878      	ldr	r0, [r7, #4]
 8008eda:	f000 f84f 	bl	8008f7c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	68fa      	ldr	r2, [r7, #12]
 8008ee4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	2220      	movs	r2, #32
 8008eea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008ef6:	2300      	movs	r3, #0
}
 8008ef8:	4618      	mov	r0, r3
 8008efa:	3710      	adds	r7, #16
 8008efc:	46bd      	mov	sp, r7
 8008efe:	bd80      	pop	{r7, pc}

08008f00 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b084      	sub	sp, #16
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
 8008f08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008f10:	2b01      	cmp	r3, #1
 8008f12:	d101      	bne.n	8008f18 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008f14:	2302      	movs	r3, #2
 8008f16:	e02d      	b.n	8008f74 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2201      	movs	r2, #1
 8008f1c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2224      	movs	r2, #36	@ 0x24
 8008f24:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	681a      	ldr	r2, [r3, #0]
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	f022 0201 	bic.w	r2, r2, #1
 8008f3e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	689b      	ldr	r3, [r3, #8]
 8008f46:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	683a      	ldr	r2, [r7, #0]
 8008f50:	430a      	orrs	r2, r1
 8008f52:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008f54:	6878      	ldr	r0, [r7, #4]
 8008f56:	f000 f811 	bl	8008f7c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	68fa      	ldr	r2, [r7, #12]
 8008f60:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	2220      	movs	r2, #32
 8008f66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008f72:	2300      	movs	r3, #0
}
 8008f74:	4618      	mov	r0, r3
 8008f76:	3710      	adds	r7, #16
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	bd80      	pop	{r7, pc}

08008f7c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008f7c:	b480      	push	{r7}
 8008f7e:	b085      	sub	sp, #20
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d108      	bne.n	8008f9e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2201      	movs	r2, #1
 8008f90:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2201      	movs	r2, #1
 8008f98:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008f9c:	e031      	b.n	8009002 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008f9e:	2308      	movs	r3, #8
 8008fa0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008fa2:	2308      	movs	r3, #8
 8008fa4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	689b      	ldr	r3, [r3, #8]
 8008fac:	0e5b      	lsrs	r3, r3, #25
 8008fae:	b2db      	uxtb	r3, r3
 8008fb0:	f003 0307 	and.w	r3, r3, #7
 8008fb4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	689b      	ldr	r3, [r3, #8]
 8008fbc:	0f5b      	lsrs	r3, r3, #29
 8008fbe:	b2db      	uxtb	r3, r3
 8008fc0:	f003 0307 	and.w	r3, r3, #7
 8008fc4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008fc6:	7bbb      	ldrb	r3, [r7, #14]
 8008fc8:	7b3a      	ldrb	r2, [r7, #12]
 8008fca:	4911      	ldr	r1, [pc, #68]	@ (8009010 <UARTEx_SetNbDataToProcess+0x94>)
 8008fcc:	5c8a      	ldrb	r2, [r1, r2]
 8008fce:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008fd2:	7b3a      	ldrb	r2, [r7, #12]
 8008fd4:	490f      	ldr	r1, [pc, #60]	@ (8009014 <UARTEx_SetNbDataToProcess+0x98>)
 8008fd6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008fd8:	fb93 f3f2 	sdiv	r3, r3, r2
 8008fdc:	b29a      	uxth	r2, r3
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008fe4:	7bfb      	ldrb	r3, [r7, #15]
 8008fe6:	7b7a      	ldrb	r2, [r7, #13]
 8008fe8:	4909      	ldr	r1, [pc, #36]	@ (8009010 <UARTEx_SetNbDataToProcess+0x94>)
 8008fea:	5c8a      	ldrb	r2, [r1, r2]
 8008fec:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008ff0:	7b7a      	ldrb	r2, [r7, #13]
 8008ff2:	4908      	ldr	r1, [pc, #32]	@ (8009014 <UARTEx_SetNbDataToProcess+0x98>)
 8008ff4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008ff6:	fb93 f3f2 	sdiv	r3, r3, r2
 8008ffa:	b29a      	uxth	r2, r3
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009002:	bf00      	nop
 8009004:	3714      	adds	r7, #20
 8009006:	46bd      	mov	sp, r7
 8009008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900c:	4770      	bx	lr
 800900e:	bf00      	nop
 8009010:	0800bfd0 	.word	0x0800bfd0
 8009014:	0800bfd8 	.word	0x0800bfd8

08009018 <__cvt>:
 8009018:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800901c:	ec57 6b10 	vmov	r6, r7, d0
 8009020:	2f00      	cmp	r7, #0
 8009022:	460c      	mov	r4, r1
 8009024:	4619      	mov	r1, r3
 8009026:	463b      	mov	r3, r7
 8009028:	bfb4      	ite	lt
 800902a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800902e:	2300      	movge	r3, #0
 8009030:	4691      	mov	r9, r2
 8009032:	bfbf      	itttt	lt
 8009034:	4632      	movlt	r2, r6
 8009036:	461f      	movlt	r7, r3
 8009038:	232d      	movlt	r3, #45	@ 0x2d
 800903a:	4616      	movlt	r6, r2
 800903c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009040:	700b      	strb	r3, [r1, #0]
 8009042:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009044:	f023 0820 	bic.w	r8, r3, #32
 8009048:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800904c:	d005      	beq.n	800905a <__cvt+0x42>
 800904e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009052:	d100      	bne.n	8009056 <__cvt+0x3e>
 8009054:	3401      	adds	r4, #1
 8009056:	2102      	movs	r1, #2
 8009058:	e000      	b.n	800905c <__cvt+0x44>
 800905a:	2103      	movs	r1, #3
 800905c:	ab03      	add	r3, sp, #12
 800905e:	4622      	mov	r2, r4
 8009060:	9301      	str	r3, [sp, #4]
 8009062:	ab02      	add	r3, sp, #8
 8009064:	ec47 6b10 	vmov	d0, r6, r7
 8009068:	9300      	str	r3, [sp, #0]
 800906a:	4653      	mov	r3, sl
 800906c:	f000 ff60 	bl	8009f30 <_dtoa_r>
 8009070:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009074:	4605      	mov	r5, r0
 8009076:	d119      	bne.n	80090ac <__cvt+0x94>
 8009078:	f019 0f01 	tst.w	r9, #1
 800907c:	d00e      	beq.n	800909c <__cvt+0x84>
 800907e:	eb00 0904 	add.w	r9, r0, r4
 8009082:	2200      	movs	r2, #0
 8009084:	2300      	movs	r3, #0
 8009086:	4630      	mov	r0, r6
 8009088:	4639      	mov	r1, r7
 800908a:	f7f7 fd2d 	bl	8000ae8 <__aeabi_dcmpeq>
 800908e:	b108      	cbz	r0, 8009094 <__cvt+0x7c>
 8009090:	f8cd 900c 	str.w	r9, [sp, #12]
 8009094:	2230      	movs	r2, #48	@ 0x30
 8009096:	9b03      	ldr	r3, [sp, #12]
 8009098:	454b      	cmp	r3, r9
 800909a:	d31e      	bcc.n	80090da <__cvt+0xc2>
 800909c:	9b03      	ldr	r3, [sp, #12]
 800909e:	4628      	mov	r0, r5
 80090a0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80090a2:	1b5b      	subs	r3, r3, r5
 80090a4:	6013      	str	r3, [r2, #0]
 80090a6:	b004      	add	sp, #16
 80090a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090ac:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80090b0:	eb00 0904 	add.w	r9, r0, r4
 80090b4:	d1e5      	bne.n	8009082 <__cvt+0x6a>
 80090b6:	7803      	ldrb	r3, [r0, #0]
 80090b8:	2b30      	cmp	r3, #48	@ 0x30
 80090ba:	d10a      	bne.n	80090d2 <__cvt+0xba>
 80090bc:	2200      	movs	r2, #0
 80090be:	2300      	movs	r3, #0
 80090c0:	4630      	mov	r0, r6
 80090c2:	4639      	mov	r1, r7
 80090c4:	f7f7 fd10 	bl	8000ae8 <__aeabi_dcmpeq>
 80090c8:	b918      	cbnz	r0, 80090d2 <__cvt+0xba>
 80090ca:	f1c4 0401 	rsb	r4, r4, #1
 80090ce:	f8ca 4000 	str.w	r4, [sl]
 80090d2:	f8da 3000 	ldr.w	r3, [sl]
 80090d6:	4499      	add	r9, r3
 80090d8:	e7d3      	b.n	8009082 <__cvt+0x6a>
 80090da:	1c59      	adds	r1, r3, #1
 80090dc:	9103      	str	r1, [sp, #12]
 80090de:	701a      	strb	r2, [r3, #0]
 80090e0:	e7d9      	b.n	8009096 <__cvt+0x7e>

080090e2 <__exponent>:
 80090e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80090e4:	2900      	cmp	r1, #0
 80090e6:	7002      	strb	r2, [r0, #0]
 80090e8:	bfba      	itte	lt
 80090ea:	4249      	neglt	r1, r1
 80090ec:	232d      	movlt	r3, #45	@ 0x2d
 80090ee:	232b      	movge	r3, #43	@ 0x2b
 80090f0:	2909      	cmp	r1, #9
 80090f2:	7043      	strb	r3, [r0, #1]
 80090f4:	dd28      	ble.n	8009148 <__exponent+0x66>
 80090f6:	f10d 0307 	add.w	r3, sp, #7
 80090fa:	270a      	movs	r7, #10
 80090fc:	461d      	mov	r5, r3
 80090fe:	461a      	mov	r2, r3
 8009100:	3b01      	subs	r3, #1
 8009102:	fbb1 f6f7 	udiv	r6, r1, r7
 8009106:	fb07 1416 	mls	r4, r7, r6, r1
 800910a:	3430      	adds	r4, #48	@ 0x30
 800910c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009110:	460c      	mov	r4, r1
 8009112:	4631      	mov	r1, r6
 8009114:	2c63      	cmp	r4, #99	@ 0x63
 8009116:	dcf2      	bgt.n	80090fe <__exponent+0x1c>
 8009118:	3130      	adds	r1, #48	@ 0x30
 800911a:	1e94      	subs	r4, r2, #2
 800911c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009120:	1c41      	adds	r1, r0, #1
 8009122:	4623      	mov	r3, r4
 8009124:	42ab      	cmp	r3, r5
 8009126:	d30a      	bcc.n	800913e <__exponent+0x5c>
 8009128:	f10d 0309 	add.w	r3, sp, #9
 800912c:	1a9b      	subs	r3, r3, r2
 800912e:	42ac      	cmp	r4, r5
 8009130:	bf88      	it	hi
 8009132:	2300      	movhi	r3, #0
 8009134:	3302      	adds	r3, #2
 8009136:	4403      	add	r3, r0
 8009138:	1a18      	subs	r0, r3, r0
 800913a:	b003      	add	sp, #12
 800913c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800913e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009142:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009146:	e7ed      	b.n	8009124 <__exponent+0x42>
 8009148:	2330      	movs	r3, #48	@ 0x30
 800914a:	3130      	adds	r1, #48	@ 0x30
 800914c:	7083      	strb	r3, [r0, #2]
 800914e:	1d03      	adds	r3, r0, #4
 8009150:	70c1      	strb	r1, [r0, #3]
 8009152:	e7f1      	b.n	8009138 <__exponent+0x56>

08009154 <_printf_float>:
 8009154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009158:	b08d      	sub	sp, #52	@ 0x34
 800915a:	460c      	mov	r4, r1
 800915c:	4616      	mov	r6, r2
 800915e:	461f      	mov	r7, r3
 8009160:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8009164:	4605      	mov	r5, r0
 8009166:	f000 fdc1 	bl	8009cec <_localeconv_r>
 800916a:	6803      	ldr	r3, [r0, #0]
 800916c:	4618      	mov	r0, r3
 800916e:	9304      	str	r3, [sp, #16]
 8009170:	f7f7 f88e 	bl	8000290 <strlen>
 8009174:	2300      	movs	r3, #0
 8009176:	9005      	str	r0, [sp, #20]
 8009178:	930a      	str	r3, [sp, #40]	@ 0x28
 800917a:	f8d8 3000 	ldr.w	r3, [r8]
 800917e:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009182:	3307      	adds	r3, #7
 8009184:	f8d4 b000 	ldr.w	fp, [r4]
 8009188:	f023 0307 	bic.w	r3, r3, #7
 800918c:	f103 0208 	add.w	r2, r3, #8
 8009190:	f8c8 2000 	str.w	r2, [r8]
 8009194:	f04f 32ff 	mov.w	r2, #4294967295
 8009198:	e9d3 8900 	ldrd	r8, r9, [r3]
 800919c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80091a0:	f8cd 8018 	str.w	r8, [sp, #24]
 80091a4:	9307      	str	r3, [sp, #28]
 80091a6:	4b9d      	ldr	r3, [pc, #628]	@ (800941c <_printf_float+0x2c8>)
 80091a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80091ac:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80091b0:	f7f7 fccc 	bl	8000b4c <__aeabi_dcmpun>
 80091b4:	bb70      	cbnz	r0, 8009214 <_printf_float+0xc0>
 80091b6:	f04f 32ff 	mov.w	r2, #4294967295
 80091ba:	4b98      	ldr	r3, [pc, #608]	@ (800941c <_printf_float+0x2c8>)
 80091bc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80091c0:	f7f7 fca6 	bl	8000b10 <__aeabi_dcmple>
 80091c4:	bb30      	cbnz	r0, 8009214 <_printf_float+0xc0>
 80091c6:	2200      	movs	r2, #0
 80091c8:	2300      	movs	r3, #0
 80091ca:	4640      	mov	r0, r8
 80091cc:	4649      	mov	r1, r9
 80091ce:	f7f7 fc95 	bl	8000afc <__aeabi_dcmplt>
 80091d2:	b110      	cbz	r0, 80091da <_printf_float+0x86>
 80091d4:	232d      	movs	r3, #45	@ 0x2d
 80091d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80091da:	4a91      	ldr	r2, [pc, #580]	@ (8009420 <_printf_float+0x2cc>)
 80091dc:	4b91      	ldr	r3, [pc, #580]	@ (8009424 <_printf_float+0x2d0>)
 80091de:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80091e2:	bf8c      	ite	hi
 80091e4:	4690      	movhi	r8, r2
 80091e6:	4698      	movls	r8, r3
 80091e8:	2303      	movs	r3, #3
 80091ea:	f04f 0900 	mov.w	r9, #0
 80091ee:	6123      	str	r3, [r4, #16]
 80091f0:	f02b 0304 	bic.w	r3, fp, #4
 80091f4:	6023      	str	r3, [r4, #0]
 80091f6:	4633      	mov	r3, r6
 80091f8:	aa0b      	add	r2, sp, #44	@ 0x2c
 80091fa:	4621      	mov	r1, r4
 80091fc:	4628      	mov	r0, r5
 80091fe:	9700      	str	r7, [sp, #0]
 8009200:	f000 f9d2 	bl	80095a8 <_printf_common>
 8009204:	3001      	adds	r0, #1
 8009206:	f040 808d 	bne.w	8009324 <_printf_float+0x1d0>
 800920a:	f04f 30ff 	mov.w	r0, #4294967295
 800920e:	b00d      	add	sp, #52	@ 0x34
 8009210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009214:	4642      	mov	r2, r8
 8009216:	464b      	mov	r3, r9
 8009218:	4640      	mov	r0, r8
 800921a:	4649      	mov	r1, r9
 800921c:	f7f7 fc96 	bl	8000b4c <__aeabi_dcmpun>
 8009220:	b140      	cbz	r0, 8009234 <_printf_float+0xe0>
 8009222:	464b      	mov	r3, r9
 8009224:	4a80      	ldr	r2, [pc, #512]	@ (8009428 <_printf_float+0x2d4>)
 8009226:	2b00      	cmp	r3, #0
 8009228:	bfbc      	itt	lt
 800922a:	232d      	movlt	r3, #45	@ 0x2d
 800922c:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009230:	4b7e      	ldr	r3, [pc, #504]	@ (800942c <_printf_float+0x2d8>)
 8009232:	e7d4      	b.n	80091de <_printf_float+0x8a>
 8009234:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8009238:	6863      	ldr	r3, [r4, #4]
 800923a:	9206      	str	r2, [sp, #24]
 800923c:	1c5a      	adds	r2, r3, #1
 800923e:	d13b      	bne.n	80092b8 <_printf_float+0x164>
 8009240:	2306      	movs	r3, #6
 8009242:	6063      	str	r3, [r4, #4]
 8009244:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8009248:	2300      	movs	r3, #0
 800924a:	4628      	mov	r0, r5
 800924c:	6022      	str	r2, [r4, #0]
 800924e:	9303      	str	r3, [sp, #12]
 8009250:	ab0a      	add	r3, sp, #40	@ 0x28
 8009252:	e9cd a301 	strd	sl, r3, [sp, #4]
 8009256:	ab09      	add	r3, sp, #36	@ 0x24
 8009258:	ec49 8b10 	vmov	d0, r8, r9
 800925c:	9300      	str	r3, [sp, #0]
 800925e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009262:	6861      	ldr	r1, [r4, #4]
 8009264:	f7ff fed8 	bl	8009018 <__cvt>
 8009268:	9b06      	ldr	r3, [sp, #24]
 800926a:	4680      	mov	r8, r0
 800926c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800926e:	2b47      	cmp	r3, #71	@ 0x47
 8009270:	d129      	bne.n	80092c6 <_printf_float+0x172>
 8009272:	1cc8      	adds	r0, r1, #3
 8009274:	db02      	blt.n	800927c <_printf_float+0x128>
 8009276:	6863      	ldr	r3, [r4, #4]
 8009278:	4299      	cmp	r1, r3
 800927a:	dd41      	ble.n	8009300 <_printf_float+0x1ac>
 800927c:	f1aa 0a02 	sub.w	sl, sl, #2
 8009280:	fa5f fa8a 	uxtb.w	sl, sl
 8009284:	3901      	subs	r1, #1
 8009286:	4652      	mov	r2, sl
 8009288:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800928c:	9109      	str	r1, [sp, #36]	@ 0x24
 800928e:	f7ff ff28 	bl	80090e2 <__exponent>
 8009292:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009294:	4681      	mov	r9, r0
 8009296:	1813      	adds	r3, r2, r0
 8009298:	2a01      	cmp	r2, #1
 800929a:	6123      	str	r3, [r4, #16]
 800929c:	dc02      	bgt.n	80092a4 <_printf_float+0x150>
 800929e:	6822      	ldr	r2, [r4, #0]
 80092a0:	07d2      	lsls	r2, r2, #31
 80092a2:	d501      	bpl.n	80092a8 <_printf_float+0x154>
 80092a4:	3301      	adds	r3, #1
 80092a6:	6123      	str	r3, [r4, #16]
 80092a8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d0a2      	beq.n	80091f6 <_printf_float+0xa2>
 80092b0:	232d      	movs	r3, #45	@ 0x2d
 80092b2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80092b6:	e79e      	b.n	80091f6 <_printf_float+0xa2>
 80092b8:	9a06      	ldr	r2, [sp, #24]
 80092ba:	2a47      	cmp	r2, #71	@ 0x47
 80092bc:	d1c2      	bne.n	8009244 <_printf_float+0xf0>
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d1c0      	bne.n	8009244 <_printf_float+0xf0>
 80092c2:	2301      	movs	r3, #1
 80092c4:	e7bd      	b.n	8009242 <_printf_float+0xee>
 80092c6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80092ca:	d9db      	bls.n	8009284 <_printf_float+0x130>
 80092cc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80092d0:	d118      	bne.n	8009304 <_printf_float+0x1b0>
 80092d2:	2900      	cmp	r1, #0
 80092d4:	6863      	ldr	r3, [r4, #4]
 80092d6:	dd0b      	ble.n	80092f0 <_printf_float+0x19c>
 80092d8:	6121      	str	r1, [r4, #16]
 80092da:	b913      	cbnz	r3, 80092e2 <_printf_float+0x18e>
 80092dc:	6822      	ldr	r2, [r4, #0]
 80092de:	07d0      	lsls	r0, r2, #31
 80092e0:	d502      	bpl.n	80092e8 <_printf_float+0x194>
 80092e2:	3301      	adds	r3, #1
 80092e4:	440b      	add	r3, r1
 80092e6:	6123      	str	r3, [r4, #16]
 80092e8:	f04f 0900 	mov.w	r9, #0
 80092ec:	65a1      	str	r1, [r4, #88]	@ 0x58
 80092ee:	e7db      	b.n	80092a8 <_printf_float+0x154>
 80092f0:	b913      	cbnz	r3, 80092f8 <_printf_float+0x1a4>
 80092f2:	6822      	ldr	r2, [r4, #0]
 80092f4:	07d2      	lsls	r2, r2, #31
 80092f6:	d501      	bpl.n	80092fc <_printf_float+0x1a8>
 80092f8:	3302      	adds	r3, #2
 80092fa:	e7f4      	b.n	80092e6 <_printf_float+0x192>
 80092fc:	2301      	movs	r3, #1
 80092fe:	e7f2      	b.n	80092e6 <_printf_float+0x192>
 8009300:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009304:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009306:	4299      	cmp	r1, r3
 8009308:	db05      	blt.n	8009316 <_printf_float+0x1c2>
 800930a:	6823      	ldr	r3, [r4, #0]
 800930c:	6121      	str	r1, [r4, #16]
 800930e:	07d8      	lsls	r0, r3, #31
 8009310:	d5ea      	bpl.n	80092e8 <_printf_float+0x194>
 8009312:	1c4b      	adds	r3, r1, #1
 8009314:	e7e7      	b.n	80092e6 <_printf_float+0x192>
 8009316:	2900      	cmp	r1, #0
 8009318:	bfd4      	ite	le
 800931a:	f1c1 0202 	rsble	r2, r1, #2
 800931e:	2201      	movgt	r2, #1
 8009320:	4413      	add	r3, r2
 8009322:	e7e0      	b.n	80092e6 <_printf_float+0x192>
 8009324:	6823      	ldr	r3, [r4, #0]
 8009326:	055a      	lsls	r2, r3, #21
 8009328:	d407      	bmi.n	800933a <_printf_float+0x1e6>
 800932a:	6923      	ldr	r3, [r4, #16]
 800932c:	4642      	mov	r2, r8
 800932e:	4631      	mov	r1, r6
 8009330:	4628      	mov	r0, r5
 8009332:	47b8      	blx	r7
 8009334:	3001      	adds	r0, #1
 8009336:	d12b      	bne.n	8009390 <_printf_float+0x23c>
 8009338:	e767      	b.n	800920a <_printf_float+0xb6>
 800933a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800933e:	f240 80dd 	bls.w	80094fc <_printf_float+0x3a8>
 8009342:	2200      	movs	r2, #0
 8009344:	2300      	movs	r3, #0
 8009346:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800934a:	f7f7 fbcd 	bl	8000ae8 <__aeabi_dcmpeq>
 800934e:	2800      	cmp	r0, #0
 8009350:	d033      	beq.n	80093ba <_printf_float+0x266>
 8009352:	2301      	movs	r3, #1
 8009354:	4a36      	ldr	r2, [pc, #216]	@ (8009430 <_printf_float+0x2dc>)
 8009356:	4631      	mov	r1, r6
 8009358:	4628      	mov	r0, r5
 800935a:	47b8      	blx	r7
 800935c:	3001      	adds	r0, #1
 800935e:	f43f af54 	beq.w	800920a <_printf_float+0xb6>
 8009362:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009366:	4543      	cmp	r3, r8
 8009368:	db02      	blt.n	8009370 <_printf_float+0x21c>
 800936a:	6823      	ldr	r3, [r4, #0]
 800936c:	07d8      	lsls	r0, r3, #31
 800936e:	d50f      	bpl.n	8009390 <_printf_float+0x23c>
 8009370:	4631      	mov	r1, r6
 8009372:	4628      	mov	r0, r5
 8009374:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009378:	47b8      	blx	r7
 800937a:	3001      	adds	r0, #1
 800937c:	f43f af45 	beq.w	800920a <_printf_float+0xb6>
 8009380:	f04f 0900 	mov.w	r9, #0
 8009384:	f108 38ff 	add.w	r8, r8, #4294967295
 8009388:	f104 0a1a 	add.w	sl, r4, #26
 800938c:	45c8      	cmp	r8, r9
 800938e:	dc09      	bgt.n	80093a4 <_printf_float+0x250>
 8009390:	6823      	ldr	r3, [r4, #0]
 8009392:	079b      	lsls	r3, r3, #30
 8009394:	f100 8103 	bmi.w	800959e <_printf_float+0x44a>
 8009398:	68e0      	ldr	r0, [r4, #12]
 800939a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800939c:	4298      	cmp	r0, r3
 800939e:	bfb8      	it	lt
 80093a0:	4618      	movlt	r0, r3
 80093a2:	e734      	b.n	800920e <_printf_float+0xba>
 80093a4:	2301      	movs	r3, #1
 80093a6:	4652      	mov	r2, sl
 80093a8:	4631      	mov	r1, r6
 80093aa:	4628      	mov	r0, r5
 80093ac:	47b8      	blx	r7
 80093ae:	3001      	adds	r0, #1
 80093b0:	f43f af2b 	beq.w	800920a <_printf_float+0xb6>
 80093b4:	f109 0901 	add.w	r9, r9, #1
 80093b8:	e7e8      	b.n	800938c <_printf_float+0x238>
 80093ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093bc:	2b00      	cmp	r3, #0
 80093be:	dc39      	bgt.n	8009434 <_printf_float+0x2e0>
 80093c0:	2301      	movs	r3, #1
 80093c2:	4a1b      	ldr	r2, [pc, #108]	@ (8009430 <_printf_float+0x2dc>)
 80093c4:	4631      	mov	r1, r6
 80093c6:	4628      	mov	r0, r5
 80093c8:	47b8      	blx	r7
 80093ca:	3001      	adds	r0, #1
 80093cc:	f43f af1d 	beq.w	800920a <_printf_float+0xb6>
 80093d0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80093d4:	ea59 0303 	orrs.w	r3, r9, r3
 80093d8:	d102      	bne.n	80093e0 <_printf_float+0x28c>
 80093da:	6823      	ldr	r3, [r4, #0]
 80093dc:	07d9      	lsls	r1, r3, #31
 80093de:	d5d7      	bpl.n	8009390 <_printf_float+0x23c>
 80093e0:	4631      	mov	r1, r6
 80093e2:	4628      	mov	r0, r5
 80093e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80093e8:	47b8      	blx	r7
 80093ea:	3001      	adds	r0, #1
 80093ec:	f43f af0d 	beq.w	800920a <_printf_float+0xb6>
 80093f0:	f04f 0a00 	mov.w	sl, #0
 80093f4:	f104 0b1a 	add.w	fp, r4, #26
 80093f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093fa:	425b      	negs	r3, r3
 80093fc:	4553      	cmp	r3, sl
 80093fe:	dc01      	bgt.n	8009404 <_printf_float+0x2b0>
 8009400:	464b      	mov	r3, r9
 8009402:	e793      	b.n	800932c <_printf_float+0x1d8>
 8009404:	2301      	movs	r3, #1
 8009406:	465a      	mov	r2, fp
 8009408:	4631      	mov	r1, r6
 800940a:	4628      	mov	r0, r5
 800940c:	47b8      	blx	r7
 800940e:	3001      	adds	r0, #1
 8009410:	f43f aefb 	beq.w	800920a <_printf_float+0xb6>
 8009414:	f10a 0a01 	add.w	sl, sl, #1
 8009418:	e7ee      	b.n	80093f8 <_printf_float+0x2a4>
 800941a:	bf00      	nop
 800941c:	7fefffff 	.word	0x7fefffff
 8009420:	0800bfe4 	.word	0x0800bfe4
 8009424:	0800bfe0 	.word	0x0800bfe0
 8009428:	0800bfec 	.word	0x0800bfec
 800942c:	0800bfe8 	.word	0x0800bfe8
 8009430:	0800bff0 	.word	0x0800bff0
 8009434:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009436:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800943a:	4553      	cmp	r3, sl
 800943c:	bfa8      	it	ge
 800943e:	4653      	movge	r3, sl
 8009440:	2b00      	cmp	r3, #0
 8009442:	4699      	mov	r9, r3
 8009444:	dc36      	bgt.n	80094b4 <_printf_float+0x360>
 8009446:	f04f 0b00 	mov.w	fp, #0
 800944a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800944e:	f104 021a 	add.w	r2, r4, #26
 8009452:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009454:	9306      	str	r3, [sp, #24]
 8009456:	eba3 0309 	sub.w	r3, r3, r9
 800945a:	455b      	cmp	r3, fp
 800945c:	dc31      	bgt.n	80094c2 <_printf_float+0x36e>
 800945e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009460:	459a      	cmp	sl, r3
 8009462:	dc3a      	bgt.n	80094da <_printf_float+0x386>
 8009464:	6823      	ldr	r3, [r4, #0]
 8009466:	07da      	lsls	r2, r3, #31
 8009468:	d437      	bmi.n	80094da <_printf_float+0x386>
 800946a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800946c:	ebaa 0903 	sub.w	r9, sl, r3
 8009470:	9b06      	ldr	r3, [sp, #24]
 8009472:	ebaa 0303 	sub.w	r3, sl, r3
 8009476:	4599      	cmp	r9, r3
 8009478:	bfa8      	it	ge
 800947a:	4699      	movge	r9, r3
 800947c:	f1b9 0f00 	cmp.w	r9, #0
 8009480:	dc33      	bgt.n	80094ea <_printf_float+0x396>
 8009482:	f04f 0800 	mov.w	r8, #0
 8009486:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800948a:	f104 0b1a 	add.w	fp, r4, #26
 800948e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009490:	ebaa 0303 	sub.w	r3, sl, r3
 8009494:	eba3 0309 	sub.w	r3, r3, r9
 8009498:	4543      	cmp	r3, r8
 800949a:	f77f af79 	ble.w	8009390 <_printf_float+0x23c>
 800949e:	2301      	movs	r3, #1
 80094a0:	465a      	mov	r2, fp
 80094a2:	4631      	mov	r1, r6
 80094a4:	4628      	mov	r0, r5
 80094a6:	47b8      	blx	r7
 80094a8:	3001      	adds	r0, #1
 80094aa:	f43f aeae 	beq.w	800920a <_printf_float+0xb6>
 80094ae:	f108 0801 	add.w	r8, r8, #1
 80094b2:	e7ec      	b.n	800948e <_printf_float+0x33a>
 80094b4:	4642      	mov	r2, r8
 80094b6:	4631      	mov	r1, r6
 80094b8:	4628      	mov	r0, r5
 80094ba:	47b8      	blx	r7
 80094bc:	3001      	adds	r0, #1
 80094be:	d1c2      	bne.n	8009446 <_printf_float+0x2f2>
 80094c0:	e6a3      	b.n	800920a <_printf_float+0xb6>
 80094c2:	2301      	movs	r3, #1
 80094c4:	4631      	mov	r1, r6
 80094c6:	4628      	mov	r0, r5
 80094c8:	9206      	str	r2, [sp, #24]
 80094ca:	47b8      	blx	r7
 80094cc:	3001      	adds	r0, #1
 80094ce:	f43f ae9c 	beq.w	800920a <_printf_float+0xb6>
 80094d2:	f10b 0b01 	add.w	fp, fp, #1
 80094d6:	9a06      	ldr	r2, [sp, #24]
 80094d8:	e7bb      	b.n	8009452 <_printf_float+0x2fe>
 80094da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80094de:	4631      	mov	r1, r6
 80094e0:	4628      	mov	r0, r5
 80094e2:	47b8      	blx	r7
 80094e4:	3001      	adds	r0, #1
 80094e6:	d1c0      	bne.n	800946a <_printf_float+0x316>
 80094e8:	e68f      	b.n	800920a <_printf_float+0xb6>
 80094ea:	9a06      	ldr	r2, [sp, #24]
 80094ec:	464b      	mov	r3, r9
 80094ee:	4631      	mov	r1, r6
 80094f0:	4628      	mov	r0, r5
 80094f2:	4442      	add	r2, r8
 80094f4:	47b8      	blx	r7
 80094f6:	3001      	adds	r0, #1
 80094f8:	d1c3      	bne.n	8009482 <_printf_float+0x32e>
 80094fa:	e686      	b.n	800920a <_printf_float+0xb6>
 80094fc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009500:	f1ba 0f01 	cmp.w	sl, #1
 8009504:	dc01      	bgt.n	800950a <_printf_float+0x3b6>
 8009506:	07db      	lsls	r3, r3, #31
 8009508:	d536      	bpl.n	8009578 <_printf_float+0x424>
 800950a:	2301      	movs	r3, #1
 800950c:	4642      	mov	r2, r8
 800950e:	4631      	mov	r1, r6
 8009510:	4628      	mov	r0, r5
 8009512:	47b8      	blx	r7
 8009514:	3001      	adds	r0, #1
 8009516:	f43f ae78 	beq.w	800920a <_printf_float+0xb6>
 800951a:	4631      	mov	r1, r6
 800951c:	4628      	mov	r0, r5
 800951e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009522:	47b8      	blx	r7
 8009524:	3001      	adds	r0, #1
 8009526:	f43f ae70 	beq.w	800920a <_printf_float+0xb6>
 800952a:	2200      	movs	r2, #0
 800952c:	2300      	movs	r3, #0
 800952e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009532:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009536:	f7f7 fad7 	bl	8000ae8 <__aeabi_dcmpeq>
 800953a:	b9c0      	cbnz	r0, 800956e <_printf_float+0x41a>
 800953c:	4653      	mov	r3, sl
 800953e:	f108 0201 	add.w	r2, r8, #1
 8009542:	4631      	mov	r1, r6
 8009544:	4628      	mov	r0, r5
 8009546:	47b8      	blx	r7
 8009548:	3001      	adds	r0, #1
 800954a:	d10c      	bne.n	8009566 <_printf_float+0x412>
 800954c:	e65d      	b.n	800920a <_printf_float+0xb6>
 800954e:	2301      	movs	r3, #1
 8009550:	465a      	mov	r2, fp
 8009552:	4631      	mov	r1, r6
 8009554:	4628      	mov	r0, r5
 8009556:	47b8      	blx	r7
 8009558:	3001      	adds	r0, #1
 800955a:	f43f ae56 	beq.w	800920a <_printf_float+0xb6>
 800955e:	f108 0801 	add.w	r8, r8, #1
 8009562:	45d0      	cmp	r8, sl
 8009564:	dbf3      	blt.n	800954e <_printf_float+0x3fa>
 8009566:	464b      	mov	r3, r9
 8009568:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800956c:	e6df      	b.n	800932e <_printf_float+0x1da>
 800956e:	f04f 0800 	mov.w	r8, #0
 8009572:	f104 0b1a 	add.w	fp, r4, #26
 8009576:	e7f4      	b.n	8009562 <_printf_float+0x40e>
 8009578:	2301      	movs	r3, #1
 800957a:	4642      	mov	r2, r8
 800957c:	e7e1      	b.n	8009542 <_printf_float+0x3ee>
 800957e:	2301      	movs	r3, #1
 8009580:	464a      	mov	r2, r9
 8009582:	4631      	mov	r1, r6
 8009584:	4628      	mov	r0, r5
 8009586:	47b8      	blx	r7
 8009588:	3001      	adds	r0, #1
 800958a:	f43f ae3e 	beq.w	800920a <_printf_float+0xb6>
 800958e:	f108 0801 	add.w	r8, r8, #1
 8009592:	68e3      	ldr	r3, [r4, #12]
 8009594:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009596:	1a5b      	subs	r3, r3, r1
 8009598:	4543      	cmp	r3, r8
 800959a:	dcf0      	bgt.n	800957e <_printf_float+0x42a>
 800959c:	e6fc      	b.n	8009398 <_printf_float+0x244>
 800959e:	f04f 0800 	mov.w	r8, #0
 80095a2:	f104 0919 	add.w	r9, r4, #25
 80095a6:	e7f4      	b.n	8009592 <_printf_float+0x43e>

080095a8 <_printf_common>:
 80095a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095ac:	4616      	mov	r6, r2
 80095ae:	4698      	mov	r8, r3
 80095b0:	688a      	ldr	r2, [r1, #8]
 80095b2:	4607      	mov	r7, r0
 80095b4:	690b      	ldr	r3, [r1, #16]
 80095b6:	460c      	mov	r4, r1
 80095b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80095bc:	4293      	cmp	r3, r2
 80095be:	bfb8      	it	lt
 80095c0:	4613      	movlt	r3, r2
 80095c2:	6033      	str	r3, [r6, #0]
 80095c4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80095c8:	b10a      	cbz	r2, 80095ce <_printf_common+0x26>
 80095ca:	3301      	adds	r3, #1
 80095cc:	6033      	str	r3, [r6, #0]
 80095ce:	6823      	ldr	r3, [r4, #0]
 80095d0:	0699      	lsls	r1, r3, #26
 80095d2:	bf42      	ittt	mi
 80095d4:	6833      	ldrmi	r3, [r6, #0]
 80095d6:	3302      	addmi	r3, #2
 80095d8:	6033      	strmi	r3, [r6, #0]
 80095da:	6825      	ldr	r5, [r4, #0]
 80095dc:	f015 0506 	ands.w	r5, r5, #6
 80095e0:	d106      	bne.n	80095f0 <_printf_common+0x48>
 80095e2:	f104 0a19 	add.w	sl, r4, #25
 80095e6:	68e3      	ldr	r3, [r4, #12]
 80095e8:	6832      	ldr	r2, [r6, #0]
 80095ea:	1a9b      	subs	r3, r3, r2
 80095ec:	42ab      	cmp	r3, r5
 80095ee:	dc2b      	bgt.n	8009648 <_printf_common+0xa0>
 80095f0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80095f4:	6822      	ldr	r2, [r4, #0]
 80095f6:	3b00      	subs	r3, #0
 80095f8:	bf18      	it	ne
 80095fa:	2301      	movne	r3, #1
 80095fc:	0692      	lsls	r2, r2, #26
 80095fe:	d430      	bmi.n	8009662 <_printf_common+0xba>
 8009600:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009604:	4641      	mov	r1, r8
 8009606:	4638      	mov	r0, r7
 8009608:	47c8      	blx	r9
 800960a:	3001      	adds	r0, #1
 800960c:	d023      	beq.n	8009656 <_printf_common+0xae>
 800960e:	6823      	ldr	r3, [r4, #0]
 8009610:	341a      	adds	r4, #26
 8009612:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8009616:	f003 0306 	and.w	r3, r3, #6
 800961a:	2b04      	cmp	r3, #4
 800961c:	bf0a      	itet	eq
 800961e:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8009622:	2500      	movne	r5, #0
 8009624:	6833      	ldreq	r3, [r6, #0]
 8009626:	f04f 0600 	mov.w	r6, #0
 800962a:	bf08      	it	eq
 800962c:	1aed      	subeq	r5, r5, r3
 800962e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8009632:	bf08      	it	eq
 8009634:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009638:	4293      	cmp	r3, r2
 800963a:	bfc4      	itt	gt
 800963c:	1a9b      	subgt	r3, r3, r2
 800963e:	18ed      	addgt	r5, r5, r3
 8009640:	42b5      	cmp	r5, r6
 8009642:	d11a      	bne.n	800967a <_printf_common+0xd2>
 8009644:	2000      	movs	r0, #0
 8009646:	e008      	b.n	800965a <_printf_common+0xb2>
 8009648:	2301      	movs	r3, #1
 800964a:	4652      	mov	r2, sl
 800964c:	4641      	mov	r1, r8
 800964e:	4638      	mov	r0, r7
 8009650:	47c8      	blx	r9
 8009652:	3001      	adds	r0, #1
 8009654:	d103      	bne.n	800965e <_printf_common+0xb6>
 8009656:	f04f 30ff 	mov.w	r0, #4294967295
 800965a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800965e:	3501      	adds	r5, #1
 8009660:	e7c1      	b.n	80095e6 <_printf_common+0x3e>
 8009662:	18e1      	adds	r1, r4, r3
 8009664:	1c5a      	adds	r2, r3, #1
 8009666:	2030      	movs	r0, #48	@ 0x30
 8009668:	3302      	adds	r3, #2
 800966a:	4422      	add	r2, r4
 800966c:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009670:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009674:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009678:	e7c2      	b.n	8009600 <_printf_common+0x58>
 800967a:	2301      	movs	r3, #1
 800967c:	4622      	mov	r2, r4
 800967e:	4641      	mov	r1, r8
 8009680:	4638      	mov	r0, r7
 8009682:	47c8      	blx	r9
 8009684:	3001      	adds	r0, #1
 8009686:	d0e6      	beq.n	8009656 <_printf_common+0xae>
 8009688:	3601      	adds	r6, #1
 800968a:	e7d9      	b.n	8009640 <_printf_common+0x98>

0800968c <_printf_i>:
 800968c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009690:	7e0f      	ldrb	r7, [r1, #24]
 8009692:	4691      	mov	r9, r2
 8009694:	4680      	mov	r8, r0
 8009696:	460c      	mov	r4, r1
 8009698:	2f78      	cmp	r7, #120	@ 0x78
 800969a:	469a      	mov	sl, r3
 800969c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800969e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80096a2:	d807      	bhi.n	80096b4 <_printf_i+0x28>
 80096a4:	2f62      	cmp	r7, #98	@ 0x62
 80096a6:	d80a      	bhi.n	80096be <_printf_i+0x32>
 80096a8:	2f00      	cmp	r7, #0
 80096aa:	f000 80d1 	beq.w	8009850 <_printf_i+0x1c4>
 80096ae:	2f58      	cmp	r7, #88	@ 0x58
 80096b0:	f000 80b8 	beq.w	8009824 <_printf_i+0x198>
 80096b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80096b8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80096bc:	e03a      	b.n	8009734 <_printf_i+0xa8>
 80096be:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80096c2:	2b15      	cmp	r3, #21
 80096c4:	d8f6      	bhi.n	80096b4 <_printf_i+0x28>
 80096c6:	a101      	add	r1, pc, #4	@ (adr r1, 80096cc <_printf_i+0x40>)
 80096c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80096cc:	08009725 	.word	0x08009725
 80096d0:	08009739 	.word	0x08009739
 80096d4:	080096b5 	.word	0x080096b5
 80096d8:	080096b5 	.word	0x080096b5
 80096dc:	080096b5 	.word	0x080096b5
 80096e0:	080096b5 	.word	0x080096b5
 80096e4:	08009739 	.word	0x08009739
 80096e8:	080096b5 	.word	0x080096b5
 80096ec:	080096b5 	.word	0x080096b5
 80096f0:	080096b5 	.word	0x080096b5
 80096f4:	080096b5 	.word	0x080096b5
 80096f8:	08009837 	.word	0x08009837
 80096fc:	08009763 	.word	0x08009763
 8009700:	080097f1 	.word	0x080097f1
 8009704:	080096b5 	.word	0x080096b5
 8009708:	080096b5 	.word	0x080096b5
 800970c:	08009859 	.word	0x08009859
 8009710:	080096b5 	.word	0x080096b5
 8009714:	08009763 	.word	0x08009763
 8009718:	080096b5 	.word	0x080096b5
 800971c:	080096b5 	.word	0x080096b5
 8009720:	080097f9 	.word	0x080097f9
 8009724:	6833      	ldr	r3, [r6, #0]
 8009726:	1d1a      	adds	r2, r3, #4
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	6032      	str	r2, [r6, #0]
 800972c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009730:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009734:	2301      	movs	r3, #1
 8009736:	e09c      	b.n	8009872 <_printf_i+0x1e6>
 8009738:	6833      	ldr	r3, [r6, #0]
 800973a:	6820      	ldr	r0, [r4, #0]
 800973c:	1d19      	adds	r1, r3, #4
 800973e:	6031      	str	r1, [r6, #0]
 8009740:	0606      	lsls	r6, r0, #24
 8009742:	d501      	bpl.n	8009748 <_printf_i+0xbc>
 8009744:	681d      	ldr	r5, [r3, #0]
 8009746:	e003      	b.n	8009750 <_printf_i+0xc4>
 8009748:	0645      	lsls	r5, r0, #25
 800974a:	d5fb      	bpl.n	8009744 <_printf_i+0xb8>
 800974c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009750:	2d00      	cmp	r5, #0
 8009752:	da03      	bge.n	800975c <_printf_i+0xd0>
 8009754:	232d      	movs	r3, #45	@ 0x2d
 8009756:	426d      	negs	r5, r5
 8009758:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800975c:	4858      	ldr	r0, [pc, #352]	@ (80098c0 <_printf_i+0x234>)
 800975e:	230a      	movs	r3, #10
 8009760:	e011      	b.n	8009786 <_printf_i+0xfa>
 8009762:	6821      	ldr	r1, [r4, #0]
 8009764:	6833      	ldr	r3, [r6, #0]
 8009766:	0608      	lsls	r0, r1, #24
 8009768:	f853 5b04 	ldr.w	r5, [r3], #4
 800976c:	d402      	bmi.n	8009774 <_printf_i+0xe8>
 800976e:	0649      	lsls	r1, r1, #25
 8009770:	bf48      	it	mi
 8009772:	b2ad      	uxthmi	r5, r5
 8009774:	2f6f      	cmp	r7, #111	@ 0x6f
 8009776:	6033      	str	r3, [r6, #0]
 8009778:	4851      	ldr	r0, [pc, #324]	@ (80098c0 <_printf_i+0x234>)
 800977a:	bf14      	ite	ne
 800977c:	230a      	movne	r3, #10
 800977e:	2308      	moveq	r3, #8
 8009780:	2100      	movs	r1, #0
 8009782:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009786:	6866      	ldr	r6, [r4, #4]
 8009788:	2e00      	cmp	r6, #0
 800978a:	60a6      	str	r6, [r4, #8]
 800978c:	db05      	blt.n	800979a <_printf_i+0x10e>
 800978e:	6821      	ldr	r1, [r4, #0]
 8009790:	432e      	orrs	r6, r5
 8009792:	f021 0104 	bic.w	r1, r1, #4
 8009796:	6021      	str	r1, [r4, #0]
 8009798:	d04b      	beq.n	8009832 <_printf_i+0x1a6>
 800979a:	4616      	mov	r6, r2
 800979c:	fbb5 f1f3 	udiv	r1, r5, r3
 80097a0:	fb03 5711 	mls	r7, r3, r1, r5
 80097a4:	5dc7      	ldrb	r7, [r0, r7]
 80097a6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80097aa:	462f      	mov	r7, r5
 80097ac:	460d      	mov	r5, r1
 80097ae:	42bb      	cmp	r3, r7
 80097b0:	d9f4      	bls.n	800979c <_printf_i+0x110>
 80097b2:	2b08      	cmp	r3, #8
 80097b4:	d10b      	bne.n	80097ce <_printf_i+0x142>
 80097b6:	6823      	ldr	r3, [r4, #0]
 80097b8:	07df      	lsls	r7, r3, #31
 80097ba:	d508      	bpl.n	80097ce <_printf_i+0x142>
 80097bc:	6923      	ldr	r3, [r4, #16]
 80097be:	6861      	ldr	r1, [r4, #4]
 80097c0:	4299      	cmp	r1, r3
 80097c2:	bfde      	ittt	le
 80097c4:	2330      	movle	r3, #48	@ 0x30
 80097c6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80097ca:	f106 36ff 	addle.w	r6, r6, #4294967295
 80097ce:	1b92      	subs	r2, r2, r6
 80097d0:	6122      	str	r2, [r4, #16]
 80097d2:	464b      	mov	r3, r9
 80097d4:	aa03      	add	r2, sp, #12
 80097d6:	4621      	mov	r1, r4
 80097d8:	4640      	mov	r0, r8
 80097da:	f8cd a000 	str.w	sl, [sp]
 80097de:	f7ff fee3 	bl	80095a8 <_printf_common>
 80097e2:	3001      	adds	r0, #1
 80097e4:	d14a      	bne.n	800987c <_printf_i+0x1f0>
 80097e6:	f04f 30ff 	mov.w	r0, #4294967295
 80097ea:	b004      	add	sp, #16
 80097ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097f0:	6823      	ldr	r3, [r4, #0]
 80097f2:	f043 0320 	orr.w	r3, r3, #32
 80097f6:	6023      	str	r3, [r4, #0]
 80097f8:	2778      	movs	r7, #120	@ 0x78
 80097fa:	4832      	ldr	r0, [pc, #200]	@ (80098c4 <_printf_i+0x238>)
 80097fc:	6823      	ldr	r3, [r4, #0]
 80097fe:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009802:	061f      	lsls	r7, r3, #24
 8009804:	6831      	ldr	r1, [r6, #0]
 8009806:	f851 5b04 	ldr.w	r5, [r1], #4
 800980a:	d402      	bmi.n	8009812 <_printf_i+0x186>
 800980c:	065f      	lsls	r7, r3, #25
 800980e:	bf48      	it	mi
 8009810:	b2ad      	uxthmi	r5, r5
 8009812:	6031      	str	r1, [r6, #0]
 8009814:	07d9      	lsls	r1, r3, #31
 8009816:	bf44      	itt	mi
 8009818:	f043 0320 	orrmi.w	r3, r3, #32
 800981c:	6023      	strmi	r3, [r4, #0]
 800981e:	b11d      	cbz	r5, 8009828 <_printf_i+0x19c>
 8009820:	2310      	movs	r3, #16
 8009822:	e7ad      	b.n	8009780 <_printf_i+0xf4>
 8009824:	4826      	ldr	r0, [pc, #152]	@ (80098c0 <_printf_i+0x234>)
 8009826:	e7e9      	b.n	80097fc <_printf_i+0x170>
 8009828:	6823      	ldr	r3, [r4, #0]
 800982a:	f023 0320 	bic.w	r3, r3, #32
 800982e:	6023      	str	r3, [r4, #0]
 8009830:	e7f6      	b.n	8009820 <_printf_i+0x194>
 8009832:	4616      	mov	r6, r2
 8009834:	e7bd      	b.n	80097b2 <_printf_i+0x126>
 8009836:	6833      	ldr	r3, [r6, #0]
 8009838:	6825      	ldr	r5, [r4, #0]
 800983a:	1d18      	adds	r0, r3, #4
 800983c:	6961      	ldr	r1, [r4, #20]
 800983e:	6030      	str	r0, [r6, #0]
 8009840:	062e      	lsls	r6, r5, #24
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	d501      	bpl.n	800984a <_printf_i+0x1be>
 8009846:	6019      	str	r1, [r3, #0]
 8009848:	e002      	b.n	8009850 <_printf_i+0x1c4>
 800984a:	0668      	lsls	r0, r5, #25
 800984c:	d5fb      	bpl.n	8009846 <_printf_i+0x1ba>
 800984e:	8019      	strh	r1, [r3, #0]
 8009850:	2300      	movs	r3, #0
 8009852:	4616      	mov	r6, r2
 8009854:	6123      	str	r3, [r4, #16]
 8009856:	e7bc      	b.n	80097d2 <_printf_i+0x146>
 8009858:	6833      	ldr	r3, [r6, #0]
 800985a:	2100      	movs	r1, #0
 800985c:	1d1a      	adds	r2, r3, #4
 800985e:	6032      	str	r2, [r6, #0]
 8009860:	681e      	ldr	r6, [r3, #0]
 8009862:	6862      	ldr	r2, [r4, #4]
 8009864:	4630      	mov	r0, r6
 8009866:	f000 fab8 	bl	8009dda <memchr>
 800986a:	b108      	cbz	r0, 8009870 <_printf_i+0x1e4>
 800986c:	1b80      	subs	r0, r0, r6
 800986e:	6060      	str	r0, [r4, #4]
 8009870:	6863      	ldr	r3, [r4, #4]
 8009872:	6123      	str	r3, [r4, #16]
 8009874:	2300      	movs	r3, #0
 8009876:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800987a:	e7aa      	b.n	80097d2 <_printf_i+0x146>
 800987c:	6923      	ldr	r3, [r4, #16]
 800987e:	4632      	mov	r2, r6
 8009880:	4649      	mov	r1, r9
 8009882:	4640      	mov	r0, r8
 8009884:	47d0      	blx	sl
 8009886:	3001      	adds	r0, #1
 8009888:	d0ad      	beq.n	80097e6 <_printf_i+0x15a>
 800988a:	6823      	ldr	r3, [r4, #0]
 800988c:	079b      	lsls	r3, r3, #30
 800988e:	d413      	bmi.n	80098b8 <_printf_i+0x22c>
 8009890:	68e0      	ldr	r0, [r4, #12]
 8009892:	9b03      	ldr	r3, [sp, #12]
 8009894:	4298      	cmp	r0, r3
 8009896:	bfb8      	it	lt
 8009898:	4618      	movlt	r0, r3
 800989a:	e7a6      	b.n	80097ea <_printf_i+0x15e>
 800989c:	2301      	movs	r3, #1
 800989e:	4632      	mov	r2, r6
 80098a0:	4649      	mov	r1, r9
 80098a2:	4640      	mov	r0, r8
 80098a4:	47d0      	blx	sl
 80098a6:	3001      	adds	r0, #1
 80098a8:	d09d      	beq.n	80097e6 <_printf_i+0x15a>
 80098aa:	3501      	adds	r5, #1
 80098ac:	68e3      	ldr	r3, [r4, #12]
 80098ae:	9903      	ldr	r1, [sp, #12]
 80098b0:	1a5b      	subs	r3, r3, r1
 80098b2:	42ab      	cmp	r3, r5
 80098b4:	dcf2      	bgt.n	800989c <_printf_i+0x210>
 80098b6:	e7eb      	b.n	8009890 <_printf_i+0x204>
 80098b8:	2500      	movs	r5, #0
 80098ba:	f104 0619 	add.w	r6, r4, #25
 80098be:	e7f5      	b.n	80098ac <_printf_i+0x220>
 80098c0:	0800bff2 	.word	0x0800bff2
 80098c4:	0800c003 	.word	0x0800c003

080098c8 <std>:
 80098c8:	2300      	movs	r3, #0
 80098ca:	b510      	push	{r4, lr}
 80098cc:	4604      	mov	r4, r0
 80098ce:	6083      	str	r3, [r0, #8]
 80098d0:	8181      	strh	r1, [r0, #12]
 80098d2:	4619      	mov	r1, r3
 80098d4:	6643      	str	r3, [r0, #100]	@ 0x64
 80098d6:	81c2      	strh	r2, [r0, #14]
 80098d8:	2208      	movs	r2, #8
 80098da:	6183      	str	r3, [r0, #24]
 80098dc:	e9c0 3300 	strd	r3, r3, [r0]
 80098e0:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80098e4:	305c      	adds	r0, #92	@ 0x5c
 80098e6:	f000 f9f9 	bl	8009cdc <memset>
 80098ea:	4b0d      	ldr	r3, [pc, #52]	@ (8009920 <std+0x58>)
 80098ec:	6224      	str	r4, [r4, #32]
 80098ee:	6263      	str	r3, [r4, #36]	@ 0x24
 80098f0:	4b0c      	ldr	r3, [pc, #48]	@ (8009924 <std+0x5c>)
 80098f2:	62a3      	str	r3, [r4, #40]	@ 0x28
 80098f4:	4b0c      	ldr	r3, [pc, #48]	@ (8009928 <std+0x60>)
 80098f6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80098f8:	4b0c      	ldr	r3, [pc, #48]	@ (800992c <std+0x64>)
 80098fa:	6323      	str	r3, [r4, #48]	@ 0x30
 80098fc:	4b0c      	ldr	r3, [pc, #48]	@ (8009930 <std+0x68>)
 80098fe:	429c      	cmp	r4, r3
 8009900:	d006      	beq.n	8009910 <std+0x48>
 8009902:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009906:	4294      	cmp	r4, r2
 8009908:	d002      	beq.n	8009910 <std+0x48>
 800990a:	33d0      	adds	r3, #208	@ 0xd0
 800990c:	429c      	cmp	r4, r3
 800990e:	d105      	bne.n	800991c <std+0x54>
 8009910:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009914:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009918:	f000 ba5c 	b.w	8009dd4 <__retarget_lock_init_recursive>
 800991c:	bd10      	pop	{r4, pc}
 800991e:	bf00      	nop
 8009920:	08009b2d 	.word	0x08009b2d
 8009924:	08009b4f 	.word	0x08009b4f
 8009928:	08009b87 	.word	0x08009b87
 800992c:	08009bab 	.word	0x08009bab
 8009930:	200003f0 	.word	0x200003f0

08009934 <stdio_exit_handler>:
 8009934:	4a02      	ldr	r2, [pc, #8]	@ (8009940 <stdio_exit_handler+0xc>)
 8009936:	4903      	ldr	r1, [pc, #12]	@ (8009944 <stdio_exit_handler+0x10>)
 8009938:	4803      	ldr	r0, [pc, #12]	@ (8009948 <stdio_exit_handler+0x14>)
 800993a:	f000 b869 	b.w	8009a10 <_fwalk_sglue>
 800993e:	bf00      	nop
 8009940:	20000014 	.word	0x20000014
 8009944:	0800b765 	.word	0x0800b765
 8009948:	20000024 	.word	0x20000024

0800994c <cleanup_stdio>:
 800994c:	6841      	ldr	r1, [r0, #4]
 800994e:	4b0c      	ldr	r3, [pc, #48]	@ (8009980 <cleanup_stdio+0x34>)
 8009950:	4299      	cmp	r1, r3
 8009952:	b510      	push	{r4, lr}
 8009954:	4604      	mov	r4, r0
 8009956:	d001      	beq.n	800995c <cleanup_stdio+0x10>
 8009958:	f001 ff04 	bl	800b764 <_fflush_r>
 800995c:	68a1      	ldr	r1, [r4, #8]
 800995e:	4b09      	ldr	r3, [pc, #36]	@ (8009984 <cleanup_stdio+0x38>)
 8009960:	4299      	cmp	r1, r3
 8009962:	d002      	beq.n	800996a <cleanup_stdio+0x1e>
 8009964:	4620      	mov	r0, r4
 8009966:	f001 fefd 	bl	800b764 <_fflush_r>
 800996a:	68e1      	ldr	r1, [r4, #12]
 800996c:	4b06      	ldr	r3, [pc, #24]	@ (8009988 <cleanup_stdio+0x3c>)
 800996e:	4299      	cmp	r1, r3
 8009970:	d004      	beq.n	800997c <cleanup_stdio+0x30>
 8009972:	4620      	mov	r0, r4
 8009974:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009978:	f001 bef4 	b.w	800b764 <_fflush_r>
 800997c:	bd10      	pop	{r4, pc}
 800997e:	bf00      	nop
 8009980:	200003f0 	.word	0x200003f0
 8009984:	20000458 	.word	0x20000458
 8009988:	200004c0 	.word	0x200004c0

0800998c <global_stdio_init.part.0>:
 800998c:	b510      	push	{r4, lr}
 800998e:	4b0b      	ldr	r3, [pc, #44]	@ (80099bc <global_stdio_init.part.0+0x30>)
 8009990:	2104      	movs	r1, #4
 8009992:	4c0b      	ldr	r4, [pc, #44]	@ (80099c0 <global_stdio_init.part.0+0x34>)
 8009994:	4a0b      	ldr	r2, [pc, #44]	@ (80099c4 <global_stdio_init.part.0+0x38>)
 8009996:	4620      	mov	r0, r4
 8009998:	601a      	str	r2, [r3, #0]
 800999a:	2200      	movs	r2, #0
 800999c:	f7ff ff94 	bl	80098c8 <std>
 80099a0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80099a4:	2201      	movs	r2, #1
 80099a6:	2109      	movs	r1, #9
 80099a8:	f7ff ff8e 	bl	80098c8 <std>
 80099ac:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80099b0:	2202      	movs	r2, #2
 80099b2:	2112      	movs	r1, #18
 80099b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80099b8:	f7ff bf86 	b.w	80098c8 <std>
 80099bc:	20000528 	.word	0x20000528
 80099c0:	200003f0 	.word	0x200003f0
 80099c4:	08009935 	.word	0x08009935

080099c8 <__sfp_lock_acquire>:
 80099c8:	4801      	ldr	r0, [pc, #4]	@ (80099d0 <__sfp_lock_acquire+0x8>)
 80099ca:	f000 ba04 	b.w	8009dd6 <__retarget_lock_acquire_recursive>
 80099ce:	bf00      	nop
 80099d0:	20000531 	.word	0x20000531

080099d4 <__sfp_lock_release>:
 80099d4:	4801      	ldr	r0, [pc, #4]	@ (80099dc <__sfp_lock_release+0x8>)
 80099d6:	f000 b9ff 	b.w	8009dd8 <__retarget_lock_release_recursive>
 80099da:	bf00      	nop
 80099dc:	20000531 	.word	0x20000531

080099e0 <__sinit>:
 80099e0:	b510      	push	{r4, lr}
 80099e2:	4604      	mov	r4, r0
 80099e4:	f7ff fff0 	bl	80099c8 <__sfp_lock_acquire>
 80099e8:	6a23      	ldr	r3, [r4, #32]
 80099ea:	b11b      	cbz	r3, 80099f4 <__sinit+0x14>
 80099ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80099f0:	f7ff bff0 	b.w	80099d4 <__sfp_lock_release>
 80099f4:	4b04      	ldr	r3, [pc, #16]	@ (8009a08 <__sinit+0x28>)
 80099f6:	6223      	str	r3, [r4, #32]
 80099f8:	4b04      	ldr	r3, [pc, #16]	@ (8009a0c <__sinit+0x2c>)
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d1f5      	bne.n	80099ec <__sinit+0xc>
 8009a00:	f7ff ffc4 	bl	800998c <global_stdio_init.part.0>
 8009a04:	e7f2      	b.n	80099ec <__sinit+0xc>
 8009a06:	bf00      	nop
 8009a08:	0800994d 	.word	0x0800994d
 8009a0c:	20000528 	.word	0x20000528

08009a10 <_fwalk_sglue>:
 8009a10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a14:	4607      	mov	r7, r0
 8009a16:	4688      	mov	r8, r1
 8009a18:	4614      	mov	r4, r2
 8009a1a:	2600      	movs	r6, #0
 8009a1c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009a20:	f1b9 0901 	subs.w	r9, r9, #1
 8009a24:	d505      	bpl.n	8009a32 <_fwalk_sglue+0x22>
 8009a26:	6824      	ldr	r4, [r4, #0]
 8009a28:	2c00      	cmp	r4, #0
 8009a2a:	d1f7      	bne.n	8009a1c <_fwalk_sglue+0xc>
 8009a2c:	4630      	mov	r0, r6
 8009a2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a32:	89ab      	ldrh	r3, [r5, #12]
 8009a34:	2b01      	cmp	r3, #1
 8009a36:	d907      	bls.n	8009a48 <_fwalk_sglue+0x38>
 8009a38:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009a3c:	3301      	adds	r3, #1
 8009a3e:	d003      	beq.n	8009a48 <_fwalk_sglue+0x38>
 8009a40:	4629      	mov	r1, r5
 8009a42:	4638      	mov	r0, r7
 8009a44:	47c0      	blx	r8
 8009a46:	4306      	orrs	r6, r0
 8009a48:	3568      	adds	r5, #104	@ 0x68
 8009a4a:	e7e9      	b.n	8009a20 <_fwalk_sglue+0x10>

08009a4c <iprintf>:
 8009a4c:	b40f      	push	{r0, r1, r2, r3}
 8009a4e:	b507      	push	{r0, r1, r2, lr}
 8009a50:	4906      	ldr	r1, [pc, #24]	@ (8009a6c <iprintf+0x20>)
 8009a52:	ab04      	add	r3, sp, #16
 8009a54:	6808      	ldr	r0, [r1, #0]
 8009a56:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a5a:	6881      	ldr	r1, [r0, #8]
 8009a5c:	9301      	str	r3, [sp, #4]
 8009a5e:	f001 fce5 	bl	800b42c <_vfiprintf_r>
 8009a62:	b003      	add	sp, #12
 8009a64:	f85d eb04 	ldr.w	lr, [sp], #4
 8009a68:	b004      	add	sp, #16
 8009a6a:	4770      	bx	lr
 8009a6c:	20000020 	.word	0x20000020

08009a70 <_puts_r>:
 8009a70:	6a03      	ldr	r3, [r0, #32]
 8009a72:	b570      	push	{r4, r5, r6, lr}
 8009a74:	4605      	mov	r5, r0
 8009a76:	460e      	mov	r6, r1
 8009a78:	6884      	ldr	r4, [r0, #8]
 8009a7a:	b90b      	cbnz	r3, 8009a80 <_puts_r+0x10>
 8009a7c:	f7ff ffb0 	bl	80099e0 <__sinit>
 8009a80:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009a82:	07db      	lsls	r3, r3, #31
 8009a84:	d405      	bmi.n	8009a92 <_puts_r+0x22>
 8009a86:	89a3      	ldrh	r3, [r4, #12]
 8009a88:	0598      	lsls	r0, r3, #22
 8009a8a:	d402      	bmi.n	8009a92 <_puts_r+0x22>
 8009a8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009a8e:	f000 f9a2 	bl	8009dd6 <__retarget_lock_acquire_recursive>
 8009a92:	89a3      	ldrh	r3, [r4, #12]
 8009a94:	0719      	lsls	r1, r3, #28
 8009a96:	d502      	bpl.n	8009a9e <_puts_r+0x2e>
 8009a98:	6923      	ldr	r3, [r4, #16]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d135      	bne.n	8009b0a <_puts_r+0x9a>
 8009a9e:	4621      	mov	r1, r4
 8009aa0:	4628      	mov	r0, r5
 8009aa2:	f000 f8c5 	bl	8009c30 <__swsetup_r>
 8009aa6:	b380      	cbz	r0, 8009b0a <_puts_r+0x9a>
 8009aa8:	f04f 35ff 	mov.w	r5, #4294967295
 8009aac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009aae:	07da      	lsls	r2, r3, #31
 8009ab0:	d405      	bmi.n	8009abe <_puts_r+0x4e>
 8009ab2:	89a3      	ldrh	r3, [r4, #12]
 8009ab4:	059b      	lsls	r3, r3, #22
 8009ab6:	d402      	bmi.n	8009abe <_puts_r+0x4e>
 8009ab8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009aba:	f000 f98d 	bl	8009dd8 <__retarget_lock_release_recursive>
 8009abe:	4628      	mov	r0, r5
 8009ac0:	bd70      	pop	{r4, r5, r6, pc}
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	da04      	bge.n	8009ad0 <_puts_r+0x60>
 8009ac6:	69a2      	ldr	r2, [r4, #24]
 8009ac8:	429a      	cmp	r2, r3
 8009aca:	dc17      	bgt.n	8009afc <_puts_r+0x8c>
 8009acc:	290a      	cmp	r1, #10
 8009ace:	d015      	beq.n	8009afc <_puts_r+0x8c>
 8009ad0:	6823      	ldr	r3, [r4, #0]
 8009ad2:	1c5a      	adds	r2, r3, #1
 8009ad4:	6022      	str	r2, [r4, #0]
 8009ad6:	7019      	strb	r1, [r3, #0]
 8009ad8:	68a3      	ldr	r3, [r4, #8]
 8009ada:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009ade:	3b01      	subs	r3, #1
 8009ae0:	60a3      	str	r3, [r4, #8]
 8009ae2:	2900      	cmp	r1, #0
 8009ae4:	d1ed      	bne.n	8009ac2 <_puts_r+0x52>
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	da11      	bge.n	8009b0e <_puts_r+0x9e>
 8009aea:	4622      	mov	r2, r4
 8009aec:	210a      	movs	r1, #10
 8009aee:	4628      	mov	r0, r5
 8009af0:	f000 f85f 	bl	8009bb2 <__swbuf_r>
 8009af4:	3001      	adds	r0, #1
 8009af6:	d0d7      	beq.n	8009aa8 <_puts_r+0x38>
 8009af8:	250a      	movs	r5, #10
 8009afa:	e7d7      	b.n	8009aac <_puts_r+0x3c>
 8009afc:	4622      	mov	r2, r4
 8009afe:	4628      	mov	r0, r5
 8009b00:	f000 f857 	bl	8009bb2 <__swbuf_r>
 8009b04:	3001      	adds	r0, #1
 8009b06:	d1e7      	bne.n	8009ad8 <_puts_r+0x68>
 8009b08:	e7ce      	b.n	8009aa8 <_puts_r+0x38>
 8009b0a:	3e01      	subs	r6, #1
 8009b0c:	e7e4      	b.n	8009ad8 <_puts_r+0x68>
 8009b0e:	6823      	ldr	r3, [r4, #0]
 8009b10:	1c5a      	adds	r2, r3, #1
 8009b12:	6022      	str	r2, [r4, #0]
 8009b14:	220a      	movs	r2, #10
 8009b16:	701a      	strb	r2, [r3, #0]
 8009b18:	e7ee      	b.n	8009af8 <_puts_r+0x88>
	...

08009b1c <puts>:
 8009b1c:	4b02      	ldr	r3, [pc, #8]	@ (8009b28 <puts+0xc>)
 8009b1e:	4601      	mov	r1, r0
 8009b20:	6818      	ldr	r0, [r3, #0]
 8009b22:	f7ff bfa5 	b.w	8009a70 <_puts_r>
 8009b26:	bf00      	nop
 8009b28:	20000020 	.word	0x20000020

08009b2c <__sread>:
 8009b2c:	b510      	push	{r4, lr}
 8009b2e:	460c      	mov	r4, r1
 8009b30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b34:	f000 f900 	bl	8009d38 <_read_r>
 8009b38:	2800      	cmp	r0, #0
 8009b3a:	bfab      	itete	ge
 8009b3c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009b3e:	89a3      	ldrhlt	r3, [r4, #12]
 8009b40:	181b      	addge	r3, r3, r0
 8009b42:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009b46:	bfac      	ite	ge
 8009b48:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009b4a:	81a3      	strhlt	r3, [r4, #12]
 8009b4c:	bd10      	pop	{r4, pc}

08009b4e <__swrite>:
 8009b4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b52:	461f      	mov	r7, r3
 8009b54:	898b      	ldrh	r3, [r1, #12]
 8009b56:	4605      	mov	r5, r0
 8009b58:	460c      	mov	r4, r1
 8009b5a:	05db      	lsls	r3, r3, #23
 8009b5c:	4616      	mov	r6, r2
 8009b5e:	d505      	bpl.n	8009b6c <__swrite+0x1e>
 8009b60:	2302      	movs	r3, #2
 8009b62:	2200      	movs	r2, #0
 8009b64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b68:	f000 f8d4 	bl	8009d14 <_lseek_r>
 8009b6c:	89a3      	ldrh	r3, [r4, #12]
 8009b6e:	4632      	mov	r2, r6
 8009b70:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b74:	4628      	mov	r0, r5
 8009b76:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009b7a:	81a3      	strh	r3, [r4, #12]
 8009b7c:	463b      	mov	r3, r7
 8009b7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b82:	f000 b8eb 	b.w	8009d5c <_write_r>

08009b86 <__sseek>:
 8009b86:	b510      	push	{r4, lr}
 8009b88:	460c      	mov	r4, r1
 8009b8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b8e:	f000 f8c1 	bl	8009d14 <_lseek_r>
 8009b92:	1c43      	adds	r3, r0, #1
 8009b94:	89a3      	ldrh	r3, [r4, #12]
 8009b96:	bf15      	itete	ne
 8009b98:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009b9a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009b9e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009ba2:	81a3      	strheq	r3, [r4, #12]
 8009ba4:	bf18      	it	ne
 8009ba6:	81a3      	strhne	r3, [r4, #12]
 8009ba8:	bd10      	pop	{r4, pc}

08009baa <__sclose>:
 8009baa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bae:	f000 b8a1 	b.w	8009cf4 <_close_r>

08009bb2 <__swbuf_r>:
 8009bb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bb4:	460e      	mov	r6, r1
 8009bb6:	4614      	mov	r4, r2
 8009bb8:	4605      	mov	r5, r0
 8009bba:	b118      	cbz	r0, 8009bc4 <__swbuf_r+0x12>
 8009bbc:	6a03      	ldr	r3, [r0, #32]
 8009bbe:	b90b      	cbnz	r3, 8009bc4 <__swbuf_r+0x12>
 8009bc0:	f7ff ff0e 	bl	80099e0 <__sinit>
 8009bc4:	69a3      	ldr	r3, [r4, #24]
 8009bc6:	60a3      	str	r3, [r4, #8]
 8009bc8:	89a3      	ldrh	r3, [r4, #12]
 8009bca:	071a      	lsls	r2, r3, #28
 8009bcc:	d501      	bpl.n	8009bd2 <__swbuf_r+0x20>
 8009bce:	6923      	ldr	r3, [r4, #16]
 8009bd0:	b943      	cbnz	r3, 8009be4 <__swbuf_r+0x32>
 8009bd2:	4621      	mov	r1, r4
 8009bd4:	4628      	mov	r0, r5
 8009bd6:	f000 f82b 	bl	8009c30 <__swsetup_r>
 8009bda:	b118      	cbz	r0, 8009be4 <__swbuf_r+0x32>
 8009bdc:	f04f 37ff 	mov.w	r7, #4294967295
 8009be0:	4638      	mov	r0, r7
 8009be2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009be4:	6823      	ldr	r3, [r4, #0]
 8009be6:	b2f6      	uxtb	r6, r6
 8009be8:	6922      	ldr	r2, [r4, #16]
 8009bea:	4637      	mov	r7, r6
 8009bec:	1a98      	subs	r0, r3, r2
 8009bee:	6963      	ldr	r3, [r4, #20]
 8009bf0:	4283      	cmp	r3, r0
 8009bf2:	dc05      	bgt.n	8009c00 <__swbuf_r+0x4e>
 8009bf4:	4621      	mov	r1, r4
 8009bf6:	4628      	mov	r0, r5
 8009bf8:	f001 fdb4 	bl	800b764 <_fflush_r>
 8009bfc:	2800      	cmp	r0, #0
 8009bfe:	d1ed      	bne.n	8009bdc <__swbuf_r+0x2a>
 8009c00:	68a3      	ldr	r3, [r4, #8]
 8009c02:	3b01      	subs	r3, #1
 8009c04:	60a3      	str	r3, [r4, #8]
 8009c06:	6823      	ldr	r3, [r4, #0]
 8009c08:	1c5a      	adds	r2, r3, #1
 8009c0a:	6022      	str	r2, [r4, #0]
 8009c0c:	701e      	strb	r6, [r3, #0]
 8009c0e:	1c43      	adds	r3, r0, #1
 8009c10:	6962      	ldr	r2, [r4, #20]
 8009c12:	429a      	cmp	r2, r3
 8009c14:	d004      	beq.n	8009c20 <__swbuf_r+0x6e>
 8009c16:	89a3      	ldrh	r3, [r4, #12]
 8009c18:	07db      	lsls	r3, r3, #31
 8009c1a:	d5e1      	bpl.n	8009be0 <__swbuf_r+0x2e>
 8009c1c:	2e0a      	cmp	r6, #10
 8009c1e:	d1df      	bne.n	8009be0 <__swbuf_r+0x2e>
 8009c20:	4621      	mov	r1, r4
 8009c22:	4628      	mov	r0, r5
 8009c24:	f001 fd9e 	bl	800b764 <_fflush_r>
 8009c28:	2800      	cmp	r0, #0
 8009c2a:	d0d9      	beq.n	8009be0 <__swbuf_r+0x2e>
 8009c2c:	e7d6      	b.n	8009bdc <__swbuf_r+0x2a>
	...

08009c30 <__swsetup_r>:
 8009c30:	b538      	push	{r3, r4, r5, lr}
 8009c32:	4b29      	ldr	r3, [pc, #164]	@ (8009cd8 <__swsetup_r+0xa8>)
 8009c34:	4605      	mov	r5, r0
 8009c36:	460c      	mov	r4, r1
 8009c38:	6818      	ldr	r0, [r3, #0]
 8009c3a:	b118      	cbz	r0, 8009c44 <__swsetup_r+0x14>
 8009c3c:	6a03      	ldr	r3, [r0, #32]
 8009c3e:	b90b      	cbnz	r3, 8009c44 <__swsetup_r+0x14>
 8009c40:	f7ff fece 	bl	80099e0 <__sinit>
 8009c44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c48:	0719      	lsls	r1, r3, #28
 8009c4a:	d422      	bmi.n	8009c92 <__swsetup_r+0x62>
 8009c4c:	06da      	lsls	r2, r3, #27
 8009c4e:	d407      	bmi.n	8009c60 <__swsetup_r+0x30>
 8009c50:	2209      	movs	r2, #9
 8009c52:	602a      	str	r2, [r5, #0]
 8009c54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009c58:	f04f 30ff 	mov.w	r0, #4294967295
 8009c5c:	81a3      	strh	r3, [r4, #12]
 8009c5e:	e033      	b.n	8009cc8 <__swsetup_r+0x98>
 8009c60:	0758      	lsls	r0, r3, #29
 8009c62:	d512      	bpl.n	8009c8a <__swsetup_r+0x5a>
 8009c64:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009c66:	b141      	cbz	r1, 8009c7a <__swsetup_r+0x4a>
 8009c68:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009c6c:	4299      	cmp	r1, r3
 8009c6e:	d002      	beq.n	8009c76 <__swsetup_r+0x46>
 8009c70:	4628      	mov	r0, r5
 8009c72:	f000 ff2f 	bl	800aad4 <_free_r>
 8009c76:	2300      	movs	r3, #0
 8009c78:	6363      	str	r3, [r4, #52]	@ 0x34
 8009c7a:	89a3      	ldrh	r3, [r4, #12]
 8009c7c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009c80:	81a3      	strh	r3, [r4, #12]
 8009c82:	2300      	movs	r3, #0
 8009c84:	6063      	str	r3, [r4, #4]
 8009c86:	6923      	ldr	r3, [r4, #16]
 8009c88:	6023      	str	r3, [r4, #0]
 8009c8a:	89a3      	ldrh	r3, [r4, #12]
 8009c8c:	f043 0308 	orr.w	r3, r3, #8
 8009c90:	81a3      	strh	r3, [r4, #12]
 8009c92:	6923      	ldr	r3, [r4, #16]
 8009c94:	b94b      	cbnz	r3, 8009caa <__swsetup_r+0x7a>
 8009c96:	89a3      	ldrh	r3, [r4, #12]
 8009c98:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009c9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009ca0:	d003      	beq.n	8009caa <__swsetup_r+0x7a>
 8009ca2:	4621      	mov	r1, r4
 8009ca4:	4628      	mov	r0, r5
 8009ca6:	f001 fdaa 	bl	800b7fe <__smakebuf_r>
 8009caa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009cae:	f013 0201 	ands.w	r2, r3, #1
 8009cb2:	d00a      	beq.n	8009cca <__swsetup_r+0x9a>
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	60a2      	str	r2, [r4, #8]
 8009cb8:	6962      	ldr	r2, [r4, #20]
 8009cba:	4252      	negs	r2, r2
 8009cbc:	61a2      	str	r2, [r4, #24]
 8009cbe:	6922      	ldr	r2, [r4, #16]
 8009cc0:	b942      	cbnz	r2, 8009cd4 <__swsetup_r+0xa4>
 8009cc2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009cc6:	d1c5      	bne.n	8009c54 <__swsetup_r+0x24>
 8009cc8:	bd38      	pop	{r3, r4, r5, pc}
 8009cca:	0799      	lsls	r1, r3, #30
 8009ccc:	bf58      	it	pl
 8009cce:	6962      	ldrpl	r2, [r4, #20]
 8009cd0:	60a2      	str	r2, [r4, #8]
 8009cd2:	e7f4      	b.n	8009cbe <__swsetup_r+0x8e>
 8009cd4:	2000      	movs	r0, #0
 8009cd6:	e7f7      	b.n	8009cc8 <__swsetup_r+0x98>
 8009cd8:	20000020 	.word	0x20000020

08009cdc <memset>:
 8009cdc:	4402      	add	r2, r0
 8009cde:	4603      	mov	r3, r0
 8009ce0:	4293      	cmp	r3, r2
 8009ce2:	d100      	bne.n	8009ce6 <memset+0xa>
 8009ce4:	4770      	bx	lr
 8009ce6:	f803 1b01 	strb.w	r1, [r3], #1
 8009cea:	e7f9      	b.n	8009ce0 <memset+0x4>

08009cec <_localeconv_r>:
 8009cec:	4800      	ldr	r0, [pc, #0]	@ (8009cf0 <_localeconv_r+0x4>)
 8009cee:	4770      	bx	lr
 8009cf0:	20000160 	.word	0x20000160

08009cf4 <_close_r>:
 8009cf4:	b538      	push	{r3, r4, r5, lr}
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	4d05      	ldr	r5, [pc, #20]	@ (8009d10 <_close_r+0x1c>)
 8009cfa:	4604      	mov	r4, r0
 8009cfc:	4608      	mov	r0, r1
 8009cfe:	602b      	str	r3, [r5, #0]
 8009d00:	f7f8 fca1 	bl	8002646 <_close>
 8009d04:	1c43      	adds	r3, r0, #1
 8009d06:	d102      	bne.n	8009d0e <_close_r+0x1a>
 8009d08:	682b      	ldr	r3, [r5, #0]
 8009d0a:	b103      	cbz	r3, 8009d0e <_close_r+0x1a>
 8009d0c:	6023      	str	r3, [r4, #0]
 8009d0e:	bd38      	pop	{r3, r4, r5, pc}
 8009d10:	2000052c 	.word	0x2000052c

08009d14 <_lseek_r>:
 8009d14:	b538      	push	{r3, r4, r5, lr}
 8009d16:	4604      	mov	r4, r0
 8009d18:	4d06      	ldr	r5, [pc, #24]	@ (8009d34 <_lseek_r+0x20>)
 8009d1a:	4608      	mov	r0, r1
 8009d1c:	4611      	mov	r1, r2
 8009d1e:	2200      	movs	r2, #0
 8009d20:	602a      	str	r2, [r5, #0]
 8009d22:	461a      	mov	r2, r3
 8009d24:	f7f8 fcb6 	bl	8002694 <_lseek>
 8009d28:	1c43      	adds	r3, r0, #1
 8009d2a:	d102      	bne.n	8009d32 <_lseek_r+0x1e>
 8009d2c:	682b      	ldr	r3, [r5, #0]
 8009d2e:	b103      	cbz	r3, 8009d32 <_lseek_r+0x1e>
 8009d30:	6023      	str	r3, [r4, #0]
 8009d32:	bd38      	pop	{r3, r4, r5, pc}
 8009d34:	2000052c 	.word	0x2000052c

08009d38 <_read_r>:
 8009d38:	b538      	push	{r3, r4, r5, lr}
 8009d3a:	4604      	mov	r4, r0
 8009d3c:	4d06      	ldr	r5, [pc, #24]	@ (8009d58 <_read_r+0x20>)
 8009d3e:	4608      	mov	r0, r1
 8009d40:	4611      	mov	r1, r2
 8009d42:	2200      	movs	r2, #0
 8009d44:	602a      	str	r2, [r5, #0]
 8009d46:	461a      	mov	r2, r3
 8009d48:	f7f8 fc44 	bl	80025d4 <_read>
 8009d4c:	1c43      	adds	r3, r0, #1
 8009d4e:	d102      	bne.n	8009d56 <_read_r+0x1e>
 8009d50:	682b      	ldr	r3, [r5, #0]
 8009d52:	b103      	cbz	r3, 8009d56 <_read_r+0x1e>
 8009d54:	6023      	str	r3, [r4, #0]
 8009d56:	bd38      	pop	{r3, r4, r5, pc}
 8009d58:	2000052c 	.word	0x2000052c

08009d5c <_write_r>:
 8009d5c:	b538      	push	{r3, r4, r5, lr}
 8009d5e:	4604      	mov	r4, r0
 8009d60:	4d06      	ldr	r5, [pc, #24]	@ (8009d7c <_write_r+0x20>)
 8009d62:	4608      	mov	r0, r1
 8009d64:	4611      	mov	r1, r2
 8009d66:	2200      	movs	r2, #0
 8009d68:	602a      	str	r2, [r5, #0]
 8009d6a:	461a      	mov	r2, r3
 8009d6c:	f7f8 fc4f 	bl	800260e <_write>
 8009d70:	1c43      	adds	r3, r0, #1
 8009d72:	d102      	bne.n	8009d7a <_write_r+0x1e>
 8009d74:	682b      	ldr	r3, [r5, #0]
 8009d76:	b103      	cbz	r3, 8009d7a <_write_r+0x1e>
 8009d78:	6023      	str	r3, [r4, #0]
 8009d7a:	bd38      	pop	{r3, r4, r5, pc}
 8009d7c:	2000052c 	.word	0x2000052c

08009d80 <__errno>:
 8009d80:	4b01      	ldr	r3, [pc, #4]	@ (8009d88 <__errno+0x8>)
 8009d82:	6818      	ldr	r0, [r3, #0]
 8009d84:	4770      	bx	lr
 8009d86:	bf00      	nop
 8009d88:	20000020 	.word	0x20000020

08009d8c <__libc_init_array>:
 8009d8c:	b570      	push	{r4, r5, r6, lr}
 8009d8e:	4d0d      	ldr	r5, [pc, #52]	@ (8009dc4 <__libc_init_array+0x38>)
 8009d90:	2600      	movs	r6, #0
 8009d92:	4c0d      	ldr	r4, [pc, #52]	@ (8009dc8 <__libc_init_array+0x3c>)
 8009d94:	1b64      	subs	r4, r4, r5
 8009d96:	10a4      	asrs	r4, r4, #2
 8009d98:	42a6      	cmp	r6, r4
 8009d9a:	d109      	bne.n	8009db0 <__libc_init_array+0x24>
 8009d9c:	4d0b      	ldr	r5, [pc, #44]	@ (8009dcc <__libc_init_array+0x40>)
 8009d9e:	2600      	movs	r6, #0
 8009da0:	4c0b      	ldr	r4, [pc, #44]	@ (8009dd0 <__libc_init_array+0x44>)
 8009da2:	f001 fe4b 	bl	800ba3c <_init>
 8009da6:	1b64      	subs	r4, r4, r5
 8009da8:	10a4      	asrs	r4, r4, #2
 8009daa:	42a6      	cmp	r6, r4
 8009dac:	d105      	bne.n	8009dba <__libc_init_array+0x2e>
 8009dae:	bd70      	pop	{r4, r5, r6, pc}
 8009db0:	f855 3b04 	ldr.w	r3, [r5], #4
 8009db4:	3601      	adds	r6, #1
 8009db6:	4798      	blx	r3
 8009db8:	e7ee      	b.n	8009d98 <__libc_init_array+0xc>
 8009dba:	f855 3b04 	ldr.w	r3, [r5], #4
 8009dbe:	3601      	adds	r6, #1
 8009dc0:	4798      	blx	r3
 8009dc2:	e7f2      	b.n	8009daa <__libc_init_array+0x1e>
 8009dc4:	0800c35c 	.word	0x0800c35c
 8009dc8:	0800c35c 	.word	0x0800c35c
 8009dcc:	0800c35c 	.word	0x0800c35c
 8009dd0:	0800c360 	.word	0x0800c360

08009dd4 <__retarget_lock_init_recursive>:
 8009dd4:	4770      	bx	lr

08009dd6 <__retarget_lock_acquire_recursive>:
 8009dd6:	4770      	bx	lr

08009dd8 <__retarget_lock_release_recursive>:
 8009dd8:	4770      	bx	lr

08009dda <memchr>:
 8009dda:	b2c9      	uxtb	r1, r1
 8009ddc:	4603      	mov	r3, r0
 8009dde:	4402      	add	r2, r0
 8009de0:	b510      	push	{r4, lr}
 8009de2:	4293      	cmp	r3, r2
 8009de4:	4618      	mov	r0, r3
 8009de6:	d101      	bne.n	8009dec <memchr+0x12>
 8009de8:	2000      	movs	r0, #0
 8009dea:	e003      	b.n	8009df4 <memchr+0x1a>
 8009dec:	7804      	ldrb	r4, [r0, #0]
 8009dee:	3301      	adds	r3, #1
 8009df0:	428c      	cmp	r4, r1
 8009df2:	d1f6      	bne.n	8009de2 <memchr+0x8>
 8009df4:	bd10      	pop	{r4, pc}

08009df6 <memcpy>:
 8009df6:	440a      	add	r2, r1
 8009df8:	1e43      	subs	r3, r0, #1
 8009dfa:	4291      	cmp	r1, r2
 8009dfc:	d100      	bne.n	8009e00 <memcpy+0xa>
 8009dfe:	4770      	bx	lr
 8009e00:	b510      	push	{r4, lr}
 8009e02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e06:	4291      	cmp	r1, r2
 8009e08:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009e0c:	d1f9      	bne.n	8009e02 <memcpy+0xc>
 8009e0e:	bd10      	pop	{r4, pc}

08009e10 <quorem>:
 8009e10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e14:	6903      	ldr	r3, [r0, #16]
 8009e16:	4607      	mov	r7, r0
 8009e18:	690c      	ldr	r4, [r1, #16]
 8009e1a:	42a3      	cmp	r3, r4
 8009e1c:	f2c0 8083 	blt.w	8009f26 <quorem+0x116>
 8009e20:	3c01      	subs	r4, #1
 8009e22:	f100 0514 	add.w	r5, r0, #20
 8009e26:	f101 0814 	add.w	r8, r1, #20
 8009e2a:	00a3      	lsls	r3, r4, #2
 8009e2c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009e30:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009e34:	9300      	str	r3, [sp, #0]
 8009e36:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009e3a:	9301      	str	r3, [sp, #4]
 8009e3c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009e40:	3301      	adds	r3, #1
 8009e42:	429a      	cmp	r2, r3
 8009e44:	fbb2 f6f3 	udiv	r6, r2, r3
 8009e48:	d331      	bcc.n	8009eae <quorem+0x9e>
 8009e4a:	f04f 0a00 	mov.w	sl, #0
 8009e4e:	46c4      	mov	ip, r8
 8009e50:	46ae      	mov	lr, r5
 8009e52:	46d3      	mov	fp, sl
 8009e54:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009e58:	b298      	uxth	r0, r3
 8009e5a:	45e1      	cmp	r9, ip
 8009e5c:	ea4f 4313 	mov.w	r3, r3, lsr #16
 8009e60:	fb06 a000 	mla	r0, r6, r0, sl
 8009e64:	ea4f 4210 	mov.w	r2, r0, lsr #16
 8009e68:	b280      	uxth	r0, r0
 8009e6a:	fb06 2303 	mla	r3, r6, r3, r2
 8009e6e:	f8de 2000 	ldr.w	r2, [lr]
 8009e72:	b292      	uxth	r2, r2
 8009e74:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009e78:	eba2 0200 	sub.w	r2, r2, r0
 8009e7c:	b29b      	uxth	r3, r3
 8009e7e:	f8de 0000 	ldr.w	r0, [lr]
 8009e82:	445a      	add	r2, fp
 8009e84:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009e88:	b292      	uxth	r2, r2
 8009e8a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009e8e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009e92:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009e96:	f84e 2b04 	str.w	r2, [lr], #4
 8009e9a:	d2db      	bcs.n	8009e54 <quorem+0x44>
 8009e9c:	9b00      	ldr	r3, [sp, #0]
 8009e9e:	58eb      	ldr	r3, [r5, r3]
 8009ea0:	b92b      	cbnz	r3, 8009eae <quorem+0x9e>
 8009ea2:	9b01      	ldr	r3, [sp, #4]
 8009ea4:	3b04      	subs	r3, #4
 8009ea6:	429d      	cmp	r5, r3
 8009ea8:	461a      	mov	r2, r3
 8009eaa:	d330      	bcc.n	8009f0e <quorem+0xfe>
 8009eac:	613c      	str	r4, [r7, #16]
 8009eae:	4638      	mov	r0, r7
 8009eb0:	f001 f986 	bl	800b1c0 <__mcmp>
 8009eb4:	2800      	cmp	r0, #0
 8009eb6:	db26      	blt.n	8009f06 <quorem+0xf6>
 8009eb8:	4629      	mov	r1, r5
 8009eba:	2000      	movs	r0, #0
 8009ebc:	f858 2b04 	ldr.w	r2, [r8], #4
 8009ec0:	f8d1 c000 	ldr.w	ip, [r1]
 8009ec4:	fa1f fe82 	uxth.w	lr, r2
 8009ec8:	45c1      	cmp	r9, r8
 8009eca:	fa1f f38c 	uxth.w	r3, ip
 8009ece:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8009ed2:	eba3 030e 	sub.w	r3, r3, lr
 8009ed6:	4403      	add	r3, r0
 8009ed8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009edc:	b29b      	uxth	r3, r3
 8009ede:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009ee2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009ee6:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009eea:	f841 3b04 	str.w	r3, [r1], #4
 8009eee:	d2e5      	bcs.n	8009ebc <quorem+0xac>
 8009ef0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009ef4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009ef8:	b922      	cbnz	r2, 8009f04 <quorem+0xf4>
 8009efa:	3b04      	subs	r3, #4
 8009efc:	429d      	cmp	r5, r3
 8009efe:	461a      	mov	r2, r3
 8009f00:	d30b      	bcc.n	8009f1a <quorem+0x10a>
 8009f02:	613c      	str	r4, [r7, #16]
 8009f04:	3601      	adds	r6, #1
 8009f06:	4630      	mov	r0, r6
 8009f08:	b003      	add	sp, #12
 8009f0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f0e:	6812      	ldr	r2, [r2, #0]
 8009f10:	3b04      	subs	r3, #4
 8009f12:	2a00      	cmp	r2, #0
 8009f14:	d1ca      	bne.n	8009eac <quorem+0x9c>
 8009f16:	3c01      	subs	r4, #1
 8009f18:	e7c5      	b.n	8009ea6 <quorem+0x96>
 8009f1a:	6812      	ldr	r2, [r2, #0]
 8009f1c:	3b04      	subs	r3, #4
 8009f1e:	2a00      	cmp	r2, #0
 8009f20:	d1ef      	bne.n	8009f02 <quorem+0xf2>
 8009f22:	3c01      	subs	r4, #1
 8009f24:	e7ea      	b.n	8009efc <quorem+0xec>
 8009f26:	2000      	movs	r0, #0
 8009f28:	e7ee      	b.n	8009f08 <quorem+0xf8>
 8009f2a:	0000      	movs	r0, r0
 8009f2c:	0000      	movs	r0, r0
	...

08009f30 <_dtoa_r>:
 8009f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f34:	69c7      	ldr	r7, [r0, #28]
 8009f36:	b097      	sub	sp, #92	@ 0x5c
 8009f38:	4681      	mov	r9, r0
 8009f3a:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8009f3c:	9107      	str	r1, [sp, #28]
 8009f3e:	920c      	str	r2, [sp, #48]	@ 0x30
 8009f40:	9311      	str	r3, [sp, #68]	@ 0x44
 8009f42:	ec55 4b10 	vmov	r4, r5, d0
 8009f46:	ed8d 0b04 	vstr	d0, [sp, #16]
 8009f4a:	b97f      	cbnz	r7, 8009f6c <_dtoa_r+0x3c>
 8009f4c:	2010      	movs	r0, #16
 8009f4e:	f000 fe0b 	bl	800ab68 <malloc>
 8009f52:	4602      	mov	r2, r0
 8009f54:	f8c9 001c 	str.w	r0, [r9, #28]
 8009f58:	b920      	cbnz	r0, 8009f64 <_dtoa_r+0x34>
 8009f5a:	4ba9      	ldr	r3, [pc, #676]	@ (800a200 <_dtoa_r+0x2d0>)
 8009f5c:	21ef      	movs	r1, #239	@ 0xef
 8009f5e:	48a9      	ldr	r0, [pc, #676]	@ (800a204 <_dtoa_r+0x2d4>)
 8009f60:	f001 fcbc 	bl	800b8dc <__assert_func>
 8009f64:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009f68:	6007      	str	r7, [r0, #0]
 8009f6a:	60c7      	str	r7, [r0, #12]
 8009f6c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009f70:	6819      	ldr	r1, [r3, #0]
 8009f72:	b159      	cbz	r1, 8009f8c <_dtoa_r+0x5c>
 8009f74:	685a      	ldr	r2, [r3, #4]
 8009f76:	2301      	movs	r3, #1
 8009f78:	4648      	mov	r0, r9
 8009f7a:	4093      	lsls	r3, r2
 8009f7c:	604a      	str	r2, [r1, #4]
 8009f7e:	608b      	str	r3, [r1, #8]
 8009f80:	f000 fee8 	bl	800ad54 <_Bfree>
 8009f84:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009f88:	2200      	movs	r2, #0
 8009f8a:	601a      	str	r2, [r3, #0]
 8009f8c:	1e2b      	subs	r3, r5, #0
 8009f8e:	bfb7      	itett	lt
 8009f90:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009f94:	2300      	movge	r3, #0
 8009f96:	2201      	movlt	r2, #1
 8009f98:	9305      	strlt	r3, [sp, #20]
 8009f9a:	bfa8      	it	ge
 8009f9c:	6033      	strge	r3, [r6, #0]
 8009f9e:	9f05      	ldr	r7, [sp, #20]
 8009fa0:	4b99      	ldr	r3, [pc, #612]	@ (800a208 <_dtoa_r+0x2d8>)
 8009fa2:	bfb8      	it	lt
 8009fa4:	6032      	strlt	r2, [r6, #0]
 8009fa6:	43bb      	bics	r3, r7
 8009fa8:	d112      	bne.n	8009fd0 <_dtoa_r+0xa0>
 8009faa:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009fae:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009fb0:	6013      	str	r3, [r2, #0]
 8009fb2:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009fb6:	4323      	orrs	r3, r4
 8009fb8:	f000 855a 	beq.w	800aa70 <_dtoa_r+0xb40>
 8009fbc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009fbe:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800a21c <_dtoa_r+0x2ec>
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	f000 855c 	beq.w	800aa80 <_dtoa_r+0xb50>
 8009fc8:	f10a 0303 	add.w	r3, sl, #3
 8009fcc:	f000 bd56 	b.w	800aa7c <_dtoa_r+0xb4c>
 8009fd0:	ed9d 7b04 	vldr	d7, [sp, #16]
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	ec51 0b17 	vmov	r0, r1, d7
 8009fdc:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8009fe0:	f7f6 fd82 	bl	8000ae8 <__aeabi_dcmpeq>
 8009fe4:	4680      	mov	r8, r0
 8009fe6:	b158      	cbz	r0, 800a000 <_dtoa_r+0xd0>
 8009fe8:	2301      	movs	r3, #1
 8009fea:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009fec:	6013      	str	r3, [r2, #0]
 8009fee:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009ff0:	b113      	cbz	r3, 8009ff8 <_dtoa_r+0xc8>
 8009ff2:	4b86      	ldr	r3, [pc, #536]	@ (800a20c <_dtoa_r+0x2dc>)
 8009ff4:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8009ff6:	6013      	str	r3, [r2, #0]
 8009ff8:	f8df a224 	ldr.w	sl, [pc, #548]	@ 800a220 <_dtoa_r+0x2f0>
 8009ffc:	f000 bd40 	b.w	800aa80 <_dtoa_r+0xb50>
 800a000:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a004:	aa14      	add	r2, sp, #80	@ 0x50
 800a006:	a915      	add	r1, sp, #84	@ 0x54
 800a008:	4648      	mov	r0, r9
 800a00a:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800a00e:	f001 f98b 	bl	800b328 <__d2b>
 800a012:	9002      	str	r0, [sp, #8]
 800a014:	2e00      	cmp	r6, #0
 800a016:	d076      	beq.n	800a106 <_dtoa_r+0x1d6>
 800a018:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a01a:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a01e:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800a022:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a026:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a02a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a02e:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a032:	4619      	mov	r1, r3
 800a034:	2200      	movs	r2, #0
 800a036:	4b76      	ldr	r3, [pc, #472]	@ (800a210 <_dtoa_r+0x2e0>)
 800a038:	f7f6 f936 	bl	80002a8 <__aeabi_dsub>
 800a03c:	a36a      	add	r3, pc, #424	@ (adr r3, 800a1e8 <_dtoa_r+0x2b8>)
 800a03e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a042:	f7f6 fae9 	bl	8000618 <__aeabi_dmul>
 800a046:	a36a      	add	r3, pc, #424	@ (adr r3, 800a1f0 <_dtoa_r+0x2c0>)
 800a048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a04c:	f7f6 f92e 	bl	80002ac <__adddf3>
 800a050:	4604      	mov	r4, r0
 800a052:	460d      	mov	r5, r1
 800a054:	4630      	mov	r0, r6
 800a056:	f7f6 fa75 	bl	8000544 <__aeabi_i2d>
 800a05a:	a367      	add	r3, pc, #412	@ (adr r3, 800a1f8 <_dtoa_r+0x2c8>)
 800a05c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a060:	f7f6 fada 	bl	8000618 <__aeabi_dmul>
 800a064:	4602      	mov	r2, r0
 800a066:	460b      	mov	r3, r1
 800a068:	4620      	mov	r0, r4
 800a06a:	4629      	mov	r1, r5
 800a06c:	f7f6 f91e 	bl	80002ac <__adddf3>
 800a070:	4604      	mov	r4, r0
 800a072:	460d      	mov	r5, r1
 800a074:	f7f6 fd80 	bl	8000b78 <__aeabi_d2iz>
 800a078:	2200      	movs	r2, #0
 800a07a:	4607      	mov	r7, r0
 800a07c:	2300      	movs	r3, #0
 800a07e:	4620      	mov	r0, r4
 800a080:	4629      	mov	r1, r5
 800a082:	f7f6 fd3b 	bl	8000afc <__aeabi_dcmplt>
 800a086:	b140      	cbz	r0, 800a09a <_dtoa_r+0x16a>
 800a088:	4638      	mov	r0, r7
 800a08a:	f7f6 fa5b 	bl	8000544 <__aeabi_i2d>
 800a08e:	4622      	mov	r2, r4
 800a090:	462b      	mov	r3, r5
 800a092:	f7f6 fd29 	bl	8000ae8 <__aeabi_dcmpeq>
 800a096:	b900      	cbnz	r0, 800a09a <_dtoa_r+0x16a>
 800a098:	3f01      	subs	r7, #1
 800a09a:	2f16      	cmp	r7, #22
 800a09c:	d852      	bhi.n	800a144 <_dtoa_r+0x214>
 800a09e:	4b5d      	ldr	r3, [pc, #372]	@ (800a214 <_dtoa_r+0x2e4>)
 800a0a0:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a0a4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a0a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ac:	f7f6 fd26 	bl	8000afc <__aeabi_dcmplt>
 800a0b0:	2800      	cmp	r0, #0
 800a0b2:	d049      	beq.n	800a148 <_dtoa_r+0x218>
 800a0b4:	3f01      	subs	r7, #1
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	9310      	str	r3, [sp, #64]	@ 0x40
 800a0ba:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a0bc:	1b9b      	subs	r3, r3, r6
 800a0be:	1e5a      	subs	r2, r3, #1
 800a0c0:	bf4c      	ite	mi
 800a0c2:	f1c3 0301 	rsbmi	r3, r3, #1
 800a0c6:	2300      	movpl	r3, #0
 800a0c8:	9206      	str	r2, [sp, #24]
 800a0ca:	bf45      	ittet	mi
 800a0cc:	9300      	strmi	r3, [sp, #0]
 800a0ce:	2300      	movmi	r3, #0
 800a0d0:	9300      	strpl	r3, [sp, #0]
 800a0d2:	9306      	strmi	r3, [sp, #24]
 800a0d4:	2f00      	cmp	r7, #0
 800a0d6:	db39      	blt.n	800a14c <_dtoa_r+0x21c>
 800a0d8:	9b06      	ldr	r3, [sp, #24]
 800a0da:	970d      	str	r7, [sp, #52]	@ 0x34
 800a0dc:	443b      	add	r3, r7
 800a0de:	9306      	str	r3, [sp, #24]
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	9308      	str	r3, [sp, #32]
 800a0e4:	9b07      	ldr	r3, [sp, #28]
 800a0e6:	2b09      	cmp	r3, #9
 800a0e8:	d863      	bhi.n	800a1b2 <_dtoa_r+0x282>
 800a0ea:	2b05      	cmp	r3, #5
 800a0ec:	bfc5      	ittet	gt
 800a0ee:	3b04      	subgt	r3, #4
 800a0f0:	2400      	movgt	r4, #0
 800a0f2:	2401      	movle	r4, #1
 800a0f4:	9307      	strgt	r3, [sp, #28]
 800a0f6:	9b07      	ldr	r3, [sp, #28]
 800a0f8:	3b02      	subs	r3, #2
 800a0fa:	2b03      	cmp	r3, #3
 800a0fc:	d865      	bhi.n	800a1ca <_dtoa_r+0x29a>
 800a0fe:	e8df f003 	tbb	[pc, r3]
 800a102:	5654      	.short	0x5654
 800a104:	2d39      	.short	0x2d39
 800a106:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800a10a:	441e      	add	r6, r3
 800a10c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a110:	2b20      	cmp	r3, #32
 800a112:	bfc9      	itett	gt
 800a114:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a118:	f1c3 0320 	rsble	r3, r3, #32
 800a11c:	409f      	lslgt	r7, r3
 800a11e:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a122:	bfd8      	it	le
 800a124:	fa04 f003 	lslle.w	r0, r4, r3
 800a128:	f106 36ff 	add.w	r6, r6, #4294967295
 800a12c:	bfc4      	itt	gt
 800a12e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a132:	ea47 0003 	orrgt.w	r0, r7, r3
 800a136:	f7f6 f9f5 	bl	8000524 <__aeabi_ui2d>
 800a13a:	2201      	movs	r2, #1
 800a13c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a140:	9212      	str	r2, [sp, #72]	@ 0x48
 800a142:	e776      	b.n	800a032 <_dtoa_r+0x102>
 800a144:	2301      	movs	r3, #1
 800a146:	e7b7      	b.n	800a0b8 <_dtoa_r+0x188>
 800a148:	9010      	str	r0, [sp, #64]	@ 0x40
 800a14a:	e7b6      	b.n	800a0ba <_dtoa_r+0x18a>
 800a14c:	9b00      	ldr	r3, [sp, #0]
 800a14e:	1bdb      	subs	r3, r3, r7
 800a150:	9300      	str	r3, [sp, #0]
 800a152:	427b      	negs	r3, r7
 800a154:	9308      	str	r3, [sp, #32]
 800a156:	2300      	movs	r3, #0
 800a158:	930d      	str	r3, [sp, #52]	@ 0x34
 800a15a:	e7c3      	b.n	800a0e4 <_dtoa_r+0x1b4>
 800a15c:	2301      	movs	r3, #1
 800a15e:	9309      	str	r3, [sp, #36]	@ 0x24
 800a160:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a162:	eb07 0b03 	add.w	fp, r7, r3
 800a166:	f10b 0301 	add.w	r3, fp, #1
 800a16a:	2b01      	cmp	r3, #1
 800a16c:	9303      	str	r3, [sp, #12]
 800a16e:	bfb8      	it	lt
 800a170:	2301      	movlt	r3, #1
 800a172:	e006      	b.n	800a182 <_dtoa_r+0x252>
 800a174:	2301      	movs	r3, #1
 800a176:	9309      	str	r3, [sp, #36]	@ 0x24
 800a178:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	dd28      	ble.n	800a1d0 <_dtoa_r+0x2a0>
 800a17e:	469b      	mov	fp, r3
 800a180:	9303      	str	r3, [sp, #12]
 800a182:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800a186:	2100      	movs	r1, #0
 800a188:	2204      	movs	r2, #4
 800a18a:	f102 0514 	add.w	r5, r2, #20
 800a18e:	429d      	cmp	r5, r3
 800a190:	d926      	bls.n	800a1e0 <_dtoa_r+0x2b0>
 800a192:	6041      	str	r1, [r0, #4]
 800a194:	4648      	mov	r0, r9
 800a196:	f000 fd9d 	bl	800acd4 <_Balloc>
 800a19a:	4682      	mov	sl, r0
 800a19c:	2800      	cmp	r0, #0
 800a19e:	d141      	bne.n	800a224 <_dtoa_r+0x2f4>
 800a1a0:	4b1d      	ldr	r3, [pc, #116]	@ (800a218 <_dtoa_r+0x2e8>)
 800a1a2:	4602      	mov	r2, r0
 800a1a4:	f240 11af 	movw	r1, #431	@ 0x1af
 800a1a8:	e6d9      	b.n	8009f5e <_dtoa_r+0x2e>
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	e7e3      	b.n	800a176 <_dtoa_r+0x246>
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	e7d5      	b.n	800a15e <_dtoa_r+0x22e>
 800a1b2:	2401      	movs	r4, #1
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	9409      	str	r4, [sp, #36]	@ 0x24
 800a1b8:	9307      	str	r3, [sp, #28]
 800a1ba:	f04f 3bff 	mov.w	fp, #4294967295
 800a1be:	2200      	movs	r2, #0
 800a1c0:	2312      	movs	r3, #18
 800a1c2:	f8cd b00c 	str.w	fp, [sp, #12]
 800a1c6:	920c      	str	r2, [sp, #48]	@ 0x30
 800a1c8:	e7db      	b.n	800a182 <_dtoa_r+0x252>
 800a1ca:	2301      	movs	r3, #1
 800a1cc:	9309      	str	r3, [sp, #36]	@ 0x24
 800a1ce:	e7f4      	b.n	800a1ba <_dtoa_r+0x28a>
 800a1d0:	f04f 0b01 	mov.w	fp, #1
 800a1d4:	465b      	mov	r3, fp
 800a1d6:	f8cd b00c 	str.w	fp, [sp, #12]
 800a1da:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800a1de:	e7d0      	b.n	800a182 <_dtoa_r+0x252>
 800a1e0:	3101      	adds	r1, #1
 800a1e2:	0052      	lsls	r2, r2, #1
 800a1e4:	e7d1      	b.n	800a18a <_dtoa_r+0x25a>
 800a1e6:	bf00      	nop
 800a1e8:	636f4361 	.word	0x636f4361
 800a1ec:	3fd287a7 	.word	0x3fd287a7
 800a1f0:	8b60c8b3 	.word	0x8b60c8b3
 800a1f4:	3fc68a28 	.word	0x3fc68a28
 800a1f8:	509f79fb 	.word	0x509f79fb
 800a1fc:	3fd34413 	.word	0x3fd34413
 800a200:	0800c021 	.word	0x0800c021
 800a204:	0800c038 	.word	0x0800c038
 800a208:	7ff00000 	.word	0x7ff00000
 800a20c:	0800bff1 	.word	0x0800bff1
 800a210:	3ff80000 	.word	0x3ff80000
 800a214:	0800c188 	.word	0x0800c188
 800a218:	0800c090 	.word	0x0800c090
 800a21c:	0800c01d 	.word	0x0800c01d
 800a220:	0800bff0 	.word	0x0800bff0
 800a224:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a228:	6018      	str	r0, [r3, #0]
 800a22a:	9b03      	ldr	r3, [sp, #12]
 800a22c:	2b0e      	cmp	r3, #14
 800a22e:	f200 80a1 	bhi.w	800a374 <_dtoa_r+0x444>
 800a232:	2c00      	cmp	r4, #0
 800a234:	f000 809e 	beq.w	800a374 <_dtoa_r+0x444>
 800a238:	2f00      	cmp	r7, #0
 800a23a:	dd33      	ble.n	800a2a4 <_dtoa_r+0x374>
 800a23c:	f007 020f 	and.w	r2, r7, #15
 800a240:	4b9b      	ldr	r3, [pc, #620]	@ (800a4b0 <_dtoa_r+0x580>)
 800a242:	05f8      	lsls	r0, r7, #23
 800a244:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a248:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a24c:	ed93 7b00 	vldr	d7, [r3]
 800a250:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800a254:	d516      	bpl.n	800a284 <_dtoa_r+0x354>
 800a256:	4b97      	ldr	r3, [pc, #604]	@ (800a4b4 <_dtoa_r+0x584>)
 800a258:	f004 040f 	and.w	r4, r4, #15
 800a25c:	2603      	movs	r6, #3
 800a25e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a262:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a266:	f7f6 fb01 	bl	800086c <__aeabi_ddiv>
 800a26a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a26e:	4d91      	ldr	r5, [pc, #580]	@ (800a4b4 <_dtoa_r+0x584>)
 800a270:	b954      	cbnz	r4, 800a288 <_dtoa_r+0x358>
 800a272:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a276:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a27a:	f7f6 faf7 	bl	800086c <__aeabi_ddiv>
 800a27e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a282:	e028      	b.n	800a2d6 <_dtoa_r+0x3a6>
 800a284:	2602      	movs	r6, #2
 800a286:	e7f2      	b.n	800a26e <_dtoa_r+0x33e>
 800a288:	07e1      	lsls	r1, r4, #31
 800a28a:	d508      	bpl.n	800a29e <_dtoa_r+0x36e>
 800a28c:	3601      	adds	r6, #1
 800a28e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800a292:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a296:	f7f6 f9bf 	bl	8000618 <__aeabi_dmul>
 800a29a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a29e:	1064      	asrs	r4, r4, #1
 800a2a0:	3508      	adds	r5, #8
 800a2a2:	e7e5      	b.n	800a270 <_dtoa_r+0x340>
 800a2a4:	f000 80af 	beq.w	800a406 <_dtoa_r+0x4d6>
 800a2a8:	427c      	negs	r4, r7
 800a2aa:	4b81      	ldr	r3, [pc, #516]	@ (800a4b0 <_dtoa_r+0x580>)
 800a2ac:	4d81      	ldr	r5, [pc, #516]	@ (800a4b4 <_dtoa_r+0x584>)
 800a2ae:	2602      	movs	r6, #2
 800a2b0:	f004 020f 	and.w	r2, r4, #15
 800a2b4:	1124      	asrs	r4, r4, #4
 800a2b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a2ba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a2be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2c2:	f7f6 f9a9 	bl	8000618 <__aeabi_dmul>
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a2cc:	2c00      	cmp	r4, #0
 800a2ce:	f040 808f 	bne.w	800a3f0 <_dtoa_r+0x4c0>
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d1d3      	bne.n	800a27e <_dtoa_r+0x34e>
 800a2d6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a2d8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	f000 8094 	beq.w	800a40a <_dtoa_r+0x4da>
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	4b74      	ldr	r3, [pc, #464]	@ (800a4b8 <_dtoa_r+0x588>)
 800a2e6:	4620      	mov	r0, r4
 800a2e8:	4629      	mov	r1, r5
 800a2ea:	f7f6 fc07 	bl	8000afc <__aeabi_dcmplt>
 800a2ee:	2800      	cmp	r0, #0
 800a2f0:	f000 808b 	beq.w	800a40a <_dtoa_r+0x4da>
 800a2f4:	9b03      	ldr	r3, [sp, #12]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	f000 8087 	beq.w	800a40a <_dtoa_r+0x4da>
 800a2fc:	f1bb 0f00 	cmp.w	fp, #0
 800a300:	dd34      	ble.n	800a36c <_dtoa_r+0x43c>
 800a302:	4620      	mov	r0, r4
 800a304:	f107 38ff 	add.w	r8, r7, #4294967295
 800a308:	3601      	adds	r6, #1
 800a30a:	465c      	mov	r4, fp
 800a30c:	2200      	movs	r2, #0
 800a30e:	4b6b      	ldr	r3, [pc, #428]	@ (800a4bc <_dtoa_r+0x58c>)
 800a310:	4629      	mov	r1, r5
 800a312:	f7f6 f981 	bl	8000618 <__aeabi_dmul>
 800a316:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a31a:	4630      	mov	r0, r6
 800a31c:	f7f6 f912 	bl	8000544 <__aeabi_i2d>
 800a320:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a324:	f7f6 f978 	bl	8000618 <__aeabi_dmul>
 800a328:	2200      	movs	r2, #0
 800a32a:	4b65      	ldr	r3, [pc, #404]	@ (800a4c0 <_dtoa_r+0x590>)
 800a32c:	f7f5 ffbe 	bl	80002ac <__adddf3>
 800a330:	4605      	mov	r5, r0
 800a332:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a336:	2c00      	cmp	r4, #0
 800a338:	d16a      	bne.n	800a410 <_dtoa_r+0x4e0>
 800a33a:	2200      	movs	r2, #0
 800a33c:	4b61      	ldr	r3, [pc, #388]	@ (800a4c4 <_dtoa_r+0x594>)
 800a33e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a342:	f7f5 ffb1 	bl	80002a8 <__aeabi_dsub>
 800a346:	4602      	mov	r2, r0
 800a348:	460b      	mov	r3, r1
 800a34a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a34e:	462a      	mov	r2, r5
 800a350:	4633      	mov	r3, r6
 800a352:	f7f6 fbf1 	bl	8000b38 <__aeabi_dcmpgt>
 800a356:	2800      	cmp	r0, #0
 800a358:	f040 8298 	bne.w	800a88c <_dtoa_r+0x95c>
 800a35c:	462a      	mov	r2, r5
 800a35e:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a362:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a366:	f7f6 fbc9 	bl	8000afc <__aeabi_dcmplt>
 800a36a:	bb38      	cbnz	r0, 800a3bc <_dtoa_r+0x48c>
 800a36c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800a370:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a374:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800a376:	2b00      	cmp	r3, #0
 800a378:	f2c0 8157 	blt.w	800a62a <_dtoa_r+0x6fa>
 800a37c:	2f0e      	cmp	r7, #14
 800a37e:	f300 8154 	bgt.w	800a62a <_dtoa_r+0x6fa>
 800a382:	4b4b      	ldr	r3, [pc, #300]	@ (800a4b0 <_dtoa_r+0x580>)
 800a384:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a388:	ed93 7b00 	vldr	d7, [r3]
 800a38c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a38e:	2b00      	cmp	r3, #0
 800a390:	ed8d 7b00 	vstr	d7, [sp]
 800a394:	f280 80e5 	bge.w	800a562 <_dtoa_r+0x632>
 800a398:	9b03      	ldr	r3, [sp, #12]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	f300 80e1 	bgt.w	800a562 <_dtoa_r+0x632>
 800a3a0:	d10c      	bne.n	800a3bc <_dtoa_r+0x48c>
 800a3a2:	2200      	movs	r2, #0
 800a3a4:	4b47      	ldr	r3, [pc, #284]	@ (800a4c4 <_dtoa_r+0x594>)
 800a3a6:	ec51 0b17 	vmov	r0, r1, d7
 800a3aa:	f7f6 f935 	bl	8000618 <__aeabi_dmul>
 800a3ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a3b2:	f7f6 fbb7 	bl	8000b24 <__aeabi_dcmpge>
 800a3b6:	2800      	cmp	r0, #0
 800a3b8:	f000 8266 	beq.w	800a888 <_dtoa_r+0x958>
 800a3bc:	2400      	movs	r4, #0
 800a3be:	4625      	mov	r5, r4
 800a3c0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a3c2:	4656      	mov	r6, sl
 800a3c4:	ea6f 0803 	mvn.w	r8, r3
 800a3c8:	2700      	movs	r7, #0
 800a3ca:	4621      	mov	r1, r4
 800a3cc:	4648      	mov	r0, r9
 800a3ce:	f000 fcc1 	bl	800ad54 <_Bfree>
 800a3d2:	2d00      	cmp	r5, #0
 800a3d4:	f000 80bd 	beq.w	800a552 <_dtoa_r+0x622>
 800a3d8:	b12f      	cbz	r7, 800a3e6 <_dtoa_r+0x4b6>
 800a3da:	42af      	cmp	r7, r5
 800a3dc:	d003      	beq.n	800a3e6 <_dtoa_r+0x4b6>
 800a3de:	4639      	mov	r1, r7
 800a3e0:	4648      	mov	r0, r9
 800a3e2:	f000 fcb7 	bl	800ad54 <_Bfree>
 800a3e6:	4629      	mov	r1, r5
 800a3e8:	4648      	mov	r0, r9
 800a3ea:	f000 fcb3 	bl	800ad54 <_Bfree>
 800a3ee:	e0b0      	b.n	800a552 <_dtoa_r+0x622>
 800a3f0:	07e2      	lsls	r2, r4, #31
 800a3f2:	d505      	bpl.n	800a400 <_dtoa_r+0x4d0>
 800a3f4:	3601      	adds	r6, #1
 800a3f6:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a3fa:	f7f6 f90d 	bl	8000618 <__aeabi_dmul>
 800a3fe:	2301      	movs	r3, #1
 800a400:	1064      	asrs	r4, r4, #1
 800a402:	3508      	adds	r5, #8
 800a404:	e762      	b.n	800a2cc <_dtoa_r+0x39c>
 800a406:	2602      	movs	r6, #2
 800a408:	e765      	b.n	800a2d6 <_dtoa_r+0x3a6>
 800a40a:	46b8      	mov	r8, r7
 800a40c:	9c03      	ldr	r4, [sp, #12]
 800a40e:	e784      	b.n	800a31a <_dtoa_r+0x3ea>
 800a410:	4b27      	ldr	r3, [pc, #156]	@ (800a4b0 <_dtoa_r+0x580>)
 800a412:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a414:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a418:	4454      	add	r4, sl
 800a41a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a41e:	2900      	cmp	r1, #0
 800a420:	d054      	beq.n	800a4cc <_dtoa_r+0x59c>
 800a422:	2000      	movs	r0, #0
 800a424:	4928      	ldr	r1, [pc, #160]	@ (800a4c8 <_dtoa_r+0x598>)
 800a426:	f7f6 fa21 	bl	800086c <__aeabi_ddiv>
 800a42a:	4633      	mov	r3, r6
 800a42c:	4656      	mov	r6, sl
 800a42e:	462a      	mov	r2, r5
 800a430:	f7f5 ff3a 	bl	80002a8 <__aeabi_dsub>
 800a434:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a438:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a43c:	f7f6 fb9c 	bl	8000b78 <__aeabi_d2iz>
 800a440:	4605      	mov	r5, r0
 800a442:	f7f6 f87f 	bl	8000544 <__aeabi_i2d>
 800a446:	4602      	mov	r2, r0
 800a448:	460b      	mov	r3, r1
 800a44a:	3530      	adds	r5, #48	@ 0x30
 800a44c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a450:	f7f5 ff2a 	bl	80002a8 <__aeabi_dsub>
 800a454:	4602      	mov	r2, r0
 800a456:	460b      	mov	r3, r1
 800a458:	f806 5b01 	strb.w	r5, [r6], #1
 800a45c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a460:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a464:	f7f6 fb4a 	bl	8000afc <__aeabi_dcmplt>
 800a468:	2800      	cmp	r0, #0
 800a46a:	d172      	bne.n	800a552 <_dtoa_r+0x622>
 800a46c:	2000      	movs	r0, #0
 800a46e:	4912      	ldr	r1, [pc, #72]	@ (800a4b8 <_dtoa_r+0x588>)
 800a470:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a474:	f7f5 ff18 	bl	80002a8 <__aeabi_dsub>
 800a478:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a47c:	f7f6 fb3e 	bl	8000afc <__aeabi_dcmplt>
 800a480:	2800      	cmp	r0, #0
 800a482:	f040 80b4 	bne.w	800a5ee <_dtoa_r+0x6be>
 800a486:	42a6      	cmp	r6, r4
 800a488:	f43f af70 	beq.w	800a36c <_dtoa_r+0x43c>
 800a48c:	2200      	movs	r2, #0
 800a48e:	4b0b      	ldr	r3, [pc, #44]	@ (800a4bc <_dtoa_r+0x58c>)
 800a490:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800a494:	f7f6 f8c0 	bl	8000618 <__aeabi_dmul>
 800a498:	2200      	movs	r2, #0
 800a49a:	4b08      	ldr	r3, [pc, #32]	@ (800a4bc <_dtoa_r+0x58c>)
 800a49c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a4a0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a4a4:	f7f6 f8b8 	bl	8000618 <__aeabi_dmul>
 800a4a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a4ac:	e7c4      	b.n	800a438 <_dtoa_r+0x508>
 800a4ae:	bf00      	nop
 800a4b0:	0800c188 	.word	0x0800c188
 800a4b4:	0800c160 	.word	0x0800c160
 800a4b8:	3ff00000 	.word	0x3ff00000
 800a4bc:	40240000 	.word	0x40240000
 800a4c0:	401c0000 	.word	0x401c0000
 800a4c4:	40140000 	.word	0x40140000
 800a4c8:	3fe00000 	.word	0x3fe00000
 800a4cc:	4631      	mov	r1, r6
 800a4ce:	4656      	mov	r6, sl
 800a4d0:	4628      	mov	r0, r5
 800a4d2:	f7f6 f8a1 	bl	8000618 <__aeabi_dmul>
 800a4d6:	9413      	str	r4, [sp, #76]	@ 0x4c
 800a4d8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a4dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a4e0:	f7f6 fb4a 	bl	8000b78 <__aeabi_d2iz>
 800a4e4:	4605      	mov	r5, r0
 800a4e6:	f7f6 f82d 	bl	8000544 <__aeabi_i2d>
 800a4ea:	4602      	mov	r2, r0
 800a4ec:	3530      	adds	r5, #48	@ 0x30
 800a4ee:	460b      	mov	r3, r1
 800a4f0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a4f4:	f7f5 fed8 	bl	80002a8 <__aeabi_dsub>
 800a4f8:	f806 5b01 	strb.w	r5, [r6], #1
 800a4fc:	4602      	mov	r2, r0
 800a4fe:	460b      	mov	r3, r1
 800a500:	42a6      	cmp	r6, r4
 800a502:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a506:	f04f 0200 	mov.w	r2, #0
 800a50a:	d124      	bne.n	800a556 <_dtoa_r+0x626>
 800a50c:	4baf      	ldr	r3, [pc, #700]	@ (800a7cc <_dtoa_r+0x89c>)
 800a50e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800a512:	f7f5 fecb 	bl	80002ac <__adddf3>
 800a516:	4602      	mov	r2, r0
 800a518:	460b      	mov	r3, r1
 800a51a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a51e:	f7f6 fb0b 	bl	8000b38 <__aeabi_dcmpgt>
 800a522:	2800      	cmp	r0, #0
 800a524:	d163      	bne.n	800a5ee <_dtoa_r+0x6be>
 800a526:	2000      	movs	r0, #0
 800a528:	49a8      	ldr	r1, [pc, #672]	@ (800a7cc <_dtoa_r+0x89c>)
 800a52a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a52e:	f7f5 febb 	bl	80002a8 <__aeabi_dsub>
 800a532:	4602      	mov	r2, r0
 800a534:	460b      	mov	r3, r1
 800a536:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a53a:	f7f6 fadf 	bl	8000afc <__aeabi_dcmplt>
 800a53e:	2800      	cmp	r0, #0
 800a540:	f43f af14 	beq.w	800a36c <_dtoa_r+0x43c>
 800a544:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800a546:	1e73      	subs	r3, r6, #1
 800a548:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a54a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a54e:	2b30      	cmp	r3, #48	@ 0x30
 800a550:	d0f8      	beq.n	800a544 <_dtoa_r+0x614>
 800a552:	4647      	mov	r7, r8
 800a554:	e03b      	b.n	800a5ce <_dtoa_r+0x69e>
 800a556:	4b9e      	ldr	r3, [pc, #632]	@ (800a7d0 <_dtoa_r+0x8a0>)
 800a558:	f7f6 f85e 	bl	8000618 <__aeabi_dmul>
 800a55c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a560:	e7bc      	b.n	800a4dc <_dtoa_r+0x5ac>
 800a562:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800a566:	4656      	mov	r6, sl
 800a568:	4620      	mov	r0, r4
 800a56a:	4629      	mov	r1, r5
 800a56c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a570:	f7f6 f97c 	bl	800086c <__aeabi_ddiv>
 800a574:	f7f6 fb00 	bl	8000b78 <__aeabi_d2iz>
 800a578:	4680      	mov	r8, r0
 800a57a:	f7f5 ffe3 	bl	8000544 <__aeabi_i2d>
 800a57e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a582:	f7f6 f849 	bl	8000618 <__aeabi_dmul>
 800a586:	4602      	mov	r2, r0
 800a588:	4620      	mov	r0, r4
 800a58a:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a58e:	460b      	mov	r3, r1
 800a590:	4629      	mov	r1, r5
 800a592:	f7f5 fe89 	bl	80002a8 <__aeabi_dsub>
 800a596:	9d03      	ldr	r5, [sp, #12]
 800a598:	f806 4b01 	strb.w	r4, [r6], #1
 800a59c:	eba6 040a 	sub.w	r4, r6, sl
 800a5a0:	4602      	mov	r2, r0
 800a5a2:	460b      	mov	r3, r1
 800a5a4:	42a5      	cmp	r5, r4
 800a5a6:	d133      	bne.n	800a610 <_dtoa_r+0x6e0>
 800a5a8:	f7f5 fe80 	bl	80002ac <__adddf3>
 800a5ac:	4604      	mov	r4, r0
 800a5ae:	460d      	mov	r5, r1
 800a5b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a5b4:	f7f6 fac0 	bl	8000b38 <__aeabi_dcmpgt>
 800a5b8:	b9c0      	cbnz	r0, 800a5ec <_dtoa_r+0x6bc>
 800a5ba:	4620      	mov	r0, r4
 800a5bc:	4629      	mov	r1, r5
 800a5be:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a5c2:	f7f6 fa91 	bl	8000ae8 <__aeabi_dcmpeq>
 800a5c6:	b110      	cbz	r0, 800a5ce <_dtoa_r+0x69e>
 800a5c8:	f018 0f01 	tst.w	r8, #1
 800a5cc:	d10e      	bne.n	800a5ec <_dtoa_r+0x6bc>
 800a5ce:	9902      	ldr	r1, [sp, #8]
 800a5d0:	4648      	mov	r0, r9
 800a5d2:	f000 fbbf 	bl	800ad54 <_Bfree>
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	3701      	adds	r7, #1
 800a5da:	7033      	strb	r3, [r6, #0]
 800a5dc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a5de:	601f      	str	r7, [r3, #0]
 800a5e0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	f000 824c 	beq.w	800aa80 <_dtoa_r+0xb50>
 800a5e8:	601e      	str	r6, [r3, #0]
 800a5ea:	e249      	b.n	800aa80 <_dtoa_r+0xb50>
 800a5ec:	46b8      	mov	r8, r7
 800a5ee:	4633      	mov	r3, r6
 800a5f0:	461e      	mov	r6, r3
 800a5f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a5f6:	2a39      	cmp	r2, #57	@ 0x39
 800a5f8:	d106      	bne.n	800a608 <_dtoa_r+0x6d8>
 800a5fa:	459a      	cmp	sl, r3
 800a5fc:	d1f8      	bne.n	800a5f0 <_dtoa_r+0x6c0>
 800a5fe:	2230      	movs	r2, #48	@ 0x30
 800a600:	f108 0801 	add.w	r8, r8, #1
 800a604:	f88a 2000 	strb.w	r2, [sl]
 800a608:	781a      	ldrb	r2, [r3, #0]
 800a60a:	3201      	adds	r2, #1
 800a60c:	701a      	strb	r2, [r3, #0]
 800a60e:	e7a0      	b.n	800a552 <_dtoa_r+0x622>
 800a610:	2200      	movs	r2, #0
 800a612:	4b6f      	ldr	r3, [pc, #444]	@ (800a7d0 <_dtoa_r+0x8a0>)
 800a614:	f7f6 f800 	bl	8000618 <__aeabi_dmul>
 800a618:	2200      	movs	r2, #0
 800a61a:	2300      	movs	r3, #0
 800a61c:	4604      	mov	r4, r0
 800a61e:	460d      	mov	r5, r1
 800a620:	f7f6 fa62 	bl	8000ae8 <__aeabi_dcmpeq>
 800a624:	2800      	cmp	r0, #0
 800a626:	d09f      	beq.n	800a568 <_dtoa_r+0x638>
 800a628:	e7d1      	b.n	800a5ce <_dtoa_r+0x69e>
 800a62a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a62c:	2a00      	cmp	r2, #0
 800a62e:	f000 80ea 	beq.w	800a806 <_dtoa_r+0x8d6>
 800a632:	9a07      	ldr	r2, [sp, #28]
 800a634:	2a01      	cmp	r2, #1
 800a636:	f300 80cd 	bgt.w	800a7d4 <_dtoa_r+0x8a4>
 800a63a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a63c:	2a00      	cmp	r2, #0
 800a63e:	f000 80c1 	beq.w	800a7c4 <_dtoa_r+0x894>
 800a642:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a646:	9c08      	ldr	r4, [sp, #32]
 800a648:	9e00      	ldr	r6, [sp, #0]
 800a64a:	9a00      	ldr	r2, [sp, #0]
 800a64c:	2101      	movs	r1, #1
 800a64e:	4648      	mov	r0, r9
 800a650:	441a      	add	r2, r3
 800a652:	9200      	str	r2, [sp, #0]
 800a654:	9a06      	ldr	r2, [sp, #24]
 800a656:	441a      	add	r2, r3
 800a658:	9206      	str	r2, [sp, #24]
 800a65a:	f000 fc31 	bl	800aec0 <__i2b>
 800a65e:	4605      	mov	r5, r0
 800a660:	b166      	cbz	r6, 800a67c <_dtoa_r+0x74c>
 800a662:	9b06      	ldr	r3, [sp, #24]
 800a664:	2b00      	cmp	r3, #0
 800a666:	dd09      	ble.n	800a67c <_dtoa_r+0x74c>
 800a668:	42b3      	cmp	r3, r6
 800a66a:	9a00      	ldr	r2, [sp, #0]
 800a66c:	bfa8      	it	ge
 800a66e:	4633      	movge	r3, r6
 800a670:	1ad2      	subs	r2, r2, r3
 800a672:	1af6      	subs	r6, r6, r3
 800a674:	9200      	str	r2, [sp, #0]
 800a676:	9a06      	ldr	r2, [sp, #24]
 800a678:	1ad3      	subs	r3, r2, r3
 800a67a:	9306      	str	r3, [sp, #24]
 800a67c:	9b08      	ldr	r3, [sp, #32]
 800a67e:	b30b      	cbz	r3, 800a6c4 <_dtoa_r+0x794>
 800a680:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a682:	2b00      	cmp	r3, #0
 800a684:	f000 80c6 	beq.w	800a814 <_dtoa_r+0x8e4>
 800a688:	2c00      	cmp	r4, #0
 800a68a:	f000 80c0 	beq.w	800a80e <_dtoa_r+0x8de>
 800a68e:	4629      	mov	r1, r5
 800a690:	4622      	mov	r2, r4
 800a692:	4648      	mov	r0, r9
 800a694:	f000 fcce 	bl	800b034 <__pow5mult>
 800a698:	9a02      	ldr	r2, [sp, #8]
 800a69a:	4601      	mov	r1, r0
 800a69c:	4605      	mov	r5, r0
 800a69e:	4648      	mov	r0, r9
 800a6a0:	f000 fc24 	bl	800aeec <__multiply>
 800a6a4:	9902      	ldr	r1, [sp, #8]
 800a6a6:	4680      	mov	r8, r0
 800a6a8:	4648      	mov	r0, r9
 800a6aa:	f000 fb53 	bl	800ad54 <_Bfree>
 800a6ae:	9b08      	ldr	r3, [sp, #32]
 800a6b0:	1b1b      	subs	r3, r3, r4
 800a6b2:	9308      	str	r3, [sp, #32]
 800a6b4:	f000 80b1 	beq.w	800a81a <_dtoa_r+0x8ea>
 800a6b8:	9a08      	ldr	r2, [sp, #32]
 800a6ba:	4641      	mov	r1, r8
 800a6bc:	4648      	mov	r0, r9
 800a6be:	f000 fcb9 	bl	800b034 <__pow5mult>
 800a6c2:	9002      	str	r0, [sp, #8]
 800a6c4:	2101      	movs	r1, #1
 800a6c6:	4648      	mov	r0, r9
 800a6c8:	f000 fbfa 	bl	800aec0 <__i2b>
 800a6cc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a6ce:	4604      	mov	r4, r0
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	f000 81d9 	beq.w	800aa88 <_dtoa_r+0xb58>
 800a6d6:	461a      	mov	r2, r3
 800a6d8:	4601      	mov	r1, r0
 800a6da:	4648      	mov	r0, r9
 800a6dc:	f000 fcaa 	bl	800b034 <__pow5mult>
 800a6e0:	9b07      	ldr	r3, [sp, #28]
 800a6e2:	4604      	mov	r4, r0
 800a6e4:	2b01      	cmp	r3, #1
 800a6e6:	f300 809f 	bgt.w	800a828 <_dtoa_r+0x8f8>
 800a6ea:	9b04      	ldr	r3, [sp, #16]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	f040 8097 	bne.w	800a820 <_dtoa_r+0x8f0>
 800a6f2:	9b05      	ldr	r3, [sp, #20]
 800a6f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	f040 8093 	bne.w	800a824 <_dtoa_r+0x8f4>
 800a6fe:	9b05      	ldr	r3, [sp, #20]
 800a700:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a704:	0d1b      	lsrs	r3, r3, #20
 800a706:	051b      	lsls	r3, r3, #20
 800a708:	b133      	cbz	r3, 800a718 <_dtoa_r+0x7e8>
 800a70a:	9b00      	ldr	r3, [sp, #0]
 800a70c:	3301      	adds	r3, #1
 800a70e:	9300      	str	r3, [sp, #0]
 800a710:	9b06      	ldr	r3, [sp, #24]
 800a712:	3301      	adds	r3, #1
 800a714:	9306      	str	r3, [sp, #24]
 800a716:	2301      	movs	r3, #1
 800a718:	9308      	str	r3, [sp, #32]
 800a71a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	f000 81b9 	beq.w	800aa94 <_dtoa_r+0xb64>
 800a722:	6923      	ldr	r3, [r4, #16]
 800a724:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a728:	6918      	ldr	r0, [r3, #16]
 800a72a:	f000 fb7d 	bl	800ae28 <__hi0bits>
 800a72e:	f1c0 0020 	rsb	r0, r0, #32
 800a732:	9b06      	ldr	r3, [sp, #24]
 800a734:	4418      	add	r0, r3
 800a736:	f010 001f 	ands.w	r0, r0, #31
 800a73a:	f000 8082 	beq.w	800a842 <_dtoa_r+0x912>
 800a73e:	f1c0 0320 	rsb	r3, r0, #32
 800a742:	2b04      	cmp	r3, #4
 800a744:	dd73      	ble.n	800a82e <_dtoa_r+0x8fe>
 800a746:	f1c0 001c 	rsb	r0, r0, #28
 800a74a:	9b00      	ldr	r3, [sp, #0]
 800a74c:	4403      	add	r3, r0
 800a74e:	4406      	add	r6, r0
 800a750:	9300      	str	r3, [sp, #0]
 800a752:	9b06      	ldr	r3, [sp, #24]
 800a754:	4403      	add	r3, r0
 800a756:	9306      	str	r3, [sp, #24]
 800a758:	9b00      	ldr	r3, [sp, #0]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	dd05      	ble.n	800a76a <_dtoa_r+0x83a>
 800a75e:	461a      	mov	r2, r3
 800a760:	9902      	ldr	r1, [sp, #8]
 800a762:	4648      	mov	r0, r9
 800a764:	f000 fcc0 	bl	800b0e8 <__lshift>
 800a768:	9002      	str	r0, [sp, #8]
 800a76a:	9b06      	ldr	r3, [sp, #24]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	dd05      	ble.n	800a77c <_dtoa_r+0x84c>
 800a770:	4621      	mov	r1, r4
 800a772:	461a      	mov	r2, r3
 800a774:	4648      	mov	r0, r9
 800a776:	f000 fcb7 	bl	800b0e8 <__lshift>
 800a77a:	4604      	mov	r4, r0
 800a77c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d061      	beq.n	800a846 <_dtoa_r+0x916>
 800a782:	4621      	mov	r1, r4
 800a784:	9802      	ldr	r0, [sp, #8]
 800a786:	f000 fd1b 	bl	800b1c0 <__mcmp>
 800a78a:	2800      	cmp	r0, #0
 800a78c:	da5b      	bge.n	800a846 <_dtoa_r+0x916>
 800a78e:	2300      	movs	r3, #0
 800a790:	220a      	movs	r2, #10
 800a792:	9902      	ldr	r1, [sp, #8]
 800a794:	4648      	mov	r0, r9
 800a796:	f000 faff 	bl	800ad98 <__multadd>
 800a79a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a79c:	f107 38ff 	add.w	r8, r7, #4294967295
 800a7a0:	9002      	str	r0, [sp, #8]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	f000 8178 	beq.w	800aa98 <_dtoa_r+0xb68>
 800a7a8:	4629      	mov	r1, r5
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	220a      	movs	r2, #10
 800a7ae:	4648      	mov	r0, r9
 800a7b0:	f000 faf2 	bl	800ad98 <__multadd>
 800a7b4:	f1bb 0f00 	cmp.w	fp, #0
 800a7b8:	4605      	mov	r5, r0
 800a7ba:	dc6f      	bgt.n	800a89c <_dtoa_r+0x96c>
 800a7bc:	9b07      	ldr	r3, [sp, #28]
 800a7be:	2b02      	cmp	r3, #2
 800a7c0:	dc49      	bgt.n	800a856 <_dtoa_r+0x926>
 800a7c2:	e06b      	b.n	800a89c <_dtoa_r+0x96c>
 800a7c4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a7c6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a7ca:	e73c      	b.n	800a646 <_dtoa_r+0x716>
 800a7cc:	3fe00000 	.word	0x3fe00000
 800a7d0:	40240000 	.word	0x40240000
 800a7d4:	9b03      	ldr	r3, [sp, #12]
 800a7d6:	1e5c      	subs	r4, r3, #1
 800a7d8:	9b08      	ldr	r3, [sp, #32]
 800a7da:	42a3      	cmp	r3, r4
 800a7dc:	db09      	blt.n	800a7f2 <_dtoa_r+0x8c2>
 800a7de:	1b1c      	subs	r4, r3, r4
 800a7e0:	9b03      	ldr	r3, [sp, #12]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	f6bf af30 	bge.w	800a648 <_dtoa_r+0x718>
 800a7e8:	9b00      	ldr	r3, [sp, #0]
 800a7ea:	9a03      	ldr	r2, [sp, #12]
 800a7ec:	1a9e      	subs	r6, r3, r2
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	e72b      	b.n	800a64a <_dtoa_r+0x71a>
 800a7f2:	9b08      	ldr	r3, [sp, #32]
 800a7f4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a7f6:	1ae3      	subs	r3, r4, r3
 800a7f8:	9408      	str	r4, [sp, #32]
 800a7fa:	9e00      	ldr	r6, [sp, #0]
 800a7fc:	2400      	movs	r4, #0
 800a7fe:	441a      	add	r2, r3
 800a800:	9b03      	ldr	r3, [sp, #12]
 800a802:	920d      	str	r2, [sp, #52]	@ 0x34
 800a804:	e721      	b.n	800a64a <_dtoa_r+0x71a>
 800a806:	9c08      	ldr	r4, [sp, #32]
 800a808:	9e00      	ldr	r6, [sp, #0]
 800a80a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800a80c:	e728      	b.n	800a660 <_dtoa_r+0x730>
 800a80e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800a812:	e751      	b.n	800a6b8 <_dtoa_r+0x788>
 800a814:	9a08      	ldr	r2, [sp, #32]
 800a816:	9902      	ldr	r1, [sp, #8]
 800a818:	e750      	b.n	800a6bc <_dtoa_r+0x78c>
 800a81a:	f8cd 8008 	str.w	r8, [sp, #8]
 800a81e:	e751      	b.n	800a6c4 <_dtoa_r+0x794>
 800a820:	2300      	movs	r3, #0
 800a822:	e779      	b.n	800a718 <_dtoa_r+0x7e8>
 800a824:	9b04      	ldr	r3, [sp, #16]
 800a826:	e777      	b.n	800a718 <_dtoa_r+0x7e8>
 800a828:	2300      	movs	r3, #0
 800a82a:	9308      	str	r3, [sp, #32]
 800a82c:	e779      	b.n	800a722 <_dtoa_r+0x7f2>
 800a82e:	d093      	beq.n	800a758 <_dtoa_r+0x828>
 800a830:	331c      	adds	r3, #28
 800a832:	9a00      	ldr	r2, [sp, #0]
 800a834:	441a      	add	r2, r3
 800a836:	441e      	add	r6, r3
 800a838:	9200      	str	r2, [sp, #0]
 800a83a:	9a06      	ldr	r2, [sp, #24]
 800a83c:	441a      	add	r2, r3
 800a83e:	9206      	str	r2, [sp, #24]
 800a840:	e78a      	b.n	800a758 <_dtoa_r+0x828>
 800a842:	4603      	mov	r3, r0
 800a844:	e7f4      	b.n	800a830 <_dtoa_r+0x900>
 800a846:	9b03      	ldr	r3, [sp, #12]
 800a848:	46b8      	mov	r8, r7
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	dc20      	bgt.n	800a890 <_dtoa_r+0x960>
 800a84e:	469b      	mov	fp, r3
 800a850:	9b07      	ldr	r3, [sp, #28]
 800a852:	2b02      	cmp	r3, #2
 800a854:	dd1e      	ble.n	800a894 <_dtoa_r+0x964>
 800a856:	f1bb 0f00 	cmp.w	fp, #0
 800a85a:	f47f adb1 	bne.w	800a3c0 <_dtoa_r+0x490>
 800a85e:	4621      	mov	r1, r4
 800a860:	465b      	mov	r3, fp
 800a862:	2205      	movs	r2, #5
 800a864:	4648      	mov	r0, r9
 800a866:	f000 fa97 	bl	800ad98 <__multadd>
 800a86a:	4601      	mov	r1, r0
 800a86c:	4604      	mov	r4, r0
 800a86e:	9802      	ldr	r0, [sp, #8]
 800a870:	f000 fca6 	bl	800b1c0 <__mcmp>
 800a874:	2800      	cmp	r0, #0
 800a876:	f77f ada3 	ble.w	800a3c0 <_dtoa_r+0x490>
 800a87a:	4656      	mov	r6, sl
 800a87c:	2331      	movs	r3, #49	@ 0x31
 800a87e:	f108 0801 	add.w	r8, r8, #1
 800a882:	f806 3b01 	strb.w	r3, [r6], #1
 800a886:	e59f      	b.n	800a3c8 <_dtoa_r+0x498>
 800a888:	46b8      	mov	r8, r7
 800a88a:	9c03      	ldr	r4, [sp, #12]
 800a88c:	4625      	mov	r5, r4
 800a88e:	e7f4      	b.n	800a87a <_dtoa_r+0x94a>
 800a890:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800a894:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a896:	2b00      	cmp	r3, #0
 800a898:	f000 8102 	beq.w	800aaa0 <_dtoa_r+0xb70>
 800a89c:	2e00      	cmp	r6, #0
 800a89e:	dd05      	ble.n	800a8ac <_dtoa_r+0x97c>
 800a8a0:	4629      	mov	r1, r5
 800a8a2:	4632      	mov	r2, r6
 800a8a4:	4648      	mov	r0, r9
 800a8a6:	f000 fc1f 	bl	800b0e8 <__lshift>
 800a8aa:	4605      	mov	r5, r0
 800a8ac:	9b08      	ldr	r3, [sp, #32]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d05c      	beq.n	800a96c <_dtoa_r+0xa3c>
 800a8b2:	6869      	ldr	r1, [r5, #4]
 800a8b4:	4648      	mov	r0, r9
 800a8b6:	f000 fa0d 	bl	800acd4 <_Balloc>
 800a8ba:	4606      	mov	r6, r0
 800a8bc:	b928      	cbnz	r0, 800a8ca <_dtoa_r+0x99a>
 800a8be:	4b83      	ldr	r3, [pc, #524]	@ (800aacc <_dtoa_r+0xb9c>)
 800a8c0:	4602      	mov	r2, r0
 800a8c2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a8c6:	f7ff bb4a 	b.w	8009f5e <_dtoa_r+0x2e>
 800a8ca:	692a      	ldr	r2, [r5, #16]
 800a8cc:	f105 010c 	add.w	r1, r5, #12
 800a8d0:	300c      	adds	r0, #12
 800a8d2:	3202      	adds	r2, #2
 800a8d4:	0092      	lsls	r2, r2, #2
 800a8d6:	f7ff fa8e 	bl	8009df6 <memcpy>
 800a8da:	2201      	movs	r2, #1
 800a8dc:	4631      	mov	r1, r6
 800a8de:	4648      	mov	r0, r9
 800a8e0:	f000 fc02 	bl	800b0e8 <__lshift>
 800a8e4:	f10a 0301 	add.w	r3, sl, #1
 800a8e8:	462f      	mov	r7, r5
 800a8ea:	4605      	mov	r5, r0
 800a8ec:	9300      	str	r3, [sp, #0]
 800a8ee:	eb0a 030b 	add.w	r3, sl, fp
 800a8f2:	9308      	str	r3, [sp, #32]
 800a8f4:	9b04      	ldr	r3, [sp, #16]
 800a8f6:	f003 0301 	and.w	r3, r3, #1
 800a8fa:	9306      	str	r3, [sp, #24]
 800a8fc:	9b00      	ldr	r3, [sp, #0]
 800a8fe:	4621      	mov	r1, r4
 800a900:	9802      	ldr	r0, [sp, #8]
 800a902:	f103 3bff 	add.w	fp, r3, #4294967295
 800a906:	f7ff fa83 	bl	8009e10 <quorem>
 800a90a:	4603      	mov	r3, r0
 800a90c:	4639      	mov	r1, r7
 800a90e:	9003      	str	r0, [sp, #12]
 800a910:	3330      	adds	r3, #48	@ 0x30
 800a912:	9802      	ldr	r0, [sp, #8]
 800a914:	9309      	str	r3, [sp, #36]	@ 0x24
 800a916:	f000 fc53 	bl	800b1c0 <__mcmp>
 800a91a:	462a      	mov	r2, r5
 800a91c:	9004      	str	r0, [sp, #16]
 800a91e:	4621      	mov	r1, r4
 800a920:	4648      	mov	r0, r9
 800a922:	f000 fc69 	bl	800b1f8 <__mdiff>
 800a926:	68c2      	ldr	r2, [r0, #12]
 800a928:	4606      	mov	r6, r0
 800a92a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a92c:	bb02      	cbnz	r2, 800a970 <_dtoa_r+0xa40>
 800a92e:	4601      	mov	r1, r0
 800a930:	9802      	ldr	r0, [sp, #8]
 800a932:	f000 fc45 	bl	800b1c0 <__mcmp>
 800a936:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a938:	4602      	mov	r2, r0
 800a93a:	4631      	mov	r1, r6
 800a93c:	4648      	mov	r0, r9
 800a93e:	920c      	str	r2, [sp, #48]	@ 0x30
 800a940:	9309      	str	r3, [sp, #36]	@ 0x24
 800a942:	f000 fa07 	bl	800ad54 <_Bfree>
 800a946:	9b07      	ldr	r3, [sp, #28]
 800a948:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a94a:	9e00      	ldr	r6, [sp, #0]
 800a94c:	ea42 0103 	orr.w	r1, r2, r3
 800a950:	9b06      	ldr	r3, [sp, #24]
 800a952:	4319      	orrs	r1, r3
 800a954:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a956:	d10d      	bne.n	800a974 <_dtoa_r+0xa44>
 800a958:	2b39      	cmp	r3, #57	@ 0x39
 800a95a:	d027      	beq.n	800a9ac <_dtoa_r+0xa7c>
 800a95c:	9a04      	ldr	r2, [sp, #16]
 800a95e:	2a00      	cmp	r2, #0
 800a960:	dd01      	ble.n	800a966 <_dtoa_r+0xa36>
 800a962:	9b03      	ldr	r3, [sp, #12]
 800a964:	3331      	adds	r3, #49	@ 0x31
 800a966:	f88b 3000 	strb.w	r3, [fp]
 800a96a:	e52e      	b.n	800a3ca <_dtoa_r+0x49a>
 800a96c:	4628      	mov	r0, r5
 800a96e:	e7b9      	b.n	800a8e4 <_dtoa_r+0x9b4>
 800a970:	2201      	movs	r2, #1
 800a972:	e7e2      	b.n	800a93a <_dtoa_r+0xa0a>
 800a974:	9904      	ldr	r1, [sp, #16]
 800a976:	2900      	cmp	r1, #0
 800a978:	db04      	blt.n	800a984 <_dtoa_r+0xa54>
 800a97a:	9807      	ldr	r0, [sp, #28]
 800a97c:	4301      	orrs	r1, r0
 800a97e:	9806      	ldr	r0, [sp, #24]
 800a980:	4301      	orrs	r1, r0
 800a982:	d120      	bne.n	800a9c6 <_dtoa_r+0xa96>
 800a984:	2a00      	cmp	r2, #0
 800a986:	ddee      	ble.n	800a966 <_dtoa_r+0xa36>
 800a988:	2201      	movs	r2, #1
 800a98a:	9902      	ldr	r1, [sp, #8]
 800a98c:	4648      	mov	r0, r9
 800a98e:	9300      	str	r3, [sp, #0]
 800a990:	f000 fbaa 	bl	800b0e8 <__lshift>
 800a994:	4621      	mov	r1, r4
 800a996:	9002      	str	r0, [sp, #8]
 800a998:	f000 fc12 	bl	800b1c0 <__mcmp>
 800a99c:	2800      	cmp	r0, #0
 800a99e:	9b00      	ldr	r3, [sp, #0]
 800a9a0:	dc02      	bgt.n	800a9a8 <_dtoa_r+0xa78>
 800a9a2:	d1e0      	bne.n	800a966 <_dtoa_r+0xa36>
 800a9a4:	07da      	lsls	r2, r3, #31
 800a9a6:	d5de      	bpl.n	800a966 <_dtoa_r+0xa36>
 800a9a8:	2b39      	cmp	r3, #57	@ 0x39
 800a9aa:	d1da      	bne.n	800a962 <_dtoa_r+0xa32>
 800a9ac:	2339      	movs	r3, #57	@ 0x39
 800a9ae:	f88b 3000 	strb.w	r3, [fp]
 800a9b2:	4633      	mov	r3, r6
 800a9b4:	461e      	mov	r6, r3
 800a9b6:	3b01      	subs	r3, #1
 800a9b8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a9bc:	2a39      	cmp	r2, #57	@ 0x39
 800a9be:	d04f      	beq.n	800aa60 <_dtoa_r+0xb30>
 800a9c0:	3201      	adds	r2, #1
 800a9c2:	701a      	strb	r2, [r3, #0]
 800a9c4:	e501      	b.n	800a3ca <_dtoa_r+0x49a>
 800a9c6:	2a00      	cmp	r2, #0
 800a9c8:	dd03      	ble.n	800a9d2 <_dtoa_r+0xaa2>
 800a9ca:	2b39      	cmp	r3, #57	@ 0x39
 800a9cc:	d0ee      	beq.n	800a9ac <_dtoa_r+0xa7c>
 800a9ce:	3301      	adds	r3, #1
 800a9d0:	e7c9      	b.n	800a966 <_dtoa_r+0xa36>
 800a9d2:	9a00      	ldr	r2, [sp, #0]
 800a9d4:	9908      	ldr	r1, [sp, #32]
 800a9d6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a9da:	428a      	cmp	r2, r1
 800a9dc:	d029      	beq.n	800aa32 <_dtoa_r+0xb02>
 800a9de:	2300      	movs	r3, #0
 800a9e0:	220a      	movs	r2, #10
 800a9e2:	9902      	ldr	r1, [sp, #8]
 800a9e4:	4648      	mov	r0, r9
 800a9e6:	f000 f9d7 	bl	800ad98 <__multadd>
 800a9ea:	42af      	cmp	r7, r5
 800a9ec:	9002      	str	r0, [sp, #8]
 800a9ee:	f04f 0300 	mov.w	r3, #0
 800a9f2:	f04f 020a 	mov.w	r2, #10
 800a9f6:	4639      	mov	r1, r7
 800a9f8:	4648      	mov	r0, r9
 800a9fa:	d107      	bne.n	800aa0c <_dtoa_r+0xadc>
 800a9fc:	f000 f9cc 	bl	800ad98 <__multadd>
 800aa00:	4607      	mov	r7, r0
 800aa02:	4605      	mov	r5, r0
 800aa04:	9b00      	ldr	r3, [sp, #0]
 800aa06:	3301      	adds	r3, #1
 800aa08:	9300      	str	r3, [sp, #0]
 800aa0a:	e777      	b.n	800a8fc <_dtoa_r+0x9cc>
 800aa0c:	f000 f9c4 	bl	800ad98 <__multadd>
 800aa10:	4629      	mov	r1, r5
 800aa12:	4607      	mov	r7, r0
 800aa14:	2300      	movs	r3, #0
 800aa16:	220a      	movs	r2, #10
 800aa18:	4648      	mov	r0, r9
 800aa1a:	f000 f9bd 	bl	800ad98 <__multadd>
 800aa1e:	4605      	mov	r5, r0
 800aa20:	e7f0      	b.n	800aa04 <_dtoa_r+0xad4>
 800aa22:	f1bb 0f00 	cmp.w	fp, #0
 800aa26:	f04f 0700 	mov.w	r7, #0
 800aa2a:	bfcc      	ite	gt
 800aa2c:	465e      	movgt	r6, fp
 800aa2e:	2601      	movle	r6, #1
 800aa30:	4456      	add	r6, sl
 800aa32:	2201      	movs	r2, #1
 800aa34:	9902      	ldr	r1, [sp, #8]
 800aa36:	4648      	mov	r0, r9
 800aa38:	9300      	str	r3, [sp, #0]
 800aa3a:	f000 fb55 	bl	800b0e8 <__lshift>
 800aa3e:	4621      	mov	r1, r4
 800aa40:	9002      	str	r0, [sp, #8]
 800aa42:	f000 fbbd 	bl	800b1c0 <__mcmp>
 800aa46:	2800      	cmp	r0, #0
 800aa48:	dcb3      	bgt.n	800a9b2 <_dtoa_r+0xa82>
 800aa4a:	d102      	bne.n	800aa52 <_dtoa_r+0xb22>
 800aa4c:	9b00      	ldr	r3, [sp, #0]
 800aa4e:	07db      	lsls	r3, r3, #31
 800aa50:	d4af      	bmi.n	800a9b2 <_dtoa_r+0xa82>
 800aa52:	4633      	mov	r3, r6
 800aa54:	461e      	mov	r6, r3
 800aa56:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aa5a:	2a30      	cmp	r2, #48	@ 0x30
 800aa5c:	d0fa      	beq.n	800aa54 <_dtoa_r+0xb24>
 800aa5e:	e4b4      	b.n	800a3ca <_dtoa_r+0x49a>
 800aa60:	459a      	cmp	sl, r3
 800aa62:	d1a7      	bne.n	800a9b4 <_dtoa_r+0xa84>
 800aa64:	2331      	movs	r3, #49	@ 0x31
 800aa66:	f108 0801 	add.w	r8, r8, #1
 800aa6a:	f88a 3000 	strb.w	r3, [sl]
 800aa6e:	e4ac      	b.n	800a3ca <_dtoa_r+0x49a>
 800aa70:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800aa72:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800aad0 <_dtoa_r+0xba0>
 800aa76:	b11b      	cbz	r3, 800aa80 <_dtoa_r+0xb50>
 800aa78:	f10a 0308 	add.w	r3, sl, #8
 800aa7c:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800aa7e:	6013      	str	r3, [r2, #0]
 800aa80:	4650      	mov	r0, sl
 800aa82:	b017      	add	sp, #92	@ 0x5c
 800aa84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa88:	9b07      	ldr	r3, [sp, #28]
 800aa8a:	2b01      	cmp	r3, #1
 800aa8c:	f77f ae2d 	ble.w	800a6ea <_dtoa_r+0x7ba>
 800aa90:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800aa92:	9308      	str	r3, [sp, #32]
 800aa94:	2001      	movs	r0, #1
 800aa96:	e64c      	b.n	800a732 <_dtoa_r+0x802>
 800aa98:	f1bb 0f00 	cmp.w	fp, #0
 800aa9c:	f77f aed8 	ble.w	800a850 <_dtoa_r+0x920>
 800aaa0:	4656      	mov	r6, sl
 800aaa2:	4621      	mov	r1, r4
 800aaa4:	9802      	ldr	r0, [sp, #8]
 800aaa6:	f7ff f9b3 	bl	8009e10 <quorem>
 800aaaa:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800aaae:	f806 3b01 	strb.w	r3, [r6], #1
 800aab2:	eba6 020a 	sub.w	r2, r6, sl
 800aab6:	4593      	cmp	fp, r2
 800aab8:	ddb3      	ble.n	800aa22 <_dtoa_r+0xaf2>
 800aaba:	2300      	movs	r3, #0
 800aabc:	220a      	movs	r2, #10
 800aabe:	9902      	ldr	r1, [sp, #8]
 800aac0:	4648      	mov	r0, r9
 800aac2:	f000 f969 	bl	800ad98 <__multadd>
 800aac6:	9002      	str	r0, [sp, #8]
 800aac8:	e7eb      	b.n	800aaa2 <_dtoa_r+0xb72>
 800aaca:	bf00      	nop
 800aacc:	0800c090 	.word	0x0800c090
 800aad0:	0800c014 	.word	0x0800c014

0800aad4 <_free_r>:
 800aad4:	b538      	push	{r3, r4, r5, lr}
 800aad6:	4605      	mov	r5, r0
 800aad8:	2900      	cmp	r1, #0
 800aada:	d041      	beq.n	800ab60 <_free_r+0x8c>
 800aadc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aae0:	1f0c      	subs	r4, r1, #4
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	bfb8      	it	lt
 800aae6:	18e4      	addlt	r4, r4, r3
 800aae8:	f000 f8e8 	bl	800acbc <__malloc_lock>
 800aaec:	4a1d      	ldr	r2, [pc, #116]	@ (800ab64 <_free_r+0x90>)
 800aaee:	6813      	ldr	r3, [r2, #0]
 800aaf0:	b933      	cbnz	r3, 800ab00 <_free_r+0x2c>
 800aaf2:	6063      	str	r3, [r4, #4]
 800aaf4:	6014      	str	r4, [r2, #0]
 800aaf6:	4628      	mov	r0, r5
 800aaf8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aafc:	f000 b8e4 	b.w	800acc8 <__malloc_unlock>
 800ab00:	42a3      	cmp	r3, r4
 800ab02:	d908      	bls.n	800ab16 <_free_r+0x42>
 800ab04:	6820      	ldr	r0, [r4, #0]
 800ab06:	1821      	adds	r1, r4, r0
 800ab08:	428b      	cmp	r3, r1
 800ab0a:	bf01      	itttt	eq
 800ab0c:	6819      	ldreq	r1, [r3, #0]
 800ab0e:	685b      	ldreq	r3, [r3, #4]
 800ab10:	1809      	addeq	r1, r1, r0
 800ab12:	6021      	streq	r1, [r4, #0]
 800ab14:	e7ed      	b.n	800aaf2 <_free_r+0x1e>
 800ab16:	461a      	mov	r2, r3
 800ab18:	685b      	ldr	r3, [r3, #4]
 800ab1a:	b10b      	cbz	r3, 800ab20 <_free_r+0x4c>
 800ab1c:	42a3      	cmp	r3, r4
 800ab1e:	d9fa      	bls.n	800ab16 <_free_r+0x42>
 800ab20:	6811      	ldr	r1, [r2, #0]
 800ab22:	1850      	adds	r0, r2, r1
 800ab24:	42a0      	cmp	r0, r4
 800ab26:	d10b      	bne.n	800ab40 <_free_r+0x6c>
 800ab28:	6820      	ldr	r0, [r4, #0]
 800ab2a:	4401      	add	r1, r0
 800ab2c:	1850      	adds	r0, r2, r1
 800ab2e:	6011      	str	r1, [r2, #0]
 800ab30:	4283      	cmp	r3, r0
 800ab32:	d1e0      	bne.n	800aaf6 <_free_r+0x22>
 800ab34:	6818      	ldr	r0, [r3, #0]
 800ab36:	685b      	ldr	r3, [r3, #4]
 800ab38:	4408      	add	r0, r1
 800ab3a:	6053      	str	r3, [r2, #4]
 800ab3c:	6010      	str	r0, [r2, #0]
 800ab3e:	e7da      	b.n	800aaf6 <_free_r+0x22>
 800ab40:	d902      	bls.n	800ab48 <_free_r+0x74>
 800ab42:	230c      	movs	r3, #12
 800ab44:	602b      	str	r3, [r5, #0]
 800ab46:	e7d6      	b.n	800aaf6 <_free_r+0x22>
 800ab48:	6820      	ldr	r0, [r4, #0]
 800ab4a:	1821      	adds	r1, r4, r0
 800ab4c:	428b      	cmp	r3, r1
 800ab4e:	bf02      	ittt	eq
 800ab50:	6819      	ldreq	r1, [r3, #0]
 800ab52:	685b      	ldreq	r3, [r3, #4]
 800ab54:	1809      	addeq	r1, r1, r0
 800ab56:	6063      	str	r3, [r4, #4]
 800ab58:	bf08      	it	eq
 800ab5a:	6021      	streq	r1, [r4, #0]
 800ab5c:	6054      	str	r4, [r2, #4]
 800ab5e:	e7ca      	b.n	800aaf6 <_free_r+0x22>
 800ab60:	bd38      	pop	{r3, r4, r5, pc}
 800ab62:	bf00      	nop
 800ab64:	20000538 	.word	0x20000538

0800ab68 <malloc>:
 800ab68:	4b02      	ldr	r3, [pc, #8]	@ (800ab74 <malloc+0xc>)
 800ab6a:	4601      	mov	r1, r0
 800ab6c:	6818      	ldr	r0, [r3, #0]
 800ab6e:	f000 b825 	b.w	800abbc <_malloc_r>
 800ab72:	bf00      	nop
 800ab74:	20000020 	.word	0x20000020

0800ab78 <sbrk_aligned>:
 800ab78:	b570      	push	{r4, r5, r6, lr}
 800ab7a:	4e0f      	ldr	r6, [pc, #60]	@ (800abb8 <sbrk_aligned+0x40>)
 800ab7c:	460c      	mov	r4, r1
 800ab7e:	4605      	mov	r5, r0
 800ab80:	6831      	ldr	r1, [r6, #0]
 800ab82:	b911      	cbnz	r1, 800ab8a <sbrk_aligned+0x12>
 800ab84:	f000 fe9a 	bl	800b8bc <_sbrk_r>
 800ab88:	6030      	str	r0, [r6, #0]
 800ab8a:	4621      	mov	r1, r4
 800ab8c:	4628      	mov	r0, r5
 800ab8e:	f000 fe95 	bl	800b8bc <_sbrk_r>
 800ab92:	1c43      	adds	r3, r0, #1
 800ab94:	d103      	bne.n	800ab9e <sbrk_aligned+0x26>
 800ab96:	f04f 34ff 	mov.w	r4, #4294967295
 800ab9a:	4620      	mov	r0, r4
 800ab9c:	bd70      	pop	{r4, r5, r6, pc}
 800ab9e:	1cc4      	adds	r4, r0, #3
 800aba0:	f024 0403 	bic.w	r4, r4, #3
 800aba4:	42a0      	cmp	r0, r4
 800aba6:	d0f8      	beq.n	800ab9a <sbrk_aligned+0x22>
 800aba8:	1a21      	subs	r1, r4, r0
 800abaa:	4628      	mov	r0, r5
 800abac:	f000 fe86 	bl	800b8bc <_sbrk_r>
 800abb0:	3001      	adds	r0, #1
 800abb2:	d1f2      	bne.n	800ab9a <sbrk_aligned+0x22>
 800abb4:	e7ef      	b.n	800ab96 <sbrk_aligned+0x1e>
 800abb6:	bf00      	nop
 800abb8:	20000534 	.word	0x20000534

0800abbc <_malloc_r>:
 800abbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800abc0:	1ccd      	adds	r5, r1, #3
 800abc2:	4606      	mov	r6, r0
 800abc4:	f025 0503 	bic.w	r5, r5, #3
 800abc8:	3508      	adds	r5, #8
 800abca:	2d0c      	cmp	r5, #12
 800abcc:	bf38      	it	cc
 800abce:	250c      	movcc	r5, #12
 800abd0:	2d00      	cmp	r5, #0
 800abd2:	db01      	blt.n	800abd8 <_malloc_r+0x1c>
 800abd4:	42a9      	cmp	r1, r5
 800abd6:	d904      	bls.n	800abe2 <_malloc_r+0x26>
 800abd8:	230c      	movs	r3, #12
 800abda:	6033      	str	r3, [r6, #0]
 800abdc:	2000      	movs	r0, #0
 800abde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800abe2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800acb8 <_malloc_r+0xfc>
 800abe6:	f000 f869 	bl	800acbc <__malloc_lock>
 800abea:	f8d8 3000 	ldr.w	r3, [r8]
 800abee:	461c      	mov	r4, r3
 800abf0:	bb44      	cbnz	r4, 800ac44 <_malloc_r+0x88>
 800abf2:	4629      	mov	r1, r5
 800abf4:	4630      	mov	r0, r6
 800abf6:	f7ff ffbf 	bl	800ab78 <sbrk_aligned>
 800abfa:	1c43      	adds	r3, r0, #1
 800abfc:	4604      	mov	r4, r0
 800abfe:	d158      	bne.n	800acb2 <_malloc_r+0xf6>
 800ac00:	f8d8 4000 	ldr.w	r4, [r8]
 800ac04:	4627      	mov	r7, r4
 800ac06:	2f00      	cmp	r7, #0
 800ac08:	d143      	bne.n	800ac92 <_malloc_r+0xd6>
 800ac0a:	2c00      	cmp	r4, #0
 800ac0c:	d04b      	beq.n	800aca6 <_malloc_r+0xea>
 800ac0e:	6823      	ldr	r3, [r4, #0]
 800ac10:	4639      	mov	r1, r7
 800ac12:	4630      	mov	r0, r6
 800ac14:	eb04 0903 	add.w	r9, r4, r3
 800ac18:	f000 fe50 	bl	800b8bc <_sbrk_r>
 800ac1c:	4581      	cmp	r9, r0
 800ac1e:	d142      	bne.n	800aca6 <_malloc_r+0xea>
 800ac20:	6821      	ldr	r1, [r4, #0]
 800ac22:	4630      	mov	r0, r6
 800ac24:	1a6d      	subs	r5, r5, r1
 800ac26:	4629      	mov	r1, r5
 800ac28:	f7ff ffa6 	bl	800ab78 <sbrk_aligned>
 800ac2c:	3001      	adds	r0, #1
 800ac2e:	d03a      	beq.n	800aca6 <_malloc_r+0xea>
 800ac30:	6823      	ldr	r3, [r4, #0]
 800ac32:	442b      	add	r3, r5
 800ac34:	6023      	str	r3, [r4, #0]
 800ac36:	f8d8 3000 	ldr.w	r3, [r8]
 800ac3a:	685a      	ldr	r2, [r3, #4]
 800ac3c:	bb62      	cbnz	r2, 800ac98 <_malloc_r+0xdc>
 800ac3e:	f8c8 7000 	str.w	r7, [r8]
 800ac42:	e00f      	b.n	800ac64 <_malloc_r+0xa8>
 800ac44:	6822      	ldr	r2, [r4, #0]
 800ac46:	1b52      	subs	r2, r2, r5
 800ac48:	d420      	bmi.n	800ac8c <_malloc_r+0xd0>
 800ac4a:	2a0b      	cmp	r2, #11
 800ac4c:	d917      	bls.n	800ac7e <_malloc_r+0xc2>
 800ac4e:	1961      	adds	r1, r4, r5
 800ac50:	42a3      	cmp	r3, r4
 800ac52:	6025      	str	r5, [r4, #0]
 800ac54:	bf18      	it	ne
 800ac56:	6059      	strne	r1, [r3, #4]
 800ac58:	6863      	ldr	r3, [r4, #4]
 800ac5a:	bf08      	it	eq
 800ac5c:	f8c8 1000 	streq.w	r1, [r8]
 800ac60:	5162      	str	r2, [r4, r5]
 800ac62:	604b      	str	r3, [r1, #4]
 800ac64:	4630      	mov	r0, r6
 800ac66:	f000 f82f 	bl	800acc8 <__malloc_unlock>
 800ac6a:	f104 000b 	add.w	r0, r4, #11
 800ac6e:	1d23      	adds	r3, r4, #4
 800ac70:	f020 0007 	bic.w	r0, r0, #7
 800ac74:	1ac2      	subs	r2, r0, r3
 800ac76:	bf1c      	itt	ne
 800ac78:	1a1b      	subne	r3, r3, r0
 800ac7a:	50a3      	strne	r3, [r4, r2]
 800ac7c:	e7af      	b.n	800abde <_malloc_r+0x22>
 800ac7e:	6862      	ldr	r2, [r4, #4]
 800ac80:	42a3      	cmp	r3, r4
 800ac82:	bf0c      	ite	eq
 800ac84:	f8c8 2000 	streq.w	r2, [r8]
 800ac88:	605a      	strne	r2, [r3, #4]
 800ac8a:	e7eb      	b.n	800ac64 <_malloc_r+0xa8>
 800ac8c:	4623      	mov	r3, r4
 800ac8e:	6864      	ldr	r4, [r4, #4]
 800ac90:	e7ae      	b.n	800abf0 <_malloc_r+0x34>
 800ac92:	463c      	mov	r4, r7
 800ac94:	687f      	ldr	r7, [r7, #4]
 800ac96:	e7b6      	b.n	800ac06 <_malloc_r+0x4a>
 800ac98:	461a      	mov	r2, r3
 800ac9a:	685b      	ldr	r3, [r3, #4]
 800ac9c:	42a3      	cmp	r3, r4
 800ac9e:	d1fb      	bne.n	800ac98 <_malloc_r+0xdc>
 800aca0:	2300      	movs	r3, #0
 800aca2:	6053      	str	r3, [r2, #4]
 800aca4:	e7de      	b.n	800ac64 <_malloc_r+0xa8>
 800aca6:	230c      	movs	r3, #12
 800aca8:	4630      	mov	r0, r6
 800acaa:	6033      	str	r3, [r6, #0]
 800acac:	f000 f80c 	bl	800acc8 <__malloc_unlock>
 800acb0:	e794      	b.n	800abdc <_malloc_r+0x20>
 800acb2:	6005      	str	r5, [r0, #0]
 800acb4:	e7d6      	b.n	800ac64 <_malloc_r+0xa8>
 800acb6:	bf00      	nop
 800acb8:	20000538 	.word	0x20000538

0800acbc <__malloc_lock>:
 800acbc:	4801      	ldr	r0, [pc, #4]	@ (800acc4 <__malloc_lock+0x8>)
 800acbe:	f7ff b88a 	b.w	8009dd6 <__retarget_lock_acquire_recursive>
 800acc2:	bf00      	nop
 800acc4:	20000530 	.word	0x20000530

0800acc8 <__malloc_unlock>:
 800acc8:	4801      	ldr	r0, [pc, #4]	@ (800acd0 <__malloc_unlock+0x8>)
 800acca:	f7ff b885 	b.w	8009dd8 <__retarget_lock_release_recursive>
 800acce:	bf00      	nop
 800acd0:	20000530 	.word	0x20000530

0800acd4 <_Balloc>:
 800acd4:	b570      	push	{r4, r5, r6, lr}
 800acd6:	69c6      	ldr	r6, [r0, #28]
 800acd8:	4604      	mov	r4, r0
 800acda:	460d      	mov	r5, r1
 800acdc:	b976      	cbnz	r6, 800acfc <_Balloc+0x28>
 800acde:	2010      	movs	r0, #16
 800ace0:	f7ff ff42 	bl	800ab68 <malloc>
 800ace4:	4602      	mov	r2, r0
 800ace6:	61e0      	str	r0, [r4, #28]
 800ace8:	b920      	cbnz	r0, 800acf4 <_Balloc+0x20>
 800acea:	4b18      	ldr	r3, [pc, #96]	@ (800ad4c <_Balloc+0x78>)
 800acec:	216b      	movs	r1, #107	@ 0x6b
 800acee:	4818      	ldr	r0, [pc, #96]	@ (800ad50 <_Balloc+0x7c>)
 800acf0:	f000 fdf4 	bl	800b8dc <__assert_func>
 800acf4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800acf8:	6006      	str	r6, [r0, #0]
 800acfa:	60c6      	str	r6, [r0, #12]
 800acfc:	69e6      	ldr	r6, [r4, #28]
 800acfe:	68f3      	ldr	r3, [r6, #12]
 800ad00:	b183      	cbz	r3, 800ad24 <_Balloc+0x50>
 800ad02:	69e3      	ldr	r3, [r4, #28]
 800ad04:	68db      	ldr	r3, [r3, #12]
 800ad06:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ad0a:	b9b8      	cbnz	r0, 800ad3c <_Balloc+0x68>
 800ad0c:	2101      	movs	r1, #1
 800ad0e:	4620      	mov	r0, r4
 800ad10:	fa01 f605 	lsl.w	r6, r1, r5
 800ad14:	1d72      	adds	r2, r6, #5
 800ad16:	0092      	lsls	r2, r2, #2
 800ad18:	f000 fdfe 	bl	800b918 <_calloc_r>
 800ad1c:	b160      	cbz	r0, 800ad38 <_Balloc+0x64>
 800ad1e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ad22:	e00e      	b.n	800ad42 <_Balloc+0x6e>
 800ad24:	2221      	movs	r2, #33	@ 0x21
 800ad26:	2104      	movs	r1, #4
 800ad28:	4620      	mov	r0, r4
 800ad2a:	f000 fdf5 	bl	800b918 <_calloc_r>
 800ad2e:	69e3      	ldr	r3, [r4, #28]
 800ad30:	60f0      	str	r0, [r6, #12]
 800ad32:	68db      	ldr	r3, [r3, #12]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d1e4      	bne.n	800ad02 <_Balloc+0x2e>
 800ad38:	2000      	movs	r0, #0
 800ad3a:	bd70      	pop	{r4, r5, r6, pc}
 800ad3c:	6802      	ldr	r2, [r0, #0]
 800ad3e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ad42:	2300      	movs	r3, #0
 800ad44:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ad48:	e7f7      	b.n	800ad3a <_Balloc+0x66>
 800ad4a:	bf00      	nop
 800ad4c:	0800c021 	.word	0x0800c021
 800ad50:	0800c0a1 	.word	0x0800c0a1

0800ad54 <_Bfree>:
 800ad54:	b570      	push	{r4, r5, r6, lr}
 800ad56:	69c6      	ldr	r6, [r0, #28]
 800ad58:	4605      	mov	r5, r0
 800ad5a:	460c      	mov	r4, r1
 800ad5c:	b976      	cbnz	r6, 800ad7c <_Bfree+0x28>
 800ad5e:	2010      	movs	r0, #16
 800ad60:	f7ff ff02 	bl	800ab68 <malloc>
 800ad64:	4602      	mov	r2, r0
 800ad66:	61e8      	str	r0, [r5, #28]
 800ad68:	b920      	cbnz	r0, 800ad74 <_Bfree+0x20>
 800ad6a:	4b09      	ldr	r3, [pc, #36]	@ (800ad90 <_Bfree+0x3c>)
 800ad6c:	218f      	movs	r1, #143	@ 0x8f
 800ad6e:	4809      	ldr	r0, [pc, #36]	@ (800ad94 <_Bfree+0x40>)
 800ad70:	f000 fdb4 	bl	800b8dc <__assert_func>
 800ad74:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ad78:	6006      	str	r6, [r0, #0]
 800ad7a:	60c6      	str	r6, [r0, #12]
 800ad7c:	b13c      	cbz	r4, 800ad8e <_Bfree+0x3a>
 800ad7e:	69eb      	ldr	r3, [r5, #28]
 800ad80:	6862      	ldr	r2, [r4, #4]
 800ad82:	68db      	ldr	r3, [r3, #12]
 800ad84:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ad88:	6021      	str	r1, [r4, #0]
 800ad8a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ad8e:	bd70      	pop	{r4, r5, r6, pc}
 800ad90:	0800c021 	.word	0x0800c021
 800ad94:	0800c0a1 	.word	0x0800c0a1

0800ad98 <__multadd>:
 800ad98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad9c:	f101 0c14 	add.w	ip, r1, #20
 800ada0:	4607      	mov	r7, r0
 800ada2:	460c      	mov	r4, r1
 800ada4:	461e      	mov	r6, r3
 800ada6:	690d      	ldr	r5, [r1, #16]
 800ada8:	2000      	movs	r0, #0
 800adaa:	f8dc 3000 	ldr.w	r3, [ip]
 800adae:	3001      	adds	r0, #1
 800adb0:	b299      	uxth	r1, r3
 800adb2:	4285      	cmp	r5, r0
 800adb4:	fb02 6101 	mla	r1, r2, r1, r6
 800adb8:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800adbc:	ea4f 4311 	mov.w	r3, r1, lsr #16
 800adc0:	b289      	uxth	r1, r1
 800adc2:	fb02 3306 	mla	r3, r2, r6, r3
 800adc6:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800adca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800adce:	f84c 1b04 	str.w	r1, [ip], #4
 800add2:	dcea      	bgt.n	800adaa <__multadd+0x12>
 800add4:	b30e      	cbz	r6, 800ae1a <__multadd+0x82>
 800add6:	68a3      	ldr	r3, [r4, #8]
 800add8:	42ab      	cmp	r3, r5
 800adda:	dc19      	bgt.n	800ae10 <__multadd+0x78>
 800addc:	6861      	ldr	r1, [r4, #4]
 800adde:	4638      	mov	r0, r7
 800ade0:	3101      	adds	r1, #1
 800ade2:	f7ff ff77 	bl	800acd4 <_Balloc>
 800ade6:	4680      	mov	r8, r0
 800ade8:	b928      	cbnz	r0, 800adf6 <__multadd+0x5e>
 800adea:	4602      	mov	r2, r0
 800adec:	4b0c      	ldr	r3, [pc, #48]	@ (800ae20 <__multadd+0x88>)
 800adee:	21ba      	movs	r1, #186	@ 0xba
 800adf0:	480c      	ldr	r0, [pc, #48]	@ (800ae24 <__multadd+0x8c>)
 800adf2:	f000 fd73 	bl	800b8dc <__assert_func>
 800adf6:	6922      	ldr	r2, [r4, #16]
 800adf8:	f104 010c 	add.w	r1, r4, #12
 800adfc:	300c      	adds	r0, #12
 800adfe:	3202      	adds	r2, #2
 800ae00:	0092      	lsls	r2, r2, #2
 800ae02:	f7fe fff8 	bl	8009df6 <memcpy>
 800ae06:	4621      	mov	r1, r4
 800ae08:	4644      	mov	r4, r8
 800ae0a:	4638      	mov	r0, r7
 800ae0c:	f7ff ffa2 	bl	800ad54 <_Bfree>
 800ae10:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ae14:	3501      	adds	r5, #1
 800ae16:	615e      	str	r6, [r3, #20]
 800ae18:	6125      	str	r5, [r4, #16]
 800ae1a:	4620      	mov	r0, r4
 800ae1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae20:	0800c090 	.word	0x0800c090
 800ae24:	0800c0a1 	.word	0x0800c0a1

0800ae28 <__hi0bits>:
 800ae28:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ae2c:	4603      	mov	r3, r0
 800ae2e:	bf36      	itet	cc
 800ae30:	0403      	lslcc	r3, r0, #16
 800ae32:	2000      	movcs	r0, #0
 800ae34:	2010      	movcc	r0, #16
 800ae36:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ae3a:	bf3c      	itt	cc
 800ae3c:	021b      	lslcc	r3, r3, #8
 800ae3e:	3008      	addcc	r0, #8
 800ae40:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ae44:	bf3c      	itt	cc
 800ae46:	011b      	lslcc	r3, r3, #4
 800ae48:	3004      	addcc	r0, #4
 800ae4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ae4e:	bf3c      	itt	cc
 800ae50:	009b      	lslcc	r3, r3, #2
 800ae52:	3002      	addcc	r0, #2
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	db05      	blt.n	800ae64 <__hi0bits+0x3c>
 800ae58:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ae5c:	f100 0001 	add.w	r0, r0, #1
 800ae60:	bf08      	it	eq
 800ae62:	2020      	moveq	r0, #32
 800ae64:	4770      	bx	lr

0800ae66 <__lo0bits>:
 800ae66:	6803      	ldr	r3, [r0, #0]
 800ae68:	4602      	mov	r2, r0
 800ae6a:	f013 0007 	ands.w	r0, r3, #7
 800ae6e:	d00b      	beq.n	800ae88 <__lo0bits+0x22>
 800ae70:	07d9      	lsls	r1, r3, #31
 800ae72:	d421      	bmi.n	800aeb8 <__lo0bits+0x52>
 800ae74:	0798      	lsls	r0, r3, #30
 800ae76:	bf47      	ittee	mi
 800ae78:	085b      	lsrmi	r3, r3, #1
 800ae7a:	2001      	movmi	r0, #1
 800ae7c:	089b      	lsrpl	r3, r3, #2
 800ae7e:	2002      	movpl	r0, #2
 800ae80:	bf4c      	ite	mi
 800ae82:	6013      	strmi	r3, [r2, #0]
 800ae84:	6013      	strpl	r3, [r2, #0]
 800ae86:	4770      	bx	lr
 800ae88:	b299      	uxth	r1, r3
 800ae8a:	b909      	cbnz	r1, 800ae90 <__lo0bits+0x2a>
 800ae8c:	0c1b      	lsrs	r3, r3, #16
 800ae8e:	2010      	movs	r0, #16
 800ae90:	b2d9      	uxtb	r1, r3
 800ae92:	b909      	cbnz	r1, 800ae98 <__lo0bits+0x32>
 800ae94:	3008      	adds	r0, #8
 800ae96:	0a1b      	lsrs	r3, r3, #8
 800ae98:	0719      	lsls	r1, r3, #28
 800ae9a:	bf04      	itt	eq
 800ae9c:	091b      	lsreq	r3, r3, #4
 800ae9e:	3004      	addeq	r0, #4
 800aea0:	0799      	lsls	r1, r3, #30
 800aea2:	bf04      	itt	eq
 800aea4:	089b      	lsreq	r3, r3, #2
 800aea6:	3002      	addeq	r0, #2
 800aea8:	07d9      	lsls	r1, r3, #31
 800aeaa:	d403      	bmi.n	800aeb4 <__lo0bits+0x4e>
 800aeac:	085b      	lsrs	r3, r3, #1
 800aeae:	f100 0001 	add.w	r0, r0, #1
 800aeb2:	d003      	beq.n	800aebc <__lo0bits+0x56>
 800aeb4:	6013      	str	r3, [r2, #0]
 800aeb6:	4770      	bx	lr
 800aeb8:	2000      	movs	r0, #0
 800aeba:	4770      	bx	lr
 800aebc:	2020      	movs	r0, #32
 800aebe:	4770      	bx	lr

0800aec0 <__i2b>:
 800aec0:	b510      	push	{r4, lr}
 800aec2:	460c      	mov	r4, r1
 800aec4:	2101      	movs	r1, #1
 800aec6:	f7ff ff05 	bl	800acd4 <_Balloc>
 800aeca:	4602      	mov	r2, r0
 800aecc:	b928      	cbnz	r0, 800aeda <__i2b+0x1a>
 800aece:	4b05      	ldr	r3, [pc, #20]	@ (800aee4 <__i2b+0x24>)
 800aed0:	f240 1145 	movw	r1, #325	@ 0x145
 800aed4:	4804      	ldr	r0, [pc, #16]	@ (800aee8 <__i2b+0x28>)
 800aed6:	f000 fd01 	bl	800b8dc <__assert_func>
 800aeda:	2301      	movs	r3, #1
 800aedc:	6144      	str	r4, [r0, #20]
 800aede:	6103      	str	r3, [r0, #16]
 800aee0:	bd10      	pop	{r4, pc}
 800aee2:	bf00      	nop
 800aee4:	0800c090 	.word	0x0800c090
 800aee8:	0800c0a1 	.word	0x0800c0a1

0800aeec <__multiply>:
 800aeec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aef0:	4617      	mov	r7, r2
 800aef2:	690a      	ldr	r2, [r1, #16]
 800aef4:	4689      	mov	r9, r1
 800aef6:	b085      	sub	sp, #20
 800aef8:	693b      	ldr	r3, [r7, #16]
 800aefa:	429a      	cmp	r2, r3
 800aefc:	bfa2      	ittt	ge
 800aefe:	463b      	movge	r3, r7
 800af00:	460f      	movge	r7, r1
 800af02:	4699      	movge	r9, r3
 800af04:	693d      	ldr	r5, [r7, #16]
 800af06:	68bb      	ldr	r3, [r7, #8]
 800af08:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800af0c:	6879      	ldr	r1, [r7, #4]
 800af0e:	eb05 060a 	add.w	r6, r5, sl
 800af12:	42b3      	cmp	r3, r6
 800af14:	bfb8      	it	lt
 800af16:	3101      	addlt	r1, #1
 800af18:	f7ff fedc 	bl	800acd4 <_Balloc>
 800af1c:	b930      	cbnz	r0, 800af2c <__multiply+0x40>
 800af1e:	4602      	mov	r2, r0
 800af20:	4b42      	ldr	r3, [pc, #264]	@ (800b02c <__multiply+0x140>)
 800af22:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800af26:	4842      	ldr	r0, [pc, #264]	@ (800b030 <__multiply+0x144>)
 800af28:	f000 fcd8 	bl	800b8dc <__assert_func>
 800af2c:	f100 0414 	add.w	r4, r0, #20
 800af30:	2200      	movs	r2, #0
 800af32:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800af36:	4623      	mov	r3, r4
 800af38:	4573      	cmp	r3, lr
 800af3a:	d320      	bcc.n	800af7e <__multiply+0x92>
 800af3c:	f107 0814 	add.w	r8, r7, #20
 800af40:	f109 0114 	add.w	r1, r9, #20
 800af44:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800af48:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800af4c:	9302      	str	r3, [sp, #8]
 800af4e:	1beb      	subs	r3, r5, r7
 800af50:	3715      	adds	r7, #21
 800af52:	3b15      	subs	r3, #21
 800af54:	f023 0303 	bic.w	r3, r3, #3
 800af58:	3304      	adds	r3, #4
 800af5a:	42bd      	cmp	r5, r7
 800af5c:	bf38      	it	cc
 800af5e:	2304      	movcc	r3, #4
 800af60:	9301      	str	r3, [sp, #4]
 800af62:	9b02      	ldr	r3, [sp, #8]
 800af64:	9103      	str	r1, [sp, #12]
 800af66:	428b      	cmp	r3, r1
 800af68:	d80c      	bhi.n	800af84 <__multiply+0x98>
 800af6a:	2e00      	cmp	r6, #0
 800af6c:	dd03      	ble.n	800af76 <__multiply+0x8a>
 800af6e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800af72:	2b00      	cmp	r3, #0
 800af74:	d057      	beq.n	800b026 <__multiply+0x13a>
 800af76:	6106      	str	r6, [r0, #16]
 800af78:	b005      	add	sp, #20
 800af7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af7e:	f843 2b04 	str.w	r2, [r3], #4
 800af82:	e7d9      	b.n	800af38 <__multiply+0x4c>
 800af84:	f8b1 a000 	ldrh.w	sl, [r1]
 800af88:	f1ba 0f00 	cmp.w	sl, #0
 800af8c:	d021      	beq.n	800afd2 <__multiply+0xe6>
 800af8e:	46c4      	mov	ip, r8
 800af90:	46a1      	mov	r9, r4
 800af92:	2700      	movs	r7, #0
 800af94:	f85c 2b04 	ldr.w	r2, [ip], #4
 800af98:	f8d9 3000 	ldr.w	r3, [r9]
 800af9c:	fa1f fb82 	uxth.w	fp, r2
 800afa0:	4565      	cmp	r5, ip
 800afa2:	b29b      	uxth	r3, r3
 800afa4:	ea4f 4212 	mov.w	r2, r2, lsr #16
 800afa8:	fb0a 330b 	mla	r3, sl, fp, r3
 800afac:	443b      	add	r3, r7
 800afae:	f8d9 7000 	ldr.w	r7, [r9]
 800afb2:	ea4f 4717 	mov.w	r7, r7, lsr #16
 800afb6:	fb0a 7202 	mla	r2, sl, r2, r7
 800afba:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800afbe:	b29b      	uxth	r3, r3
 800afc0:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800afc4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800afc8:	f849 3b04 	str.w	r3, [r9], #4
 800afcc:	d8e2      	bhi.n	800af94 <__multiply+0xa8>
 800afce:	9b01      	ldr	r3, [sp, #4]
 800afd0:	50e7      	str	r7, [r4, r3]
 800afd2:	9b03      	ldr	r3, [sp, #12]
 800afd4:	3104      	adds	r1, #4
 800afd6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800afda:	f1b9 0f00 	cmp.w	r9, #0
 800afde:	d020      	beq.n	800b022 <__multiply+0x136>
 800afe0:	6823      	ldr	r3, [r4, #0]
 800afe2:	4647      	mov	r7, r8
 800afe4:	46a4      	mov	ip, r4
 800afe6:	f04f 0a00 	mov.w	sl, #0
 800afea:	f8b7 b000 	ldrh.w	fp, [r7]
 800afee:	b29b      	uxth	r3, r3
 800aff0:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800aff4:	fb09 220b 	mla	r2, r9, fp, r2
 800aff8:	4452      	add	r2, sl
 800affa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800affe:	f84c 3b04 	str.w	r3, [ip], #4
 800b002:	f857 3b04 	ldr.w	r3, [r7], #4
 800b006:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b00a:	f8bc 3000 	ldrh.w	r3, [ip]
 800b00e:	42bd      	cmp	r5, r7
 800b010:	fb09 330a 	mla	r3, r9, sl, r3
 800b014:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800b018:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b01c:	d8e5      	bhi.n	800afea <__multiply+0xfe>
 800b01e:	9a01      	ldr	r2, [sp, #4]
 800b020:	50a3      	str	r3, [r4, r2]
 800b022:	3404      	adds	r4, #4
 800b024:	e79d      	b.n	800af62 <__multiply+0x76>
 800b026:	3e01      	subs	r6, #1
 800b028:	e79f      	b.n	800af6a <__multiply+0x7e>
 800b02a:	bf00      	nop
 800b02c:	0800c090 	.word	0x0800c090
 800b030:	0800c0a1 	.word	0x0800c0a1

0800b034 <__pow5mult>:
 800b034:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b038:	4615      	mov	r5, r2
 800b03a:	f012 0203 	ands.w	r2, r2, #3
 800b03e:	4607      	mov	r7, r0
 800b040:	460e      	mov	r6, r1
 800b042:	d007      	beq.n	800b054 <__pow5mult+0x20>
 800b044:	3a01      	subs	r2, #1
 800b046:	4c25      	ldr	r4, [pc, #148]	@ (800b0dc <__pow5mult+0xa8>)
 800b048:	2300      	movs	r3, #0
 800b04a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b04e:	f7ff fea3 	bl	800ad98 <__multadd>
 800b052:	4606      	mov	r6, r0
 800b054:	10ad      	asrs	r5, r5, #2
 800b056:	d03d      	beq.n	800b0d4 <__pow5mult+0xa0>
 800b058:	69fc      	ldr	r4, [r7, #28]
 800b05a:	b97c      	cbnz	r4, 800b07c <__pow5mult+0x48>
 800b05c:	2010      	movs	r0, #16
 800b05e:	f7ff fd83 	bl	800ab68 <malloc>
 800b062:	4602      	mov	r2, r0
 800b064:	61f8      	str	r0, [r7, #28]
 800b066:	b928      	cbnz	r0, 800b074 <__pow5mult+0x40>
 800b068:	4b1d      	ldr	r3, [pc, #116]	@ (800b0e0 <__pow5mult+0xac>)
 800b06a:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b06e:	481d      	ldr	r0, [pc, #116]	@ (800b0e4 <__pow5mult+0xb0>)
 800b070:	f000 fc34 	bl	800b8dc <__assert_func>
 800b074:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b078:	6004      	str	r4, [r0, #0]
 800b07a:	60c4      	str	r4, [r0, #12]
 800b07c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b080:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b084:	b94c      	cbnz	r4, 800b09a <__pow5mult+0x66>
 800b086:	f240 2171 	movw	r1, #625	@ 0x271
 800b08a:	4638      	mov	r0, r7
 800b08c:	f7ff ff18 	bl	800aec0 <__i2b>
 800b090:	2300      	movs	r3, #0
 800b092:	4604      	mov	r4, r0
 800b094:	f8c8 0008 	str.w	r0, [r8, #8]
 800b098:	6003      	str	r3, [r0, #0]
 800b09a:	f04f 0900 	mov.w	r9, #0
 800b09e:	07eb      	lsls	r3, r5, #31
 800b0a0:	d50a      	bpl.n	800b0b8 <__pow5mult+0x84>
 800b0a2:	4631      	mov	r1, r6
 800b0a4:	4622      	mov	r2, r4
 800b0a6:	4638      	mov	r0, r7
 800b0a8:	f7ff ff20 	bl	800aeec <__multiply>
 800b0ac:	4680      	mov	r8, r0
 800b0ae:	4631      	mov	r1, r6
 800b0b0:	4638      	mov	r0, r7
 800b0b2:	4646      	mov	r6, r8
 800b0b4:	f7ff fe4e 	bl	800ad54 <_Bfree>
 800b0b8:	106d      	asrs	r5, r5, #1
 800b0ba:	d00b      	beq.n	800b0d4 <__pow5mult+0xa0>
 800b0bc:	6820      	ldr	r0, [r4, #0]
 800b0be:	b938      	cbnz	r0, 800b0d0 <__pow5mult+0x9c>
 800b0c0:	4622      	mov	r2, r4
 800b0c2:	4621      	mov	r1, r4
 800b0c4:	4638      	mov	r0, r7
 800b0c6:	f7ff ff11 	bl	800aeec <__multiply>
 800b0ca:	6020      	str	r0, [r4, #0]
 800b0cc:	f8c0 9000 	str.w	r9, [r0]
 800b0d0:	4604      	mov	r4, r0
 800b0d2:	e7e4      	b.n	800b09e <__pow5mult+0x6a>
 800b0d4:	4630      	mov	r0, r6
 800b0d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b0da:	bf00      	nop
 800b0dc:	0800c154 	.word	0x0800c154
 800b0e0:	0800c021 	.word	0x0800c021
 800b0e4:	0800c0a1 	.word	0x0800c0a1

0800b0e8 <__lshift>:
 800b0e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0ec:	460c      	mov	r4, r1
 800b0ee:	4607      	mov	r7, r0
 800b0f0:	4691      	mov	r9, r2
 800b0f2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b0f6:	6923      	ldr	r3, [r4, #16]
 800b0f8:	6849      	ldr	r1, [r1, #4]
 800b0fa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b0fe:	68a3      	ldr	r3, [r4, #8]
 800b100:	f108 0601 	add.w	r6, r8, #1
 800b104:	42b3      	cmp	r3, r6
 800b106:	db0b      	blt.n	800b120 <__lshift+0x38>
 800b108:	4638      	mov	r0, r7
 800b10a:	f7ff fde3 	bl	800acd4 <_Balloc>
 800b10e:	4605      	mov	r5, r0
 800b110:	b948      	cbnz	r0, 800b126 <__lshift+0x3e>
 800b112:	4602      	mov	r2, r0
 800b114:	4b28      	ldr	r3, [pc, #160]	@ (800b1b8 <__lshift+0xd0>)
 800b116:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b11a:	4828      	ldr	r0, [pc, #160]	@ (800b1bc <__lshift+0xd4>)
 800b11c:	f000 fbde 	bl	800b8dc <__assert_func>
 800b120:	3101      	adds	r1, #1
 800b122:	005b      	lsls	r3, r3, #1
 800b124:	e7ee      	b.n	800b104 <__lshift+0x1c>
 800b126:	2300      	movs	r3, #0
 800b128:	f100 0114 	add.w	r1, r0, #20
 800b12c:	f100 0210 	add.w	r2, r0, #16
 800b130:	4618      	mov	r0, r3
 800b132:	4553      	cmp	r3, sl
 800b134:	db33      	blt.n	800b19e <__lshift+0xb6>
 800b136:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b13a:	f104 0314 	add.w	r3, r4, #20
 800b13e:	6920      	ldr	r0, [r4, #16]
 800b140:	f019 091f 	ands.w	r9, r9, #31
 800b144:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b148:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b14c:	d02b      	beq.n	800b1a6 <__lshift+0xbe>
 800b14e:	f1c9 0e20 	rsb	lr, r9, #32
 800b152:	468a      	mov	sl, r1
 800b154:	2200      	movs	r2, #0
 800b156:	6818      	ldr	r0, [r3, #0]
 800b158:	fa00 f009 	lsl.w	r0, r0, r9
 800b15c:	4310      	orrs	r0, r2
 800b15e:	f84a 0b04 	str.w	r0, [sl], #4
 800b162:	f853 2b04 	ldr.w	r2, [r3], #4
 800b166:	459c      	cmp	ip, r3
 800b168:	fa22 f20e 	lsr.w	r2, r2, lr
 800b16c:	d8f3      	bhi.n	800b156 <__lshift+0x6e>
 800b16e:	ebac 0304 	sub.w	r3, ip, r4
 800b172:	f104 0015 	add.w	r0, r4, #21
 800b176:	3b15      	subs	r3, #21
 800b178:	f023 0303 	bic.w	r3, r3, #3
 800b17c:	3304      	adds	r3, #4
 800b17e:	4560      	cmp	r0, ip
 800b180:	bf88      	it	hi
 800b182:	2304      	movhi	r3, #4
 800b184:	50ca      	str	r2, [r1, r3]
 800b186:	b10a      	cbz	r2, 800b18c <__lshift+0xa4>
 800b188:	f108 0602 	add.w	r6, r8, #2
 800b18c:	3e01      	subs	r6, #1
 800b18e:	4638      	mov	r0, r7
 800b190:	4621      	mov	r1, r4
 800b192:	612e      	str	r6, [r5, #16]
 800b194:	f7ff fdde 	bl	800ad54 <_Bfree>
 800b198:	4628      	mov	r0, r5
 800b19a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b19e:	3301      	adds	r3, #1
 800b1a0:	f842 0f04 	str.w	r0, [r2, #4]!
 800b1a4:	e7c5      	b.n	800b132 <__lshift+0x4a>
 800b1a6:	3904      	subs	r1, #4
 800b1a8:	f853 2b04 	ldr.w	r2, [r3], #4
 800b1ac:	459c      	cmp	ip, r3
 800b1ae:	f841 2f04 	str.w	r2, [r1, #4]!
 800b1b2:	d8f9      	bhi.n	800b1a8 <__lshift+0xc0>
 800b1b4:	e7ea      	b.n	800b18c <__lshift+0xa4>
 800b1b6:	bf00      	nop
 800b1b8:	0800c090 	.word	0x0800c090
 800b1bc:	0800c0a1 	.word	0x0800c0a1

0800b1c0 <__mcmp>:
 800b1c0:	4603      	mov	r3, r0
 800b1c2:	690a      	ldr	r2, [r1, #16]
 800b1c4:	6900      	ldr	r0, [r0, #16]
 800b1c6:	1a80      	subs	r0, r0, r2
 800b1c8:	b530      	push	{r4, r5, lr}
 800b1ca:	d10e      	bne.n	800b1ea <__mcmp+0x2a>
 800b1cc:	3314      	adds	r3, #20
 800b1ce:	3114      	adds	r1, #20
 800b1d0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b1d4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b1d8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b1dc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b1e0:	4295      	cmp	r5, r2
 800b1e2:	d003      	beq.n	800b1ec <__mcmp+0x2c>
 800b1e4:	d205      	bcs.n	800b1f2 <__mcmp+0x32>
 800b1e6:	f04f 30ff 	mov.w	r0, #4294967295
 800b1ea:	bd30      	pop	{r4, r5, pc}
 800b1ec:	42a3      	cmp	r3, r4
 800b1ee:	d3f3      	bcc.n	800b1d8 <__mcmp+0x18>
 800b1f0:	e7fb      	b.n	800b1ea <__mcmp+0x2a>
 800b1f2:	2001      	movs	r0, #1
 800b1f4:	e7f9      	b.n	800b1ea <__mcmp+0x2a>
	...

0800b1f8 <__mdiff>:
 800b1f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1fc:	4689      	mov	r9, r1
 800b1fe:	4606      	mov	r6, r0
 800b200:	4611      	mov	r1, r2
 800b202:	4614      	mov	r4, r2
 800b204:	4648      	mov	r0, r9
 800b206:	f7ff ffdb 	bl	800b1c0 <__mcmp>
 800b20a:	1e05      	subs	r5, r0, #0
 800b20c:	d112      	bne.n	800b234 <__mdiff+0x3c>
 800b20e:	4629      	mov	r1, r5
 800b210:	4630      	mov	r0, r6
 800b212:	f7ff fd5f 	bl	800acd4 <_Balloc>
 800b216:	4602      	mov	r2, r0
 800b218:	b928      	cbnz	r0, 800b226 <__mdiff+0x2e>
 800b21a:	4b41      	ldr	r3, [pc, #260]	@ (800b320 <__mdiff+0x128>)
 800b21c:	f240 2137 	movw	r1, #567	@ 0x237
 800b220:	4840      	ldr	r0, [pc, #256]	@ (800b324 <__mdiff+0x12c>)
 800b222:	f000 fb5b 	bl	800b8dc <__assert_func>
 800b226:	2301      	movs	r3, #1
 800b228:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b22c:	4610      	mov	r0, r2
 800b22e:	b003      	add	sp, #12
 800b230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b234:	bfbc      	itt	lt
 800b236:	464b      	movlt	r3, r9
 800b238:	46a1      	movlt	r9, r4
 800b23a:	4630      	mov	r0, r6
 800b23c:	bfb8      	it	lt
 800b23e:	2501      	movlt	r5, #1
 800b240:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b244:	bfb4      	ite	lt
 800b246:	461c      	movlt	r4, r3
 800b248:	2500      	movge	r5, #0
 800b24a:	f7ff fd43 	bl	800acd4 <_Balloc>
 800b24e:	4602      	mov	r2, r0
 800b250:	b918      	cbnz	r0, 800b25a <__mdiff+0x62>
 800b252:	4b33      	ldr	r3, [pc, #204]	@ (800b320 <__mdiff+0x128>)
 800b254:	f240 2145 	movw	r1, #581	@ 0x245
 800b258:	e7e2      	b.n	800b220 <__mdiff+0x28>
 800b25a:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b25e:	f104 0e14 	add.w	lr, r4, #20
 800b262:	6926      	ldr	r6, [r4, #16]
 800b264:	f100 0b14 	add.w	fp, r0, #20
 800b268:	60c5      	str	r5, [r0, #12]
 800b26a:	f109 0514 	add.w	r5, r9, #20
 800b26e:	f109 0310 	add.w	r3, r9, #16
 800b272:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b276:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b27a:	46d9      	mov	r9, fp
 800b27c:	f04f 0c00 	mov.w	ip, #0
 800b280:	9301      	str	r3, [sp, #4]
 800b282:	9b01      	ldr	r3, [sp, #4]
 800b284:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b288:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b28c:	4576      	cmp	r6, lr
 800b28e:	9301      	str	r3, [sp, #4]
 800b290:	fa1f f38a 	uxth.w	r3, sl
 800b294:	4619      	mov	r1, r3
 800b296:	b283      	uxth	r3, r0
 800b298:	ea4f 4010 	mov.w	r0, r0, lsr #16
 800b29c:	eba1 0303 	sub.w	r3, r1, r3
 800b2a0:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b2a4:	4463      	add	r3, ip
 800b2a6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b2aa:	b29b      	uxth	r3, r3
 800b2ac:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b2b0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b2b4:	f849 3b04 	str.w	r3, [r9], #4
 800b2b8:	d8e3      	bhi.n	800b282 <__mdiff+0x8a>
 800b2ba:	1b33      	subs	r3, r6, r4
 800b2bc:	3415      	adds	r4, #21
 800b2be:	3b15      	subs	r3, #21
 800b2c0:	f023 0303 	bic.w	r3, r3, #3
 800b2c4:	3304      	adds	r3, #4
 800b2c6:	42a6      	cmp	r6, r4
 800b2c8:	bf38      	it	cc
 800b2ca:	2304      	movcc	r3, #4
 800b2cc:	441d      	add	r5, r3
 800b2ce:	445b      	add	r3, fp
 800b2d0:	462c      	mov	r4, r5
 800b2d2:	461e      	mov	r6, r3
 800b2d4:	4544      	cmp	r4, r8
 800b2d6:	d30e      	bcc.n	800b2f6 <__mdiff+0xfe>
 800b2d8:	f108 0103 	add.w	r1, r8, #3
 800b2dc:	1b49      	subs	r1, r1, r5
 800b2de:	3d03      	subs	r5, #3
 800b2e0:	f021 0103 	bic.w	r1, r1, #3
 800b2e4:	45a8      	cmp	r8, r5
 800b2e6:	bf38      	it	cc
 800b2e8:	2100      	movcc	r1, #0
 800b2ea:	440b      	add	r3, r1
 800b2ec:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b2f0:	b199      	cbz	r1, 800b31a <__mdiff+0x122>
 800b2f2:	6117      	str	r7, [r2, #16]
 800b2f4:	e79a      	b.n	800b22c <__mdiff+0x34>
 800b2f6:	f854 1b04 	ldr.w	r1, [r4], #4
 800b2fa:	46e6      	mov	lr, ip
 800b2fc:	fa1f fc81 	uxth.w	ip, r1
 800b300:	0c08      	lsrs	r0, r1, #16
 800b302:	4471      	add	r1, lr
 800b304:	44f4      	add	ip, lr
 800b306:	b289      	uxth	r1, r1
 800b308:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b30c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b310:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b314:	f846 1b04 	str.w	r1, [r6], #4
 800b318:	e7dc      	b.n	800b2d4 <__mdiff+0xdc>
 800b31a:	3f01      	subs	r7, #1
 800b31c:	e7e6      	b.n	800b2ec <__mdiff+0xf4>
 800b31e:	bf00      	nop
 800b320:	0800c090 	.word	0x0800c090
 800b324:	0800c0a1 	.word	0x0800c0a1

0800b328 <__d2b>:
 800b328:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b32c:	460f      	mov	r7, r1
 800b32e:	2101      	movs	r1, #1
 800b330:	4616      	mov	r6, r2
 800b332:	ec59 8b10 	vmov	r8, r9, d0
 800b336:	f7ff fccd 	bl	800acd4 <_Balloc>
 800b33a:	4604      	mov	r4, r0
 800b33c:	b930      	cbnz	r0, 800b34c <__d2b+0x24>
 800b33e:	4602      	mov	r2, r0
 800b340:	4b23      	ldr	r3, [pc, #140]	@ (800b3d0 <__d2b+0xa8>)
 800b342:	f240 310f 	movw	r1, #783	@ 0x30f
 800b346:	4823      	ldr	r0, [pc, #140]	@ (800b3d4 <__d2b+0xac>)
 800b348:	f000 fac8 	bl	800b8dc <__assert_func>
 800b34c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b350:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b354:	b10d      	cbz	r5, 800b35a <__d2b+0x32>
 800b356:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b35a:	9301      	str	r3, [sp, #4]
 800b35c:	f1b8 0300 	subs.w	r3, r8, #0
 800b360:	d023      	beq.n	800b3aa <__d2b+0x82>
 800b362:	4668      	mov	r0, sp
 800b364:	9300      	str	r3, [sp, #0]
 800b366:	f7ff fd7e 	bl	800ae66 <__lo0bits>
 800b36a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b36e:	b1d0      	cbz	r0, 800b3a6 <__d2b+0x7e>
 800b370:	f1c0 0320 	rsb	r3, r0, #32
 800b374:	fa02 f303 	lsl.w	r3, r2, r3
 800b378:	40c2      	lsrs	r2, r0
 800b37a:	430b      	orrs	r3, r1
 800b37c:	9201      	str	r2, [sp, #4]
 800b37e:	6163      	str	r3, [r4, #20]
 800b380:	9b01      	ldr	r3, [sp, #4]
 800b382:	2b00      	cmp	r3, #0
 800b384:	61a3      	str	r3, [r4, #24]
 800b386:	bf0c      	ite	eq
 800b388:	2201      	moveq	r2, #1
 800b38a:	2202      	movne	r2, #2
 800b38c:	6122      	str	r2, [r4, #16]
 800b38e:	b1a5      	cbz	r5, 800b3ba <__d2b+0x92>
 800b390:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b394:	4405      	add	r5, r0
 800b396:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b39a:	603d      	str	r5, [r7, #0]
 800b39c:	6030      	str	r0, [r6, #0]
 800b39e:	4620      	mov	r0, r4
 800b3a0:	b003      	add	sp, #12
 800b3a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b3a6:	6161      	str	r1, [r4, #20]
 800b3a8:	e7ea      	b.n	800b380 <__d2b+0x58>
 800b3aa:	a801      	add	r0, sp, #4
 800b3ac:	f7ff fd5b 	bl	800ae66 <__lo0bits>
 800b3b0:	9b01      	ldr	r3, [sp, #4]
 800b3b2:	3020      	adds	r0, #32
 800b3b4:	2201      	movs	r2, #1
 800b3b6:	6163      	str	r3, [r4, #20]
 800b3b8:	e7e8      	b.n	800b38c <__d2b+0x64>
 800b3ba:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b3be:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b3c2:	6038      	str	r0, [r7, #0]
 800b3c4:	6918      	ldr	r0, [r3, #16]
 800b3c6:	f7ff fd2f 	bl	800ae28 <__hi0bits>
 800b3ca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b3ce:	e7e5      	b.n	800b39c <__d2b+0x74>
 800b3d0:	0800c090 	.word	0x0800c090
 800b3d4:	0800c0a1 	.word	0x0800c0a1

0800b3d8 <__sfputc_r>:
 800b3d8:	6893      	ldr	r3, [r2, #8]
 800b3da:	3b01      	subs	r3, #1
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	b410      	push	{r4}
 800b3e0:	6093      	str	r3, [r2, #8]
 800b3e2:	da08      	bge.n	800b3f6 <__sfputc_r+0x1e>
 800b3e4:	6994      	ldr	r4, [r2, #24]
 800b3e6:	42a3      	cmp	r3, r4
 800b3e8:	db01      	blt.n	800b3ee <__sfputc_r+0x16>
 800b3ea:	290a      	cmp	r1, #10
 800b3ec:	d103      	bne.n	800b3f6 <__sfputc_r+0x1e>
 800b3ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b3f2:	f7fe bbde 	b.w	8009bb2 <__swbuf_r>
 800b3f6:	6813      	ldr	r3, [r2, #0]
 800b3f8:	1c58      	adds	r0, r3, #1
 800b3fa:	6010      	str	r0, [r2, #0]
 800b3fc:	4608      	mov	r0, r1
 800b3fe:	7019      	strb	r1, [r3, #0]
 800b400:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b404:	4770      	bx	lr

0800b406 <__sfputs_r>:
 800b406:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b408:	4606      	mov	r6, r0
 800b40a:	460f      	mov	r7, r1
 800b40c:	4614      	mov	r4, r2
 800b40e:	18d5      	adds	r5, r2, r3
 800b410:	42ac      	cmp	r4, r5
 800b412:	d101      	bne.n	800b418 <__sfputs_r+0x12>
 800b414:	2000      	movs	r0, #0
 800b416:	e007      	b.n	800b428 <__sfputs_r+0x22>
 800b418:	463a      	mov	r2, r7
 800b41a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b41e:	4630      	mov	r0, r6
 800b420:	f7ff ffda 	bl	800b3d8 <__sfputc_r>
 800b424:	1c43      	adds	r3, r0, #1
 800b426:	d1f3      	bne.n	800b410 <__sfputs_r+0xa>
 800b428:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b42c <_vfiprintf_r>:
 800b42c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b430:	460d      	mov	r5, r1
 800b432:	b09d      	sub	sp, #116	@ 0x74
 800b434:	4614      	mov	r4, r2
 800b436:	4698      	mov	r8, r3
 800b438:	4606      	mov	r6, r0
 800b43a:	b118      	cbz	r0, 800b444 <_vfiprintf_r+0x18>
 800b43c:	6a03      	ldr	r3, [r0, #32]
 800b43e:	b90b      	cbnz	r3, 800b444 <_vfiprintf_r+0x18>
 800b440:	f7fe face 	bl	80099e0 <__sinit>
 800b444:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b446:	07d9      	lsls	r1, r3, #31
 800b448:	d405      	bmi.n	800b456 <_vfiprintf_r+0x2a>
 800b44a:	89ab      	ldrh	r3, [r5, #12]
 800b44c:	059a      	lsls	r2, r3, #22
 800b44e:	d402      	bmi.n	800b456 <_vfiprintf_r+0x2a>
 800b450:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b452:	f7fe fcc0 	bl	8009dd6 <__retarget_lock_acquire_recursive>
 800b456:	89ab      	ldrh	r3, [r5, #12]
 800b458:	071b      	lsls	r3, r3, #28
 800b45a:	d501      	bpl.n	800b460 <_vfiprintf_r+0x34>
 800b45c:	692b      	ldr	r3, [r5, #16]
 800b45e:	b99b      	cbnz	r3, 800b488 <_vfiprintf_r+0x5c>
 800b460:	4629      	mov	r1, r5
 800b462:	4630      	mov	r0, r6
 800b464:	f7fe fbe4 	bl	8009c30 <__swsetup_r>
 800b468:	b170      	cbz	r0, 800b488 <_vfiprintf_r+0x5c>
 800b46a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b46c:	07dc      	lsls	r4, r3, #31
 800b46e:	d504      	bpl.n	800b47a <_vfiprintf_r+0x4e>
 800b470:	f04f 30ff 	mov.w	r0, #4294967295
 800b474:	b01d      	add	sp, #116	@ 0x74
 800b476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b47a:	89ab      	ldrh	r3, [r5, #12]
 800b47c:	0598      	lsls	r0, r3, #22
 800b47e:	d4f7      	bmi.n	800b470 <_vfiprintf_r+0x44>
 800b480:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b482:	f7fe fca9 	bl	8009dd8 <__retarget_lock_release_recursive>
 800b486:	e7f3      	b.n	800b470 <_vfiprintf_r+0x44>
 800b488:	2300      	movs	r3, #0
 800b48a:	f8cd 800c 	str.w	r8, [sp, #12]
 800b48e:	f04f 0901 	mov.w	r9, #1
 800b492:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 800b648 <_vfiprintf_r+0x21c>
 800b496:	9309      	str	r3, [sp, #36]	@ 0x24
 800b498:	2320      	movs	r3, #32
 800b49a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b49e:	2330      	movs	r3, #48	@ 0x30
 800b4a0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b4a4:	4623      	mov	r3, r4
 800b4a6:	469a      	mov	sl, r3
 800b4a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b4ac:	b10a      	cbz	r2, 800b4b2 <_vfiprintf_r+0x86>
 800b4ae:	2a25      	cmp	r2, #37	@ 0x25
 800b4b0:	d1f9      	bne.n	800b4a6 <_vfiprintf_r+0x7a>
 800b4b2:	ebba 0b04 	subs.w	fp, sl, r4
 800b4b6:	d00b      	beq.n	800b4d0 <_vfiprintf_r+0xa4>
 800b4b8:	465b      	mov	r3, fp
 800b4ba:	4622      	mov	r2, r4
 800b4bc:	4629      	mov	r1, r5
 800b4be:	4630      	mov	r0, r6
 800b4c0:	f7ff ffa1 	bl	800b406 <__sfputs_r>
 800b4c4:	3001      	adds	r0, #1
 800b4c6:	f000 80a7 	beq.w	800b618 <_vfiprintf_r+0x1ec>
 800b4ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b4cc:	445a      	add	r2, fp
 800b4ce:	9209      	str	r2, [sp, #36]	@ 0x24
 800b4d0:	f89a 3000 	ldrb.w	r3, [sl]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	f000 809f 	beq.w	800b618 <_vfiprintf_r+0x1ec>
 800b4da:	2300      	movs	r3, #0
 800b4dc:	f04f 32ff 	mov.w	r2, #4294967295
 800b4e0:	f10a 0a01 	add.w	sl, sl, #1
 800b4e4:	9304      	str	r3, [sp, #16]
 800b4e6:	9307      	str	r3, [sp, #28]
 800b4e8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b4ec:	931a      	str	r3, [sp, #104]	@ 0x68
 800b4ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b4f2:	4654      	mov	r4, sl
 800b4f4:	2205      	movs	r2, #5
 800b4f6:	4854      	ldr	r0, [pc, #336]	@ (800b648 <_vfiprintf_r+0x21c>)
 800b4f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4fc:	f7fe fc6d 	bl	8009dda <memchr>
 800b500:	9a04      	ldr	r2, [sp, #16]
 800b502:	b9d8      	cbnz	r0, 800b53c <_vfiprintf_r+0x110>
 800b504:	06d1      	lsls	r1, r2, #27
 800b506:	bf44      	itt	mi
 800b508:	2320      	movmi	r3, #32
 800b50a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b50e:	0713      	lsls	r3, r2, #28
 800b510:	bf44      	itt	mi
 800b512:	232b      	movmi	r3, #43	@ 0x2b
 800b514:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b518:	f89a 3000 	ldrb.w	r3, [sl]
 800b51c:	2b2a      	cmp	r3, #42	@ 0x2a
 800b51e:	d015      	beq.n	800b54c <_vfiprintf_r+0x120>
 800b520:	9a07      	ldr	r2, [sp, #28]
 800b522:	4654      	mov	r4, sl
 800b524:	2000      	movs	r0, #0
 800b526:	f04f 0c0a 	mov.w	ip, #10
 800b52a:	4621      	mov	r1, r4
 800b52c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b530:	3b30      	subs	r3, #48	@ 0x30
 800b532:	2b09      	cmp	r3, #9
 800b534:	d94b      	bls.n	800b5ce <_vfiprintf_r+0x1a2>
 800b536:	b1b0      	cbz	r0, 800b566 <_vfiprintf_r+0x13a>
 800b538:	9207      	str	r2, [sp, #28]
 800b53a:	e014      	b.n	800b566 <_vfiprintf_r+0x13a>
 800b53c:	eba0 0308 	sub.w	r3, r0, r8
 800b540:	46a2      	mov	sl, r4
 800b542:	fa09 f303 	lsl.w	r3, r9, r3
 800b546:	4313      	orrs	r3, r2
 800b548:	9304      	str	r3, [sp, #16]
 800b54a:	e7d2      	b.n	800b4f2 <_vfiprintf_r+0xc6>
 800b54c:	9b03      	ldr	r3, [sp, #12]
 800b54e:	1d19      	adds	r1, r3, #4
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	2b00      	cmp	r3, #0
 800b554:	9103      	str	r1, [sp, #12]
 800b556:	bfbb      	ittet	lt
 800b558:	425b      	neglt	r3, r3
 800b55a:	f042 0202 	orrlt.w	r2, r2, #2
 800b55e:	9307      	strge	r3, [sp, #28]
 800b560:	9307      	strlt	r3, [sp, #28]
 800b562:	bfb8      	it	lt
 800b564:	9204      	strlt	r2, [sp, #16]
 800b566:	7823      	ldrb	r3, [r4, #0]
 800b568:	2b2e      	cmp	r3, #46	@ 0x2e
 800b56a:	d10a      	bne.n	800b582 <_vfiprintf_r+0x156>
 800b56c:	7863      	ldrb	r3, [r4, #1]
 800b56e:	2b2a      	cmp	r3, #42	@ 0x2a
 800b570:	d132      	bne.n	800b5d8 <_vfiprintf_r+0x1ac>
 800b572:	9b03      	ldr	r3, [sp, #12]
 800b574:	3402      	adds	r4, #2
 800b576:	1d1a      	adds	r2, r3, #4
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b57e:	9203      	str	r2, [sp, #12]
 800b580:	9305      	str	r3, [sp, #20]
 800b582:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b658 <_vfiprintf_r+0x22c>
 800b586:	2203      	movs	r2, #3
 800b588:	7821      	ldrb	r1, [r4, #0]
 800b58a:	4650      	mov	r0, sl
 800b58c:	f7fe fc25 	bl	8009dda <memchr>
 800b590:	b138      	cbz	r0, 800b5a2 <_vfiprintf_r+0x176>
 800b592:	eba0 000a 	sub.w	r0, r0, sl
 800b596:	2240      	movs	r2, #64	@ 0x40
 800b598:	9b04      	ldr	r3, [sp, #16]
 800b59a:	3401      	adds	r4, #1
 800b59c:	4082      	lsls	r2, r0
 800b59e:	4313      	orrs	r3, r2
 800b5a0:	9304      	str	r3, [sp, #16]
 800b5a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5a6:	2206      	movs	r2, #6
 800b5a8:	4828      	ldr	r0, [pc, #160]	@ (800b64c <_vfiprintf_r+0x220>)
 800b5aa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b5ae:	f7fe fc14 	bl	8009dda <memchr>
 800b5b2:	2800      	cmp	r0, #0
 800b5b4:	d03f      	beq.n	800b636 <_vfiprintf_r+0x20a>
 800b5b6:	4b26      	ldr	r3, [pc, #152]	@ (800b650 <_vfiprintf_r+0x224>)
 800b5b8:	bb1b      	cbnz	r3, 800b602 <_vfiprintf_r+0x1d6>
 800b5ba:	9b03      	ldr	r3, [sp, #12]
 800b5bc:	3307      	adds	r3, #7
 800b5be:	f023 0307 	bic.w	r3, r3, #7
 800b5c2:	3308      	adds	r3, #8
 800b5c4:	9303      	str	r3, [sp, #12]
 800b5c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b5c8:	443b      	add	r3, r7
 800b5ca:	9309      	str	r3, [sp, #36]	@ 0x24
 800b5cc:	e76a      	b.n	800b4a4 <_vfiprintf_r+0x78>
 800b5ce:	fb0c 3202 	mla	r2, ip, r2, r3
 800b5d2:	460c      	mov	r4, r1
 800b5d4:	2001      	movs	r0, #1
 800b5d6:	e7a8      	b.n	800b52a <_vfiprintf_r+0xfe>
 800b5d8:	2300      	movs	r3, #0
 800b5da:	3401      	adds	r4, #1
 800b5dc:	f04f 0c0a 	mov.w	ip, #10
 800b5e0:	4619      	mov	r1, r3
 800b5e2:	9305      	str	r3, [sp, #20]
 800b5e4:	4620      	mov	r0, r4
 800b5e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b5ea:	3a30      	subs	r2, #48	@ 0x30
 800b5ec:	2a09      	cmp	r2, #9
 800b5ee:	d903      	bls.n	800b5f8 <_vfiprintf_r+0x1cc>
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d0c6      	beq.n	800b582 <_vfiprintf_r+0x156>
 800b5f4:	9105      	str	r1, [sp, #20]
 800b5f6:	e7c4      	b.n	800b582 <_vfiprintf_r+0x156>
 800b5f8:	fb0c 2101 	mla	r1, ip, r1, r2
 800b5fc:	4604      	mov	r4, r0
 800b5fe:	2301      	movs	r3, #1
 800b600:	e7f0      	b.n	800b5e4 <_vfiprintf_r+0x1b8>
 800b602:	ab03      	add	r3, sp, #12
 800b604:	462a      	mov	r2, r5
 800b606:	a904      	add	r1, sp, #16
 800b608:	4630      	mov	r0, r6
 800b60a:	9300      	str	r3, [sp, #0]
 800b60c:	4b11      	ldr	r3, [pc, #68]	@ (800b654 <_vfiprintf_r+0x228>)
 800b60e:	f7fd fda1 	bl	8009154 <_printf_float>
 800b612:	4607      	mov	r7, r0
 800b614:	1c78      	adds	r0, r7, #1
 800b616:	d1d6      	bne.n	800b5c6 <_vfiprintf_r+0x19a>
 800b618:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b61a:	07d9      	lsls	r1, r3, #31
 800b61c:	d405      	bmi.n	800b62a <_vfiprintf_r+0x1fe>
 800b61e:	89ab      	ldrh	r3, [r5, #12]
 800b620:	059a      	lsls	r2, r3, #22
 800b622:	d402      	bmi.n	800b62a <_vfiprintf_r+0x1fe>
 800b624:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b626:	f7fe fbd7 	bl	8009dd8 <__retarget_lock_release_recursive>
 800b62a:	89ab      	ldrh	r3, [r5, #12]
 800b62c:	065b      	lsls	r3, r3, #25
 800b62e:	f53f af1f 	bmi.w	800b470 <_vfiprintf_r+0x44>
 800b632:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b634:	e71e      	b.n	800b474 <_vfiprintf_r+0x48>
 800b636:	ab03      	add	r3, sp, #12
 800b638:	462a      	mov	r2, r5
 800b63a:	a904      	add	r1, sp, #16
 800b63c:	4630      	mov	r0, r6
 800b63e:	9300      	str	r3, [sp, #0]
 800b640:	4b04      	ldr	r3, [pc, #16]	@ (800b654 <_vfiprintf_r+0x228>)
 800b642:	f7fe f823 	bl	800968c <_printf_i>
 800b646:	e7e4      	b.n	800b612 <_vfiprintf_r+0x1e6>
 800b648:	0800c0fa 	.word	0x0800c0fa
 800b64c:	0800c104 	.word	0x0800c104
 800b650:	08009155 	.word	0x08009155
 800b654:	0800b407 	.word	0x0800b407
 800b658:	0800c100 	.word	0x0800c100

0800b65c <__sflush_r>:
 800b65c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b664:	0716      	lsls	r6, r2, #28
 800b666:	4605      	mov	r5, r0
 800b668:	460c      	mov	r4, r1
 800b66a:	d454      	bmi.n	800b716 <__sflush_r+0xba>
 800b66c:	684b      	ldr	r3, [r1, #4]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	dc02      	bgt.n	800b678 <__sflush_r+0x1c>
 800b672:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b674:	2b00      	cmp	r3, #0
 800b676:	dd48      	ble.n	800b70a <__sflush_r+0xae>
 800b678:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b67a:	2e00      	cmp	r6, #0
 800b67c:	d045      	beq.n	800b70a <__sflush_r+0xae>
 800b67e:	2300      	movs	r3, #0
 800b680:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b684:	682f      	ldr	r7, [r5, #0]
 800b686:	6a21      	ldr	r1, [r4, #32]
 800b688:	602b      	str	r3, [r5, #0]
 800b68a:	d030      	beq.n	800b6ee <__sflush_r+0x92>
 800b68c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b68e:	89a3      	ldrh	r3, [r4, #12]
 800b690:	0759      	lsls	r1, r3, #29
 800b692:	d505      	bpl.n	800b6a0 <__sflush_r+0x44>
 800b694:	6863      	ldr	r3, [r4, #4]
 800b696:	1ad2      	subs	r2, r2, r3
 800b698:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b69a:	b10b      	cbz	r3, 800b6a0 <__sflush_r+0x44>
 800b69c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b69e:	1ad2      	subs	r2, r2, r3
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b6a4:	6a21      	ldr	r1, [r4, #32]
 800b6a6:	4628      	mov	r0, r5
 800b6a8:	47b0      	blx	r6
 800b6aa:	1c43      	adds	r3, r0, #1
 800b6ac:	89a3      	ldrh	r3, [r4, #12]
 800b6ae:	d106      	bne.n	800b6be <__sflush_r+0x62>
 800b6b0:	6829      	ldr	r1, [r5, #0]
 800b6b2:	291d      	cmp	r1, #29
 800b6b4:	d82b      	bhi.n	800b70e <__sflush_r+0xb2>
 800b6b6:	4a2a      	ldr	r2, [pc, #168]	@ (800b760 <__sflush_r+0x104>)
 800b6b8:	40ca      	lsrs	r2, r1
 800b6ba:	07d6      	lsls	r6, r2, #31
 800b6bc:	d527      	bpl.n	800b70e <__sflush_r+0xb2>
 800b6be:	2200      	movs	r2, #0
 800b6c0:	04d9      	lsls	r1, r3, #19
 800b6c2:	6062      	str	r2, [r4, #4]
 800b6c4:	6922      	ldr	r2, [r4, #16]
 800b6c6:	6022      	str	r2, [r4, #0]
 800b6c8:	d504      	bpl.n	800b6d4 <__sflush_r+0x78>
 800b6ca:	1c42      	adds	r2, r0, #1
 800b6cc:	d101      	bne.n	800b6d2 <__sflush_r+0x76>
 800b6ce:	682b      	ldr	r3, [r5, #0]
 800b6d0:	b903      	cbnz	r3, 800b6d4 <__sflush_r+0x78>
 800b6d2:	6560      	str	r0, [r4, #84]	@ 0x54
 800b6d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b6d6:	602f      	str	r7, [r5, #0]
 800b6d8:	b1b9      	cbz	r1, 800b70a <__sflush_r+0xae>
 800b6da:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b6de:	4299      	cmp	r1, r3
 800b6e0:	d002      	beq.n	800b6e8 <__sflush_r+0x8c>
 800b6e2:	4628      	mov	r0, r5
 800b6e4:	f7ff f9f6 	bl	800aad4 <_free_r>
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	6363      	str	r3, [r4, #52]	@ 0x34
 800b6ec:	e00d      	b.n	800b70a <__sflush_r+0xae>
 800b6ee:	2301      	movs	r3, #1
 800b6f0:	4628      	mov	r0, r5
 800b6f2:	47b0      	blx	r6
 800b6f4:	4602      	mov	r2, r0
 800b6f6:	1c50      	adds	r0, r2, #1
 800b6f8:	d1c9      	bne.n	800b68e <__sflush_r+0x32>
 800b6fa:	682b      	ldr	r3, [r5, #0]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d0c6      	beq.n	800b68e <__sflush_r+0x32>
 800b700:	2b1d      	cmp	r3, #29
 800b702:	d001      	beq.n	800b708 <__sflush_r+0xac>
 800b704:	2b16      	cmp	r3, #22
 800b706:	d11d      	bne.n	800b744 <__sflush_r+0xe8>
 800b708:	602f      	str	r7, [r5, #0]
 800b70a:	2000      	movs	r0, #0
 800b70c:	e021      	b.n	800b752 <__sflush_r+0xf6>
 800b70e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b712:	b21b      	sxth	r3, r3
 800b714:	e01a      	b.n	800b74c <__sflush_r+0xf0>
 800b716:	690f      	ldr	r7, [r1, #16]
 800b718:	2f00      	cmp	r7, #0
 800b71a:	d0f6      	beq.n	800b70a <__sflush_r+0xae>
 800b71c:	0793      	lsls	r3, r2, #30
 800b71e:	680e      	ldr	r6, [r1, #0]
 800b720:	600f      	str	r7, [r1, #0]
 800b722:	bf0c      	ite	eq
 800b724:	694b      	ldreq	r3, [r1, #20]
 800b726:	2300      	movne	r3, #0
 800b728:	eba6 0807 	sub.w	r8, r6, r7
 800b72c:	608b      	str	r3, [r1, #8]
 800b72e:	f1b8 0f00 	cmp.w	r8, #0
 800b732:	ddea      	ble.n	800b70a <__sflush_r+0xae>
 800b734:	4643      	mov	r3, r8
 800b736:	463a      	mov	r2, r7
 800b738:	6a21      	ldr	r1, [r4, #32]
 800b73a:	4628      	mov	r0, r5
 800b73c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b73e:	47b0      	blx	r6
 800b740:	2800      	cmp	r0, #0
 800b742:	dc08      	bgt.n	800b756 <__sflush_r+0xfa>
 800b744:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b748:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b74c:	f04f 30ff 	mov.w	r0, #4294967295
 800b750:	81a3      	strh	r3, [r4, #12]
 800b752:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b756:	4407      	add	r7, r0
 800b758:	eba8 0800 	sub.w	r8, r8, r0
 800b75c:	e7e7      	b.n	800b72e <__sflush_r+0xd2>
 800b75e:	bf00      	nop
 800b760:	20400001 	.word	0x20400001

0800b764 <_fflush_r>:
 800b764:	b538      	push	{r3, r4, r5, lr}
 800b766:	690b      	ldr	r3, [r1, #16]
 800b768:	4605      	mov	r5, r0
 800b76a:	460c      	mov	r4, r1
 800b76c:	b913      	cbnz	r3, 800b774 <_fflush_r+0x10>
 800b76e:	2500      	movs	r5, #0
 800b770:	4628      	mov	r0, r5
 800b772:	bd38      	pop	{r3, r4, r5, pc}
 800b774:	b118      	cbz	r0, 800b77e <_fflush_r+0x1a>
 800b776:	6a03      	ldr	r3, [r0, #32]
 800b778:	b90b      	cbnz	r3, 800b77e <_fflush_r+0x1a>
 800b77a:	f7fe f931 	bl	80099e0 <__sinit>
 800b77e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b782:	2b00      	cmp	r3, #0
 800b784:	d0f3      	beq.n	800b76e <_fflush_r+0xa>
 800b786:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b788:	07d0      	lsls	r0, r2, #31
 800b78a:	d404      	bmi.n	800b796 <_fflush_r+0x32>
 800b78c:	0599      	lsls	r1, r3, #22
 800b78e:	d402      	bmi.n	800b796 <_fflush_r+0x32>
 800b790:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b792:	f7fe fb20 	bl	8009dd6 <__retarget_lock_acquire_recursive>
 800b796:	4628      	mov	r0, r5
 800b798:	4621      	mov	r1, r4
 800b79a:	f7ff ff5f 	bl	800b65c <__sflush_r>
 800b79e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b7a0:	4605      	mov	r5, r0
 800b7a2:	07da      	lsls	r2, r3, #31
 800b7a4:	d4e4      	bmi.n	800b770 <_fflush_r+0xc>
 800b7a6:	89a3      	ldrh	r3, [r4, #12]
 800b7a8:	059b      	lsls	r3, r3, #22
 800b7aa:	d4e1      	bmi.n	800b770 <_fflush_r+0xc>
 800b7ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b7ae:	f7fe fb13 	bl	8009dd8 <__retarget_lock_release_recursive>
 800b7b2:	e7dd      	b.n	800b770 <_fflush_r+0xc>

0800b7b4 <__swhatbuf_r>:
 800b7b4:	b570      	push	{r4, r5, r6, lr}
 800b7b6:	460c      	mov	r4, r1
 800b7b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7bc:	b096      	sub	sp, #88	@ 0x58
 800b7be:	4615      	mov	r5, r2
 800b7c0:	2900      	cmp	r1, #0
 800b7c2:	461e      	mov	r6, r3
 800b7c4:	da0c      	bge.n	800b7e0 <__swhatbuf_r+0x2c>
 800b7c6:	89a3      	ldrh	r3, [r4, #12]
 800b7c8:	2100      	movs	r1, #0
 800b7ca:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b7ce:	bf14      	ite	ne
 800b7d0:	2340      	movne	r3, #64	@ 0x40
 800b7d2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b7d6:	2000      	movs	r0, #0
 800b7d8:	6031      	str	r1, [r6, #0]
 800b7da:	602b      	str	r3, [r5, #0]
 800b7dc:	b016      	add	sp, #88	@ 0x58
 800b7de:	bd70      	pop	{r4, r5, r6, pc}
 800b7e0:	466a      	mov	r2, sp
 800b7e2:	f000 f849 	bl	800b878 <_fstat_r>
 800b7e6:	2800      	cmp	r0, #0
 800b7e8:	dbed      	blt.n	800b7c6 <__swhatbuf_r+0x12>
 800b7ea:	9901      	ldr	r1, [sp, #4]
 800b7ec:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b7f0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b7f4:	4259      	negs	r1, r3
 800b7f6:	4159      	adcs	r1, r3
 800b7f8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b7fc:	e7eb      	b.n	800b7d6 <__swhatbuf_r+0x22>

0800b7fe <__smakebuf_r>:
 800b7fe:	898b      	ldrh	r3, [r1, #12]
 800b800:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b802:	079d      	lsls	r5, r3, #30
 800b804:	4606      	mov	r6, r0
 800b806:	460c      	mov	r4, r1
 800b808:	d507      	bpl.n	800b81a <__smakebuf_r+0x1c>
 800b80a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b80e:	6023      	str	r3, [r4, #0]
 800b810:	6123      	str	r3, [r4, #16]
 800b812:	2301      	movs	r3, #1
 800b814:	6163      	str	r3, [r4, #20]
 800b816:	b003      	add	sp, #12
 800b818:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b81a:	ab01      	add	r3, sp, #4
 800b81c:	466a      	mov	r2, sp
 800b81e:	f7ff ffc9 	bl	800b7b4 <__swhatbuf_r>
 800b822:	9f00      	ldr	r7, [sp, #0]
 800b824:	4605      	mov	r5, r0
 800b826:	4630      	mov	r0, r6
 800b828:	4639      	mov	r1, r7
 800b82a:	f7ff f9c7 	bl	800abbc <_malloc_r>
 800b82e:	b948      	cbnz	r0, 800b844 <__smakebuf_r+0x46>
 800b830:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b834:	059a      	lsls	r2, r3, #22
 800b836:	d4ee      	bmi.n	800b816 <__smakebuf_r+0x18>
 800b838:	f023 0303 	bic.w	r3, r3, #3
 800b83c:	f043 0302 	orr.w	r3, r3, #2
 800b840:	81a3      	strh	r3, [r4, #12]
 800b842:	e7e2      	b.n	800b80a <__smakebuf_r+0xc>
 800b844:	89a3      	ldrh	r3, [r4, #12]
 800b846:	6020      	str	r0, [r4, #0]
 800b848:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b84c:	81a3      	strh	r3, [r4, #12]
 800b84e:	9b01      	ldr	r3, [sp, #4]
 800b850:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b854:	b15b      	cbz	r3, 800b86e <__smakebuf_r+0x70>
 800b856:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b85a:	4630      	mov	r0, r6
 800b85c:	f000 f81e 	bl	800b89c <_isatty_r>
 800b860:	b128      	cbz	r0, 800b86e <__smakebuf_r+0x70>
 800b862:	89a3      	ldrh	r3, [r4, #12]
 800b864:	f023 0303 	bic.w	r3, r3, #3
 800b868:	f043 0301 	orr.w	r3, r3, #1
 800b86c:	81a3      	strh	r3, [r4, #12]
 800b86e:	89a3      	ldrh	r3, [r4, #12]
 800b870:	431d      	orrs	r5, r3
 800b872:	81a5      	strh	r5, [r4, #12]
 800b874:	e7cf      	b.n	800b816 <__smakebuf_r+0x18>
	...

0800b878 <_fstat_r>:
 800b878:	b538      	push	{r3, r4, r5, lr}
 800b87a:	2300      	movs	r3, #0
 800b87c:	4d06      	ldr	r5, [pc, #24]	@ (800b898 <_fstat_r+0x20>)
 800b87e:	4604      	mov	r4, r0
 800b880:	4608      	mov	r0, r1
 800b882:	4611      	mov	r1, r2
 800b884:	602b      	str	r3, [r5, #0]
 800b886:	f7f6 feea 	bl	800265e <_fstat>
 800b88a:	1c43      	adds	r3, r0, #1
 800b88c:	d102      	bne.n	800b894 <_fstat_r+0x1c>
 800b88e:	682b      	ldr	r3, [r5, #0]
 800b890:	b103      	cbz	r3, 800b894 <_fstat_r+0x1c>
 800b892:	6023      	str	r3, [r4, #0]
 800b894:	bd38      	pop	{r3, r4, r5, pc}
 800b896:	bf00      	nop
 800b898:	2000052c 	.word	0x2000052c

0800b89c <_isatty_r>:
 800b89c:	b538      	push	{r3, r4, r5, lr}
 800b89e:	2300      	movs	r3, #0
 800b8a0:	4d05      	ldr	r5, [pc, #20]	@ (800b8b8 <_isatty_r+0x1c>)
 800b8a2:	4604      	mov	r4, r0
 800b8a4:	4608      	mov	r0, r1
 800b8a6:	602b      	str	r3, [r5, #0]
 800b8a8:	f7f6 fee9 	bl	800267e <_isatty>
 800b8ac:	1c43      	adds	r3, r0, #1
 800b8ae:	d102      	bne.n	800b8b6 <_isatty_r+0x1a>
 800b8b0:	682b      	ldr	r3, [r5, #0]
 800b8b2:	b103      	cbz	r3, 800b8b6 <_isatty_r+0x1a>
 800b8b4:	6023      	str	r3, [r4, #0]
 800b8b6:	bd38      	pop	{r3, r4, r5, pc}
 800b8b8:	2000052c 	.word	0x2000052c

0800b8bc <_sbrk_r>:
 800b8bc:	b538      	push	{r3, r4, r5, lr}
 800b8be:	2300      	movs	r3, #0
 800b8c0:	4d05      	ldr	r5, [pc, #20]	@ (800b8d8 <_sbrk_r+0x1c>)
 800b8c2:	4604      	mov	r4, r0
 800b8c4:	4608      	mov	r0, r1
 800b8c6:	602b      	str	r3, [r5, #0]
 800b8c8:	f7f6 fef2 	bl	80026b0 <_sbrk>
 800b8cc:	1c43      	adds	r3, r0, #1
 800b8ce:	d102      	bne.n	800b8d6 <_sbrk_r+0x1a>
 800b8d0:	682b      	ldr	r3, [r5, #0]
 800b8d2:	b103      	cbz	r3, 800b8d6 <_sbrk_r+0x1a>
 800b8d4:	6023      	str	r3, [r4, #0]
 800b8d6:	bd38      	pop	{r3, r4, r5, pc}
 800b8d8:	2000052c 	.word	0x2000052c

0800b8dc <__assert_func>:
 800b8dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b8de:	4614      	mov	r4, r2
 800b8e0:	461a      	mov	r2, r3
 800b8e2:	4b09      	ldr	r3, [pc, #36]	@ (800b908 <__assert_func+0x2c>)
 800b8e4:	4605      	mov	r5, r0
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	68d8      	ldr	r0, [r3, #12]
 800b8ea:	b14c      	cbz	r4, 800b900 <__assert_func+0x24>
 800b8ec:	4b07      	ldr	r3, [pc, #28]	@ (800b90c <__assert_func+0x30>)
 800b8ee:	9100      	str	r1, [sp, #0]
 800b8f0:	4907      	ldr	r1, [pc, #28]	@ (800b910 <__assert_func+0x34>)
 800b8f2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b8f6:	462b      	mov	r3, r5
 800b8f8:	f000 f842 	bl	800b980 <fiprintf>
 800b8fc:	f000 f852 	bl	800b9a4 <abort>
 800b900:	4b04      	ldr	r3, [pc, #16]	@ (800b914 <__assert_func+0x38>)
 800b902:	461c      	mov	r4, r3
 800b904:	e7f3      	b.n	800b8ee <__assert_func+0x12>
 800b906:	bf00      	nop
 800b908:	20000020 	.word	0x20000020
 800b90c:	0800c115 	.word	0x0800c115
 800b910:	0800c122 	.word	0x0800c122
 800b914:	0800c150 	.word	0x0800c150

0800b918 <_calloc_r>:
 800b918:	b570      	push	{r4, r5, r6, lr}
 800b91a:	fba1 5402 	umull	r5, r4, r1, r2
 800b91e:	b934      	cbnz	r4, 800b92e <_calloc_r+0x16>
 800b920:	4629      	mov	r1, r5
 800b922:	f7ff f94b 	bl	800abbc <_malloc_r>
 800b926:	4606      	mov	r6, r0
 800b928:	b928      	cbnz	r0, 800b936 <_calloc_r+0x1e>
 800b92a:	4630      	mov	r0, r6
 800b92c:	bd70      	pop	{r4, r5, r6, pc}
 800b92e:	220c      	movs	r2, #12
 800b930:	2600      	movs	r6, #0
 800b932:	6002      	str	r2, [r0, #0]
 800b934:	e7f9      	b.n	800b92a <_calloc_r+0x12>
 800b936:	462a      	mov	r2, r5
 800b938:	4621      	mov	r1, r4
 800b93a:	f7fe f9cf 	bl	8009cdc <memset>
 800b93e:	e7f4      	b.n	800b92a <_calloc_r+0x12>

0800b940 <__ascii_mbtowc>:
 800b940:	b082      	sub	sp, #8
 800b942:	b901      	cbnz	r1, 800b946 <__ascii_mbtowc+0x6>
 800b944:	a901      	add	r1, sp, #4
 800b946:	b142      	cbz	r2, 800b95a <__ascii_mbtowc+0x1a>
 800b948:	b14b      	cbz	r3, 800b95e <__ascii_mbtowc+0x1e>
 800b94a:	7813      	ldrb	r3, [r2, #0]
 800b94c:	600b      	str	r3, [r1, #0]
 800b94e:	7812      	ldrb	r2, [r2, #0]
 800b950:	1e10      	subs	r0, r2, #0
 800b952:	bf18      	it	ne
 800b954:	2001      	movne	r0, #1
 800b956:	b002      	add	sp, #8
 800b958:	4770      	bx	lr
 800b95a:	4610      	mov	r0, r2
 800b95c:	e7fb      	b.n	800b956 <__ascii_mbtowc+0x16>
 800b95e:	f06f 0001 	mvn.w	r0, #1
 800b962:	e7f8      	b.n	800b956 <__ascii_mbtowc+0x16>

0800b964 <__ascii_wctomb>:
 800b964:	4603      	mov	r3, r0
 800b966:	4608      	mov	r0, r1
 800b968:	b141      	cbz	r1, 800b97c <__ascii_wctomb+0x18>
 800b96a:	2aff      	cmp	r2, #255	@ 0xff
 800b96c:	d904      	bls.n	800b978 <__ascii_wctomb+0x14>
 800b96e:	228a      	movs	r2, #138	@ 0x8a
 800b970:	f04f 30ff 	mov.w	r0, #4294967295
 800b974:	601a      	str	r2, [r3, #0]
 800b976:	4770      	bx	lr
 800b978:	2001      	movs	r0, #1
 800b97a:	700a      	strb	r2, [r1, #0]
 800b97c:	4770      	bx	lr
	...

0800b980 <fiprintf>:
 800b980:	b40e      	push	{r1, r2, r3}
 800b982:	b503      	push	{r0, r1, lr}
 800b984:	ab03      	add	r3, sp, #12
 800b986:	4601      	mov	r1, r0
 800b988:	4805      	ldr	r0, [pc, #20]	@ (800b9a0 <fiprintf+0x20>)
 800b98a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b98e:	6800      	ldr	r0, [r0, #0]
 800b990:	9301      	str	r3, [sp, #4]
 800b992:	f7ff fd4b 	bl	800b42c <_vfiprintf_r>
 800b996:	b002      	add	sp, #8
 800b998:	f85d eb04 	ldr.w	lr, [sp], #4
 800b99c:	b003      	add	sp, #12
 800b99e:	4770      	bx	lr
 800b9a0:	20000020 	.word	0x20000020

0800b9a4 <abort>:
 800b9a4:	2006      	movs	r0, #6
 800b9a6:	b508      	push	{r3, lr}
 800b9a8:	f000 f82c 	bl	800ba04 <raise>
 800b9ac:	2001      	movs	r0, #1
 800b9ae:	f7f6 fe06 	bl	80025be <_exit>

0800b9b2 <_raise_r>:
 800b9b2:	291f      	cmp	r1, #31
 800b9b4:	b538      	push	{r3, r4, r5, lr}
 800b9b6:	4605      	mov	r5, r0
 800b9b8:	460c      	mov	r4, r1
 800b9ba:	d904      	bls.n	800b9c6 <_raise_r+0x14>
 800b9bc:	2316      	movs	r3, #22
 800b9be:	6003      	str	r3, [r0, #0]
 800b9c0:	f04f 30ff 	mov.w	r0, #4294967295
 800b9c4:	bd38      	pop	{r3, r4, r5, pc}
 800b9c6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b9c8:	b112      	cbz	r2, 800b9d0 <_raise_r+0x1e>
 800b9ca:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b9ce:	b94b      	cbnz	r3, 800b9e4 <_raise_r+0x32>
 800b9d0:	4628      	mov	r0, r5
 800b9d2:	f000 f831 	bl	800ba38 <_getpid_r>
 800b9d6:	4622      	mov	r2, r4
 800b9d8:	4601      	mov	r1, r0
 800b9da:	4628      	mov	r0, r5
 800b9dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b9e0:	f000 b818 	b.w	800ba14 <_kill_r>
 800b9e4:	2b01      	cmp	r3, #1
 800b9e6:	d00a      	beq.n	800b9fe <_raise_r+0x4c>
 800b9e8:	1c59      	adds	r1, r3, #1
 800b9ea:	d103      	bne.n	800b9f4 <_raise_r+0x42>
 800b9ec:	2316      	movs	r3, #22
 800b9ee:	6003      	str	r3, [r0, #0]
 800b9f0:	2001      	movs	r0, #1
 800b9f2:	e7e7      	b.n	800b9c4 <_raise_r+0x12>
 800b9f4:	2100      	movs	r1, #0
 800b9f6:	4620      	mov	r0, r4
 800b9f8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b9fc:	4798      	blx	r3
 800b9fe:	2000      	movs	r0, #0
 800ba00:	e7e0      	b.n	800b9c4 <_raise_r+0x12>
	...

0800ba04 <raise>:
 800ba04:	4b02      	ldr	r3, [pc, #8]	@ (800ba10 <raise+0xc>)
 800ba06:	4601      	mov	r1, r0
 800ba08:	6818      	ldr	r0, [r3, #0]
 800ba0a:	f7ff bfd2 	b.w	800b9b2 <_raise_r>
 800ba0e:	bf00      	nop
 800ba10:	20000020 	.word	0x20000020

0800ba14 <_kill_r>:
 800ba14:	b538      	push	{r3, r4, r5, lr}
 800ba16:	2300      	movs	r3, #0
 800ba18:	4d06      	ldr	r5, [pc, #24]	@ (800ba34 <_kill_r+0x20>)
 800ba1a:	4604      	mov	r4, r0
 800ba1c:	4608      	mov	r0, r1
 800ba1e:	4611      	mov	r1, r2
 800ba20:	602b      	str	r3, [r5, #0]
 800ba22:	f7f6 fdbc 	bl	800259e <_kill>
 800ba26:	1c43      	adds	r3, r0, #1
 800ba28:	d102      	bne.n	800ba30 <_kill_r+0x1c>
 800ba2a:	682b      	ldr	r3, [r5, #0]
 800ba2c:	b103      	cbz	r3, 800ba30 <_kill_r+0x1c>
 800ba2e:	6023      	str	r3, [r4, #0]
 800ba30:	bd38      	pop	{r3, r4, r5, pc}
 800ba32:	bf00      	nop
 800ba34:	2000052c 	.word	0x2000052c

0800ba38 <_getpid_r>:
 800ba38:	f7f6 bda9 	b.w	800258e <_getpid>

0800ba3c <_init>:
 800ba3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba3e:	bf00      	nop
 800ba40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba42:	bc08      	pop	{r3}
 800ba44:	469e      	mov	lr, r3
 800ba46:	4770      	bx	lr

0800ba48 <_fini>:
 800ba48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba4a:	bf00      	nop
 800ba4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba4e:	bc08      	pop	{r3}
 800ba50:	469e      	mov	lr, r3
 800ba52:	4770      	bx	lr
